<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=255</guid>
      <title>GSoC Week 2 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Fri, 03 Jun 2016 17:09:47 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/06/03/gsoc-week-2-progress/</link>
      <description>&lt;p&gt;Despite having a smooth flow in week 1, my luck ran over halfway through this week. It can be called quite a bumpy ride.&lt;/p&gt;
&lt;p&gt;At the start of the week it was really great, I got Complex Doubles ready with the &lt;a href="https://github.com/symengine/symengine.rb/pull/46" target="_blank"&gt;PR #46&lt;/a&gt;, along with the Real Doubles. Another quick fix for the CWrapper was covered with &lt;a href="https://github.com/symengine/symengine/pull/966" target="_blank"&gt;PR &amp;#160;#966&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the troubles began to appear with me moving into wrapping RealMPFRs. &lt;a href="http://www.mpfr.org/" target="_blank"&gt;MPFR&lt;/a&gt;&amp;#160;is a library for arbitrary precision floating point numbers. This is implemented in SymEngine as RealMPFR, and I started work on wrapping this, along with MPC for complex numbers for both C (&lt;a href="https://github.com/symengine/symengine/pull/972" target="_blank"&gt;PR #972&lt;/a&gt;) and Ruby (&lt;a href="https://github.com/symengine/symengine.rb/pull/49" target="_blank"&gt;PR #49&lt;/a&gt;). On the Ruby side, it was expected to&amp;#160;be initialized with Floats, Strings or BigDecimals.&lt;/p&gt;
&lt;p&gt;After a very bumpy ride, mainly because of me not being very much used to memory management in C, and some issues which had to be fixed along the way (&lt;a href="https://github.com/symengine/symengine/issues/974" target="_blank"&gt;Issue #974&lt;/a&gt;). Struggling with that, I somehow was able to finish the MPFR part (actually currently waiting for all the tests to run), and will be able to move on to MPC (should be easier and doable within a day, now that MPFR is already done).&lt;/p&gt;
&lt;p&gt;But that means when I start next week, I will have a backlog, which I don&amp;#8217;t like to have hovering over me. Anyway, I hope to clear the backlog and get back to track by next weekend.&lt;/p&gt;
&lt;p&gt;Have a nice weekend!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/255/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/255/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=255&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/06/03/GSoC-week-2.html</guid>
      <title>GSoC Week 2</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 03 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/06/03/GSoC-week-2.html</link>
      <description>&lt;p&gt;This week involved more research and learning than coding and as such the
results are less visible. I made some changes to the test code for models.py
under mechanics, I spend time looking through the structure and workings of
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt;, and created a
&lt;a href="https://github.com/sympy/sympy/pull/11182"&gt;PR&lt;/a&gt; to hold the EOM class
development discussion.&lt;/p&gt;

&lt;p&gt;The tests for test_models.py were timing out and so it was suggested that I
change the tests from using rhs() to testing mass matrices and force vectors. I
put these changes together and on my machine this halved the run time of the
tests. After this change was added to &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
#11168&lt;/a&gt; and the tests passed the
models.py and its test code files were merged.&lt;/p&gt;

&lt;p&gt;To learn more about how &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; work I began by
reading through much of the documentation for the mechanics module. Included
were the pages on the two methods themselves, information on how linearization
is performed in the code and three different examples in which the two methods
are used to solve dynamics problems. As I read through the documents I
occassionally found places that could use some minor adjustments and I presented
these changes in &lt;a href="https://github.com/sympy/sympy/pull/11117"&gt;PR #11117&lt;/a&gt; which
has since been merged.&lt;/p&gt;

&lt;p&gt;In addition to reading the documentation for information, I went through the
code for each method themselves. I made note of all of the attributes,
properties and methods that each of the classes contained and compared these
between the classes. In order to compare the differences in how information was
stored in each of the classes I needed to return to the Kane&amp;#8217;s method and
Lagrange&amp;#8217;s method documentation pages. At this point Jason was able to clarify
much of my confusion regarding the different equations that the pages
contained. Jason decided this clarification would be useful to add to the pages
themselves and introduced &lt;a href="https://github.com/sympy/sympy/pull/11183"&gt;PR
#11183&lt;/a&gt;. I reviewed this PR for him
though my contribution was more along the lines of pointing out places that
might need clarification and changes that might improve the flow of the page
rather than of the content itself.&lt;/p&gt;

&lt;p&gt;Last major line of work this week was beginning the equations of motion class
itself. It was suggested by Jason that it might be useful to have the *Method
classes return a class containing the equations of motion information. I have
decided that for the moment this would be a better pursuit than creating a
parent class from which the *Methods would inherit. The *Methods classes tend to
be different in their approach to forming the equations of motion and thus I do
now currently believe that a parent class could be overly useful for multiple
*Methods. What new methods could benefit from, however, is a unified output
format as the rest of the code could be written to accept the new output rather
than specific Method classes. This would I feel would promote the addition of
new Methods more than a inherited base class would. Along this line I have
created a branch that holds the code for the new equations of motion class and
its test code. Currently the work is to transfer the pseudo-code I have into
real code.&lt;/p&gt;

&lt;p&gt;I have finished reading A Beginners Guide to 6-D Vectors (Part 2) but have made
no other progress towards Featherstone&amp;#8217;s method this week other than locating a
copy of his book.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;Next week I plan to continue working on filling out the equation of motion
class along with its test code. The next step would be to integrate this into
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; to see what tests fail and where additional
work would be needed. Also I plan to look into Featherstone&amp;#8217;s book and the
python implementation of spatial vector algebra to see what I might need to
work on in order to implement his method in SymPy.&lt;/p&gt;

&lt;h3 id="prs-and-issues-referenced-in-post"&gt;PR&amp;#8217;s and Issues Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Merged) Pydy models migration &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
  #11168&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Physics documentation &lt;a href="https://github.com/sympy/sympy/pull/11117"&gt;PR
  #11117&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Improved the explanation of the 5 equations in the Kane&amp;#8217;s Method
  docs &lt;a href="https://github.com/sympy/sympy/pull/11183"&gt;PR #11183&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) [WIP] EOMBase class development &lt;a href="https://github.com/sympy/sympy/pull/11182"&gt;PR
  #11182&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id="articlesbooks-referenced-in-post"&gt;Articles/Books Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D Vectors (Part
   2)&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=201</guid>
      <title>GSoC: Week 2 Begins</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Mon, 30 May 2016 16:00:08 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/05/30/gsoc-week-2-begins/</link>
      <description>&lt;p&gt;First, I am going to&amp;#160;talk about what has been done since last week. I implemented methods to find a recurrence relation in the coefficients of Power series expansion of a Holonomic Function, and then method to find the Power series.&lt;/p&gt;
&lt;p&gt;One of the many interesting properties of Holonomic Functions is that the coefficients in Power series expansion of a Holonomic function is a Holonomic sequence, i.e. these coefficients satisfy a recurrence relation having polynomial coefficients.&lt;/p&gt;
&lt;p&gt;This recurrence relation can be used to efficiently calculate the coefficients of Power series. The PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11153" target="_blank"&gt;11153&lt;/a&gt;&amp;#160;had these methods and got merged today. Here are a couple of examples of the implementation.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In []: p = HolonomicFunction(Dx &amp;#8211; 1, x, 0, [1]) &amp;#160;# exp(x)&lt;br /&gt;
In []: p.to_sequence()&lt;/p&gt;
&lt;p&gt;Out []:&amp;#160;HolonomicSequence((-1) + (n + 1)Sn, n), u(0) = 1&lt;/p&gt;
&lt;p&gt;In []: p.series()&lt;/p&gt;
&lt;p&gt;Out []:&amp;#160;1 + x + x**2/2 + x**3/6 + x**4/24 + x**5/120 + O(x**6)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For this week it is planned first to implement a method to numerically integrate differential equations of holonomic type from any point &lt;code&gt;x=a&lt;/code&gt;&amp;#160;to &lt;code&gt;x=b&lt;/code&gt;&amp;#160;in the complex plane. The next thing to implement after this&amp;#160;would probably be converting symbolic functions/expressions to Holonomic Functions.&lt;/p&gt;
&lt;p&gt;Cheers and Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/201/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/201/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=201&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=261</guid>
      <title>GSoC Week 1</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Mon, 30 May 2016 14:18:39 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/30/gsoc-week-1/</link>
      <description>&lt;p&gt;The First week of the coding period has come to an end, I had a meeting with Jason and Sartaj, my mentors, on 22nd of May. I was going to start working on the Singularity Functions class, so we had a discussion on how to proceed. We exchanged our thoughts on removing the is_real check for the arguments passed through the rewrite(Piecewise) method. We also discussed how we can let the pretty printer prints the derivatives of DiracDelta class. They suggested me to review some Pull Requests of other members in order to encourage them, interact with other community members &amp;#160;and learn. The meeting was quite interesting. We ended up discussing many new things that we can implement.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Progress of Week 1&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11139"&gt;PR 11139&lt;/a&gt;, I was trying to figure out how to pretty print the derivative of DiracDelta class as:-&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;In [1]: DiracDelta(y, 3)
Out[1]:
 (3)
&amp;#948;   (y)&lt;/pre&gt;
&lt;p&gt;Jason helped me to figure out the&amp;#160;way. I will try to complete the implementation part by the middle of the next week.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178&lt;/a&gt;, I have started working on the Singularity Functions class. Sartaj suggested me to keep the implementation of pretty printing part for later. Till now I have defined eval(), fdiff(), rewrite(Piecewise) only.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;In [2]: SingularityFunction(x, a, n)
Out[2]: &lt;/code&gt;&lt;code&gt;SingularityFunction(x, a, n)

&lt;/code&gt;&lt;code&gt;In [3]: SingularityFunction(y, &lt;span class="pl-c1"&gt;6&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;).diff(y)
Out[3]: &lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;*&lt;/span&gt;SingularityFunction(y, &lt;span class="pl-c1"&gt;6&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;)

In [4]: SingularityFunction(x, &lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;5&lt;/span&gt;).rewrite(Piecewise)
Out[4]: Piecewise(((x &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)&lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-c1"&gt;5&lt;/span&gt;, x &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;), (&lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;True&lt;/span&gt;))

&lt;/code&gt;&lt;code&gt;In [5]: SingularityFunction(x, 3, 2).subs(x, 6)
Out[5]: 9&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;I was reviewing&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11065" target="_blank"&gt;PR 11065&lt;/a&gt;&amp;#160;and have suggested some modifications. The idea of having an another argument for defining the value of Heaviside(0) is great. But at the same time, we can not allow that argument to pass values other than 1 and 1/2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Implementation of a&amp;#160;method to integrate Singularity Functions.&lt;/li&gt;
&lt;li&gt;Adding the&amp;#160;pretty printing of the derivatives of DiracDelta.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward toward an another great week. Cheers!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/261/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/261/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=261&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=232</guid>
      <title>GSoC Week 1 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sun, 29 May 2016 08:14:24 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/05/29/gsoc-week-1-progress/</link>
      <description>&lt;p&gt;The GSoC coding period started earlier this week. I have been coding for 6 days untils now, and am taking a break on Sunday!&lt;/p&gt;
&lt;p&gt;For this week, according to&amp;#160;GSoC proposal I started with wrapping the Complex Numbers class into Ruby. This week and the next are supposed to be for Complex numbers and Doubles.&lt;/p&gt;
&lt;p&gt;Straight from my proposal :&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Complex Numbers in the SymEngine can be of three different types.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex Double&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex Int&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex mpc&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Apart from wrapping these three different types into Ruby, this part will also include converting between the SymEngine Complex types and the &lt;/span&gt;&lt;a href="http://ruby-doc.org/core-1.9.3/Complex.html"&gt;&lt;span style="font-weight: 400;"&gt;Ruby Complex types&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Like wise, for floating point representation there are two types:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Real Double&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Real mpfr&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;These classes will be wrapped during this week of the project, as well as converting between these types and Ruby&amp;#8217;s Float and BigDecimal data types.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The Complex Numbers (excluding Complex Double and &amp;#160;Complex mpc) was wrapped successfully with &lt;a href="https://github.com/symengine/symengine.rb/pull/39" target="_blank"&gt;PR #39&lt;/a&gt;, while also fixing a couple of issues (&lt;a href="https://github.com/symengine/symengine.rb/issues/19" target="_blank"&gt;Issue #19&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine.rb/issues/21" target="_blank"&gt;Issue #21&lt;/a&gt;). Interestingly, the Ruby Spec was updated by @zverok during this week and I had the opportunity to learn a lot about Specs as I had to re-write the specs in the new style.&lt;/p&gt;
&lt;p&gt;On the other side, in the symengine/symengine repo, the CWrappers were updated to accommodate both Complex and Double numbers and successfully merged with &lt;a href="https://github.com/symengine/symengine/pull/954" target="_blank"&gt;PR #954&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The work on Doubles and Complex Doubles have already started in &lt;a href="https://github.com/symengine/symengine/pull/954" target="_blank"&gt;PR #46&lt;/a&gt;, and is almost completed. This should be ready to merge by mid next week, and by the end of next week I am hoping to complete mpc and mpfr for Complex and Doubles, and move on to the actual 3rd week work. Being ahead of the schedule is always great as it reduces pressure on my self!&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/232/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/232/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=232&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/05/29/Wrap-a-Lot</guid>
      <title>Wrap a lot</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sun, 29 May 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/05/29/Wrap-a-Lot/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;As I pointed out in last week&amp;#8217;s post, I have begun my work on the wrapping aspects of my project. The final aim of wrapping the polynomial class is to provide users with the option of using specialized polynomial libraries like Flint and Piranha.&lt;/p&gt;

&lt;p&gt;Right at the beginning of the project, I was lacking the basic idea of how the wrapping will work. Mostly I was confused by the fact that we have to right common code for all the libraries (SymEngine, Flint &amp;amp; Piranha) with the problem being, each of the these libraries have different internal representation and methods. By the end of the week, thanks to Isuru, I have much more understanding of the desired structure of the code. Here&amp;#8217;s a short summary on how it will work.&lt;/p&gt;

&lt;h3 id="polynomial-base"&gt;Polynomial Base&lt;/h3&gt;
&lt;p&gt;There will be four end (derived) classes. &lt;code class="highlighter-rouge"&gt;UIntPoly&lt;/code&gt; &amp;amp; &lt;code class="highlighter-rouge"&gt;UExprPoly&lt;/code&gt; (the SymEngine) polynomials, &lt;code class="highlighter-rouge"&gt;UIntPolyFlint&lt;/code&gt; and also &lt;code class="highlighter-rouge"&gt;UIntPolyPiranha&lt;/code&gt;. Each of these classes derive from the base class called &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt;. Now the base class must have methods and members which can be used commonly by each of the derived classes. Thus, the base class should have two members, the &lt;code class="highlighter-rouge"&gt;var&lt;/code&gt; which depicts the variable of the polynomial and a &lt;code class="highlighter-rouge"&gt;container&lt;/code&gt; which contains the data about the polynomial (basically the coefficients corresponding to each degree).&lt;/p&gt;

&lt;p&gt;This is skeleton of how the classes should look like :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UPolyBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;Symbol&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="n"&gt;Container&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the derived polynomials
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyPiranha&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;piranha&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;polynomail&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyFlint&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;flint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmpz_polyxx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="symengines-container"&gt;SymEngine&amp;#8217;s Container&lt;/h3&gt;

&lt;p&gt;The containers of the Flint and Piranha will be discussed in detail in the upcoming weeks. We now had to think about what the container must be for SymEngine. Also we have to merge as much functionality as possible. I saw that both the external libraries had operators overloaded for addition, subtraction, multiplication and division. So, methods like &lt;code class="highlighter-rouge"&gt;add_poly&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;sub_poly&lt;/code&gt; etc. could be made common in the base class itself if I implemented a container for holding SymEngine polynomials which also has it&amp;#8217;s operators overloaded.&lt;/p&gt;

&lt;p&gt;I was not familiar with the symbolic side of the polynomials, and found out that a container had already been made for &lt;code class="highlighter-rouge"&gt;UExprPoly&lt;/code&gt; called &lt;code class="highlighter-rouge"&gt;UExprDict&lt;/code&gt;. The class was nothing but a wrapper around &lt;code class="highlighter-rouge"&gt;map&amp;lt;int, Expression&amp;gt;&lt;/code&gt;. It had overloaded methods for addition, subtraction etc. So, technically this dictionary was storing all the information about the polynomials. I just had to create another similar wrapper for &lt;code class="highlighter-rouge"&gt;map&amp;lt;uint, integer_class&amp;gt;&lt;/code&gt; for the integer counterpart of the polynomial class. This resulted in &lt;a href="https://github.com/symengine/symengine/pull/946"&gt;#946&lt;/a&gt; and Isuru mentioned that most of the code for both these dictionary wrappers is about the same! So, I decided to make a base class for polynomial dictionary wrappers and both of these can inherit from that. Any different implementations (like &lt;code class="highlighter-rouge"&gt;*=&lt;/code&gt;) can be overridden in the derived class if needed.&lt;/p&gt;

&lt;p&gt;The ordered map base looks like :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ODictWrapper&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;friend&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ODictWrapper&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the derived wrappers
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntDict&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ODictWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIntDict&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UExprDict&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ODictWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UExprDict&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="finishing-the-class"&gt;Finishing the class&lt;/h3&gt;

&lt;p&gt;After the containers for SymEngine were complete, I started implementing the polynomial base class, from which the two current polynomial classes will inherit. The class turned out to be very similar to the prototype described above. Accessor methods were added and basic polynomial functions were added &lt;a href="https://github.com/symengine/symengine/pull/951"&gt;#951&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All we have to do now for functions like &lt;code class="highlighter-rouge"&gt;add_poly&lt;/code&gt; is use the overloaded operators on the containers. Also, template argument deduction will automatically allow us to call the functions directly on two same polynomial types.&lt;/p&gt;

&lt;p&gt;An example of a common template function for addition :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;RCP&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;add_upoly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_poly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_poly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_var&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and how easily it can be used :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uint_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;   &lt;span class="c1"&gt;// 2*x + 1
&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uint_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;            &lt;span class="c1"&gt;// 2*x**2
&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;add_upoly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h3&gt;

&lt;p&gt;The names of the classes I refer to here are the new names. The old names were a little unintuitive, so decided to change them, along with introducing a new subfolder in the repository to hold all code related to polynomials (and their tests). Some code was also shifted to places more apt, all changes can be seen here &lt;a href="https://github.com/symengine/symengine/pull/960"&gt;#960&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a small number of miscellaneous changes that need to be worked out in the overall structure, here they are &lt;a href="https://github.com/symengine/symengine/pull/962"&gt;#962&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More on this and Flint next week! Goodbye!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC Week 1</guid>
      <title>GSoC Week 1</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sat, 28 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc_week_1.html</link>
      <description>&lt;p&gt;
Hi everyone.
&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;
Here is a brief summary of what we have been doing for the first week of GSoC.
&lt;/p&gt;
&lt;p&gt;
In last week we opened the &lt;a href="https://github.com/sympy/sympy/pull/11140"&gt;PR #11140&lt;/a&gt; for working on implementing the Finitely Presented Groups and Coset Enumeration. Implementing the Coset Enumeration first understanding how the routine mentioned in [1] interact with each other. Since The different routines being: &lt;code&gt;define&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;coincidence&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;rep&lt;/code&gt;. Most of these methods have different versions as well, which can be made to be suitable for a particular class of groups.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;Coset Table&lt;/code&gt;: We represented it using list of lists data structure, inner lists are of fixed length, twice the number of generators, the outer list can grow as much as needed. We started with writing code for the &lt;code&gt;define&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt; routines. There was one typo in [1] for &lt;code&gt;scan&lt;/code&gt; routine, which I somehow intuitively passed initially while writing code from pseudo-code, but came across it when reading the pseudo-code again. (I didn't expected the book to contain such a type in pseudo-code). Intially we started with &lt;code&gt;-1&lt;/code&gt; as an entry for undefined slots but since &lt;code&gt;-1&lt;/code&gt; may lead to problems as Python will accept it as an index with no error indications, allowing the bugs to pass silently. So we chose &lt;code&gt;None&lt;/code&gt; as a better option to opt for.
&lt;/p&gt;
&lt;p&gt;
We wanted to make sure, these implemeted methods work as expected, so I wrote extensive tests (currently in doctests), 4 of which have been taken from [1] while one from the original Todd Coxeter paper [2].
&lt;/p&gt;
&lt;p&gt;
Just yesterday we decided to make &lt;code&gt;Coset Table&lt;/code&gt; a &lt;code&gt;class&lt;/code&gt;, since every &lt;code&gt;Coset Table&lt;/code&gt; in itself has certain attributes which are changed along the execution of the Enumeration, which can be better represented by a &lt;code&gt;class&lt;/code&gt;. It's struture is be something like&lt;br /&gt;&lt;br /&gt;
&lt;code&gt;
&lt;pre&gt;
class CosetTable(list):
    def __init__(self, fp_grp, subgroup):
        self.fp_group = fp_grp
        self.subgroup = subgroup
        self._A = list(chain.from_iterable((gen, gen**-1)
                  for gen in self.fp_group.generators))
        self.append([None]*len(self.A))

    @property
    def is_complete(self):
        for coset in self:
            for res in coset:
                if res is None:
                    return False
        return True

    # other methods
&lt;/pre&gt;
&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
On the other side we are working on &lt;a href="https://github.com/sympy/sympy/pull/11150"&gt;PR#11150&lt;/a&gt;, which deals with implementation of &lt;code&gt;FreeAbelianGroup&lt;/code&gt;, it wouldn't be tough to get along with this PR, since it is just similar to the previously implemented &lt;code&gt;FreeGroup&lt;/code&gt;, with &lt;code&gt;dict&lt;/code&gt; as its data structure.
&lt;/p&gt;
&lt;p&gt;
&lt;h4&gt;For next week&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Complete the &lt;code&gt;Coset Table&lt;/code&gt; PR, i.e implement the different strategies of Felsch, HLT. I am pretty sure, this task would take more than 1 week, since there are whole lot of other strategies which if we decide to implement would take up a lot of time, even the &lt;code&gt;Lookahead&lt;/code&gt; version of Todd Coxeter is there, which specifies a whole new data-structure for different compoents involved in Enumeration.&lt;/li&gt;
    &lt;li&gt;Later, implement different methods for &lt;code&gt;FpGroup&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Anyway, I'm really enthusiastic about my project and hope that we'll have some nice and reasonably fast algorithms in CGT by the end of the summer!
&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;i&gt;
&lt;ul&gt;
  &lt;li&gt;1. Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O'Brien, "Handbook of computational group theory";, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-5848-372-3 .&lt;/li&gt;
  &lt;li&gt;2. A practical method for enumerating cosets of a finite abstract group by J. A. TODD (University of Manchester), and H.S.M. Coxeter (University of Cambridge)&lt;/li&gt;
&lt;/i&gt;
&lt;br /&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/article&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/05/27/GSoC-week-1.html</guid>
      <title>GSoC Week 1</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 27 May 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/05/27/GSoC-week-1.html</link>
      <description>&lt;p&gt;The first week of the Google Summer of Code is now coming to an end and I feel
like I&amp;#8217;ve hit the ground running and made a great head start. Most of the week
revolved around work with creating a way to benchmark &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and
&lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; classes so that activities aimed at enchancing the speed
performance of these classes can be tracked. I also worked on moving some code
from the pydy repository to the sympy repository and made my first attempt at
reviewing a pull request. Lastly I continued researching Featherstones Method
of equation of motion generation and started digging into the structure of
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; as I work towards making a base equations
of motion class.&lt;/p&gt;

&lt;p&gt;The week started off by finishing the tkinter GUI and benchmarking code that I
had started making from scratch during the community bonding period. I added
the ability to filter the graphed results by test, python version and platform.
This code was submitted to the SymPy repository in &lt;a href="https://github.com/sympy/sympy/pull/11154"&gt;PR
#11154&lt;/a&gt;. This PR has since been
closed as Jason Moore pointed out that SymPy already has a benchmarking
repository that is able to do basically what I was achieving with my code and a
better solution would be to simply move my tests there. First I had to learn
the airspeed velocity (ASV) package which is what the benchmarking repository
uses to run it&amp;#8217;s tests. After reading through the documentation of ASV&amp;#8217;s
homepage I altered my &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; tests to fit ASV&amp;#8217;s
formatting. This code was submitted to the sympy_benchmarks repository in &lt;a href="https://github.com/sympy/sympy_benchmarks/pull/27"&gt;PR
#27&lt;/a&gt;. This code has since
been merged though during the submission process Jason brought up that it would
be a good idea to broaden the scope of testing for the equations of motion
generators and mentioned a few example scripts to look through. My summary of
reviewing those scripts can be found on the PR but basically some of the
examples did not use additional methods but simply provided different inputs
for testing equations of motion formation which is still useful.&lt;/p&gt;

&lt;p&gt;Among the scripts to review was pydy.models.py which Jason pointed out would be
useful if added to the SymPy repository as it would give additional code to
benchmark and test. Some tasks that would need to be completed to achieve this
migration were to remove all dependence of the code on pydy and come up with
some test code which I worked on the back half of this week. Also I changed the
location of the theta coordinate of models.py&amp;#8217;s second function at Jason&amp;#8217;s
request. The submission of this code to the SymPy repository is in &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
#11168&lt;/a&gt; which at the time of this
writing is awaiting the completion of the travis ci tests.&lt;/p&gt;

&lt;p&gt;The last thing I did related to my project this week was continue to learn the
math behind Roy Featherstone&amp;#8217;s equations of motion algorithm. I finished
reading through his short course on spatial vector algebra slides and their
accompaning notes. Also I contined reading through &lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D
Vectors (Part
2)&lt;/a&gt;. Lastly I
began taking notes on &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt;&amp;#8217;s apis as I begin
working towards creating an equations of motion generation base class.&lt;/p&gt;

&lt;p&gt;I also made my first attempt at doing a PR review this week on &lt;a href="https://github.com/sympy/sympy/pull/10650"&gt;PR
#10650&lt;/a&gt;. This PR had very little
code to look over and I made some suggestions on basic syntax choices. After he
fixed the suggestions, however, I pinged members who deal with that code as I
am not confident in my ability to assess whether the code is ok for merging or
if the fix is necessary.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Next week my plan is to jump more into figuring out the internals of the
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; classes which will most likely involve
dynamics topics I am less familiar with. In addition I will keep making
progress on learning Featherstone&amp;#8217;s method of equations of motion generation.
Thus it seems that next week will be focused more on theoretical learning and
less on coding than this week was.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="prs-and-issues-referenced-in-post"&gt;PR&amp;#8217;s and Issues Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Closed) Mechanics Benchmarking &lt;a href="https://github.com/sympy/sympy/pull/11154"&gt;PR
  #11154&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Added a test for KanesMethod and LagrangesMethod &lt;a href="https://github.com/sympy/sympy_benchmarks/pull/27"&gt;PR
  #27&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Fix matrix rank with complicated elements &lt;a href="https://github.com/sympy/sympy/pull/10650"&gt;PR
  #10650&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Pydy models migration &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
  #11168&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id="articlesbooks-referenced-in-post"&gt;Articles/Books Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D Vectors (Part
   2)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://royfeatherstone.org/spatial/slidesX4.pdf"&gt;A Short Course On Spatial Vector Algebra
  Slides&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://royfeatherstone.org/spatial/notes.pdf"&gt;A Short Course On Spatial Vector Algebra Slide
  Notes&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-First-Week</guid>
      <title>GSoC First Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Fri, 27 May 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-First-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Previously, I was working on the &lt;a href="https://github.com/symengine/symengine/pull/942"&gt;PR&lt;/a&gt; for &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; implementation.
I managed to get it merged this week. So, now we have &lt;code class="highlighter-rouge"&gt;UniversalSet&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;EmptySet&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; implementation in SymEngine.
Where in &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; we have a &lt;code class="highlighter-rouge"&gt;set_basic&lt;/code&gt; which can contain any &lt;code class="highlighter-rouge"&gt;Basic&lt;/code&gt; object. That is apart from &lt;code class="highlighter-rouge"&gt;Number&lt;/code&gt; objects we can have &lt;code class="highlighter-rouge"&gt;Symbol&lt;/code&gt; objects as well, and even an &lt;code class="highlighter-rouge"&gt;Expression&lt;/code&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then I started working on implementing &lt;code class="highlighter-rouge"&gt;FiniteField&lt;/code&gt;. I have sent this &lt;a href="https://github.com/symengine/symengine/pull/955"&gt;PR&lt;/a&gt;. Initially I was using &lt;code class="highlighter-rouge"&gt;std::map&amp;lt;unsigned, int&amp;gt;&lt;/code&gt; as the &lt;code class="highlighter-rouge"&gt;type&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;int&lt;/code&gt; type for &lt;code class="highlighter-rouge"&gt;modulo_&lt;/code&gt;, but I realized that there are already &lt;code class="highlighter-rouge"&gt;inverse&lt;/code&gt; function written for &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt;/&lt;code class="highlighter-rouge"&gt;mpz&lt;/code&gt;, so I changed the &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;std::map&amp;lt;unsigned, integer_class&amp;gt;&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;modulo_&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt;.
While implementing this, I thought of writing tests after doing the whole implementation. And when I wrote the tests, I realized how badly I had done the implementation, like missing corner cases and all. It is always a better practice to write tests parallely with your implementation.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So, As of now I have implemented the following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_add_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_sub_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_mul_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_quo_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_add(const RCP&amp;lt;const GaloisField&amp;gt; &amp;amp;o)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_sub(const RCP&amp;lt;const GaloisField&amp;gt; &amp;amp;o)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_mul(const RCP&amp;lt;const GaloisField&amp;gt; &amp;amp;o)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where &lt;code class="highlighter-rouge"&gt;gf_*_ground&lt;/code&gt; does the operation represented by &lt;code class="highlighter-rouge"&gt;*&lt;/code&gt; by the integer &lt;code class="highlighter-rouge"&gt;a&lt;/code&gt; to the polynomaial in the given field.
And &lt;code class="highlighter-rouge"&gt;gf_add&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;gf_sub&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;gf_mul&lt;/code&gt; do their respective operation with another polynomial in the finite field.
&lt;br /&gt;
I will be implementing &lt;code class="highlighter-rouge"&gt;gf_div&lt;/code&gt; this weekend.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=146</guid>
      <title>GSoC: First Week of Coding Phase</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Tue, 24 May 2016 09:31:56 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/05/24/gsoc-first-week-of-coding-phase/</link>
      <description>&lt;p&gt;Since my last blog post I have opened two new PR&amp;#8217;s for the Project. We&amp;#8217;ll see what they do and discuss the goals of this week.&lt;/p&gt;
&lt;p&gt;A major issue in the first PR was the slow performing algorithms, a consequence of using recursive expressions internally. Most of the algorithm implemented used matrices module to solve the linear system which doesn&amp;#8217;t support &lt;code&gt;DMP&lt;/code&gt;&amp;#160;and &lt;code&gt;DMF&lt;/code&gt;&amp;#160;objects.&lt;/p&gt;
&lt;p&gt;So I defined a new class subclassed from &lt;code&gt;MutableDenseMatrix&lt;/code&gt;&amp;#160;and changed&amp;#160;some methods to make it work with Polynomials and Fractions and used this to use Polynomials internally. Thanks to Kalevi for this idea. It works much more robust now. I have also added methods to find composition of Holonomic Functions and converting a Hypergeometric Function to Holonomic. These things are added in this &lt;a href="https://github.com/sympy/sympy/pull/11115"&gt;PR&lt;/a&gt;.&amp;#160;I hope the PR gets merged in a couple of days.&lt;/p&gt;
&lt;p&gt;A new &lt;a href="https://github.com/sympy/sympy/pull/11153"&gt;PR&lt;/a&gt; was opened for features relating to recurrence relations in coefficients of Power Series expansion of Holonomic Functions. The first thing I did was defined a class &lt;code&gt;RecurrenceOperator&lt;/code&gt;&amp;#160;parallel to &lt;code&gt;DifferentialOperator&lt;/code&gt;&amp;#160;to store the recurrence relation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals of the Week:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this week, I have planned to define a function to find the Recurrence Relation of series coefficients and then go for numerical computation of Holonomic Functions. Let me know If anything else should be implemented first as I haven&amp;#8217;t discussed this with mentors yet.&lt;/p&gt;
&lt;p&gt;The chronology might be different from what I wrote in the Proposal but we are quite ahead of that.&lt;/p&gt;
&lt;p&gt;Cheers Everyone.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/146/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/146/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=146&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/Community-Bonding-Period</guid>
      <title>Community Bonding Period</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Mon, 23 May 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/Community-Bonding-Period/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;I have been selected for GSoC&amp;#8217;16 to work with &lt;a href="http://www.sympy.org/"&gt;Sympy&lt;/a&gt; on &lt;strong&gt;Implementing Finite Fields and Set module in SymEngine&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href="https://github.com/sympy/symengine"&gt;SymEngine&lt;/a&gt; is a standalone fast C++ symbolic manipulation library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id="about-the-proposal"&gt;About the Proposal&lt;/h1&gt;

&lt;p&gt;We all know that Polynomial factorization is one of the fundamental tools of the computer algebra systems. And in symbolic mathematics, it is one of the basic requirement over which other algorithms can be implemented.&lt;br /&gt;
Currently, SymEngine has the implementation of Univariate Polynomial class, which provides us the basic functionality to add, multiply and subtract two polynomials.&lt;br /&gt;
Now, comes the problem of factoring the polynomials.&lt;br /&gt;
We have explicit solution formulas only till polynomials of degree four(the Quadtratic formula for degree 2, &lt;a href="http://en.wikipedia.org/wiki/Cardano_formula#Cardano.27s_method"&gt;the Cardano formulas&lt;/a&gt; for third-degree equations, and &lt;a href="http://en.wikipedia.org/wiki/Quartic_function#The_general_case.2C_along_Ferrari.27s_lines"&gt;the Ferrari formula&lt;/a&gt; for degree 4).&lt;br /&gt;
For sure, we need a different way out for higher degree polynomials.
We see that there are algorithms for factorization in finite fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm"&gt;Cantor&amp;#8211;Zassenhaus algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Berlekamp's_algorithm"&gt;Berlekamp&amp;#8217;s algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, this summers I will be working on converting a polynomial in integer field to finite field, then factorizing them. After which we have to do &lt;a href="https://en.wikipedia.org/wiki/Hensel's_lemma"&gt;Hensel Lifting&lt;/a&gt; to bring back the factored polynomial to integer field.&lt;/p&gt;

&lt;p&gt;Furthermore, I will be working on implementing Sets module. These two together will help us to create a basic infrastructure over which we can develop a solvers module in SymEngine.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My proposal can be found &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Nishant-Nikhil:-Implementing-Finite-Fields-and-Set-module-in-SymEngine"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="community-bonding-period"&gt;Community Bonding Period&lt;/h1&gt;

&lt;p&gt;I have been alloted &lt;a href="https://github.com/isuruf"&gt;Isuru Fernando&lt;/a&gt;, &lt;a href="https://github.com/thilinarmtb"&gt;Thilina Rathnayake&lt;/a&gt;, &lt;a href="https://github.com/Sumith1896"&gt;Sumith&lt;/a&gt; and &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt; as mentors.&lt;br /&gt;
The SymEngine community is very fast in reachability.
We had a discussion on &lt;a href="https://gitter.im/symengine/symengine"&gt;gitter channel of SymEngine&lt;/a&gt;, about the proceedings of our Proposals. As SymEngine has an implementaion of sparse polynomials, I will be working on changing them to Finite Fields. Like:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;GaloisField::GaloisField(std::map&amp;lt;unsigned, int&amp;gt; &amp;amp;dict, unsigned modulo) : modulo_(modulo)
{
	unsigned temp;
	for (auto iter : dict) {
		temp = iter.second % modulo;
		if (temp != 0)
			dict_[iter.first] = temp;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
where &lt;code class="highlighter-rouge"&gt;dict&lt;/code&gt; is the dictionary of Univariate Polynomial representation and, &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; stores its finite field representation modulo &lt;code class="highlighter-rouge"&gt;modulo_&lt;/code&gt;.
I will be implementing this in the first week of GSoC period.&lt;/p&gt;

&lt;h1 id="work-already-done"&gt;Work already Done&lt;/h1&gt;

&lt;p&gt;During the Community Bonding Period, I worked on implementing &lt;a href="https://github.com/symengine/symengine/pull/934"&gt;&lt;code class="highlighter-rouge"&gt;UniversalSet&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine/pull/942"&gt;&lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;UniversalSet&lt;/code&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern"&gt;singleton class&lt;/a&gt; like &lt;code class="highlighter-rouge"&gt;EmptySet&lt;/code&gt;, and while implementing this I learned a lot about Singleton classes.&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; is a class with a set of &lt;code class="highlighter-rouge"&gt;RCP&amp;lt;const Basic&amp;gt;&lt;/code&gt; as member variable. It can contain any object of &lt;code class="highlighter-rouge"&gt;Basic&lt;/code&gt; type. While implemeting this, we came on a fix over what to do when we have a interval like [1, 1], i.e. both end points equal. This led to a little change in &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt;&amp;#8217;s code, and now it returns a &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt;. Though this PR is not merged till now. I hope to get it merged in the next few days and along with it keep working on Finite Field implementation.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/Community Bonding period ends, starts Coding period</guid>
      <title>Community Bonding period ends, Coding period starts</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sun, 22 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/coding_period_starts.html</link>
      <description>&lt;p&gt;
The Community bonding period comes to an end now. First of all considering the issues described in the last post:
&lt;ul&gt;
&lt;li&gt;
Aaron created a new channel for our GSoC project discussion, &lt;a href="https://gitter.im/sympy/GroupTheory"&gt;sympy/GroupTheory&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
I have also added rss-feed in my blog.
&lt;/li&gt;
&lt;li&gt;
As for time of meeting, me and Kalevi often have discussion on the gitter channel, but since of quite a bit differene in timings between me and Aaron (I tend to sleep early at 11 PM IST). We three haven't been able to together have a meeting. Though Aaron suggested "Kalevi is the primary mentor, so if you have to meet without me that is fine". I also think that's not too big of an issue now, but his opinion has always helped, since he has best knowledge of sympy core.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
In the past few weeks I wasn't too much productive, since I had a touch of fever, anyways I am okay now. We have now completed the implementation of the &lt;code&gt;FreeGroup&lt;/code&gt; class in &lt;a href="https://github.com/sympy/sympy/pull/10350"&gt;PR #10350&lt;/a&gt;. I started working on the PR back in January but I halted, since of my semester classes. &lt;code&gt;FreeGroup&lt;/code&gt; is quite similar to the &lt;code&gt;PolyRing&lt;/code&gt; implemented in &lt;code&gt;sympy.polys.rings.py&lt;/code&gt;. We first started with the list of tuples as the data structure for the &lt;code&gt;FreeGroupElm&lt;/code&gt;, where each tuple being &lt;code&gt;(index, exp)&lt;/code&gt;, but since of the mutable nature of lists, Kalevi suggested to go with tuple of tuples. Also as tuples are probably more efficient as there is no 'housekeeping' overhead. Also changed the element from &lt;code&gt;(index, exp)&lt;/code&gt; --&gt; &lt;code&gt;(symbol, exp)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
 Implementing &lt;code&gt;FreeGroupElm&lt;/code&gt; deals elegantly in such a way that it can't be independently created in a public interface. The reason being: every &lt;code&gt;FreeGroupElm&lt;/code&gt; is in itself created only by the &lt;code&gt;dtype&lt;/code&gt; method of &lt;code&gt;FreeGroup&lt;/code&gt; class. The assignment is as follows:
&lt;br /&gt;
  &lt;code&gt;obj.dtype = type("FreeGroupElm", (FreeGroupElm,), {"group": obj})&lt;/code&gt;
&lt;br /&gt;.

Its sort of an advanced usage of &lt;code&gt;type&lt;/code&gt; function as a &lt;a href="http://www.stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"&gt;metaclass&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Currently the printing code of &lt;code&gt;latex&lt;/code&gt; and &lt;code&gt;pprint&lt;/code&gt; for &lt;code&gt;FreeGroupElm&lt;/code&gt; is a little hacky. I need to work on that as well.
&lt;/p&gt;

&lt;br /&gt;
&lt;p&gt;
&lt;b&gt;&lt;u&gt;Plan for Next few weeks&lt;/u&gt;&lt;/b&gt;
&lt;br /&gt;&lt;br /&gt;
Though according to my &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Gaurav-Dhingra:-Group-Theory#Proposed_Timeline"&gt;proposal timeline&lt;/a&gt;, we described to go with implementation of other algebraic structures i.e &lt;code&gt;Magma&lt;/code&gt;, &lt;code&gt;SemiGroup&lt;/code&gt;, &lt;code&gt;Monoid&lt;/code&gt;. But we will next move onto &lt;b&gt;"Coset Enumeration"&lt;/b&gt;. It is going to be a big task. That is harder and more important than other algebraic structures. Timline states it to be 5 week task, thats almost half the GSoC coding period. Well how do we go about that? I think of studying the mathematics in parallel with the implementation.
&lt;/p&gt;

&lt;p&gt;
We have created a PR for implementation of Finitely Presented Group &lt;a href="https://github.com/sympy/sympy/pull/11140"&gt;#11140&lt;/a&gt;. Not much code has been added here. Paper on Coset Enumeration using &lt;a href="http://staff.itee.uq.edu.au/havas/1973cdhw.pdf"&gt;Implementation and Analysis of Todd Coxeter Algorithm&lt;/a&gt; (by John J. Cannon, George Havas), and other paper being the original paper by Todd and Coxeter, "A practical method for enumerating cosets of a finite abstract group" are the ones I am reading. As for the implementation of Todd Coxeter, we will be following the methods described in the book "Handbook of Computational Group Theory" by Derek F. Holt.
&lt;/p&gt;

&lt;p&gt;
Also now the "official" coding period begins, good luck to everyone.
&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=196</guid>
      <title>GSoC Community Bonding Period Week 4</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sun, 22 May 2016 08:08:59 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/22/gsoc-community-bonding-period-week-4/</link>
      <description>&lt;p&gt;The last week of Community Bonding period was awesome. From tomorrow onwards, the coding period will begin. I am supposed to start working on my project from tomorrow, but I have done that already from the second week of the Community Bonding Period because I was supposed to take a vacation of 4 days (25 May &amp;#8211; 29 May). Due to some issues, I have had to cancel that vacation. Now I have got some more days to work on my project. Let&amp;#8217;s see what I have done so far&amp;#8230;&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;&amp;#160;had finally got merged.&lt;/li&gt;
&lt;li&gt;&amp;#160;&lt;code&gt;rewrite(Piecewise)&lt;/code&gt;&amp;#160;:- In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;, I was trying to solve the &amp;#160;&lt;code&gt;arg = 0&lt;/code&gt;&amp;#160;part using solve functionality in sympy. But Jason suggested not to use solve as because there may arise some cases when solve will not be able to provide the desired output. So I kept &amp;#160;the&amp;#160;&lt;code&gt;arg = 0&lt;/code&gt;&amp;#160;part as &amp;#160;it is. &amp;#160;The story doesn&amp;#8217;t end here. There is a confusion regarding keeping the check for whether &amp;#160;&lt;code&gt;arg&lt;/code&gt;&amp;#160;is real. Personally, I think that check should be there since both Heaviside and DiracDelta is defined only on real axis.&lt;/li&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11137"&gt;PR 11137&lt;/a&gt;, I have improved the doc strings&amp;#160;of all the methods under DiracDelta and Heaviside classes. I have added the contextual example for DiracDelta(x, k) and described the relation between fdiff() and diff() . This pull request needs a final review.&lt;/li&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11139"&gt;PR 11139&lt;/a&gt;, I have added the functionality to pretty print the DiracDelta(x) as&amp;#160;&lt;span style="line-height: 1.7;"&gt;&amp;#948;(x).&amp;#160;This pull request also needs a final review.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Finally, almost every proposed improvement under the issue &lt;a href="https://github.com/sympy/sympy/issues/11075"&gt;11075&lt;/a&gt;&amp;#160;is being fulfilled.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;My plans for next weeks are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To polish&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;,&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11137"&gt;PR 11137&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11139"&gt;PR 11139&lt;/a&gt;&amp;#160;and get them merged.&lt;/li&gt;
&lt;li&gt;To start working on the&amp;#160;implementation of Singularity Functions.&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/196/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/196/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=196&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/05/21/Pre-GSoC</guid>
      <title>Pre GSoC and Community Bonding</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sat, 21 May 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/05/21/Pre-GSoC/</link>
      <description>&lt;h3 id="the-kronecker-substitution"&gt;The Kronecker Substitution&lt;/h3&gt;
&lt;p&gt;I started off my work by reading through the existing &lt;code class="highlighter-rouge"&gt;mul_poly&lt;/code&gt; function. It uses the Kronecker Substitution technique to multiply two polynomials. An insight can be gained by looking at the slides &lt;a href="http://web.maths.unsw.edu.au/~davidharvey/talks/kronecker-talk.pdf"&gt;here&lt;/a&gt;. Think of it this way,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;#8220;If you evaluate a polynomial at a large enough power of 10, I bet you can tell all it&amp;#8217;s coefficients just by looking at the result!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The mentioned slides call this the KS1 algorithm. Another algorithm it proposes is the KS2 algorithm, which evaluates the polynomial at two points (in contrast to just one) to interpolate the polynomial. A more mathematical explanation on the two techniques can be found &lt;a href="http://arxiv.org/pdf/0712.4046v1.pdf"&gt;here&lt;/a&gt;. I implemented the algorithm, and it wasn&amp;#8217;t too difficult, as it was a a slight modification to the already existing multiplication technique. Later, I added a benchmark test for comparing the two techniques, KS1 &amp;amp; KS2. The benchmark (roughly) calculates the ratio of the time required for multiplying two polynomials using the two algorithms. Both the polynomial length (from 1 to 10,000) and the bit length of the coefficients (5, 10, 15, 20 bits) were varied. The graphs of the benchmarking are as follows.&lt;/p&gt;

&lt;p&gt;Linear &amp;amp; Log scale :
&lt;img alt="" src="http://srajangarg.github.io/assets/ll.png" /&gt;
During this time, I was asked by Isuru to switch work towards the polynomial interface with FLINT &amp;amp; Piranha (and shift the polynomial manipulations to the end of summer). So, the PR hasn&amp;#8217;t been merged in yet, and no conclusions and observations have been made between the two algorithms as of yet. Will be done later during the summer. Here&amp;#8217;s the PR &lt;a href="https://github.com/symengine/symengine/pull/930"&gt;#930&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="dictionary-wrappers"&gt;Dictionary wrappers&lt;/h3&gt;
&lt;p&gt;I also started work on Dictionary wrappers for SymEngine. One was already made, for the &lt;code class="highlighter-rouge"&gt;UnivariatePolynomial&lt;/code&gt; class aka the class for univariate polynomials with symbolic coefficients. It is a map from &lt;code class="highlighter-rouge"&gt;int -&amp;gt; Expression&lt;/code&gt;. We needed another wrapper for the &lt;code class="highlighter-rouge"&gt;uint -&amp;gt; integer_class&lt;/code&gt; map, so that the &lt;code class="highlighter-rouge"&gt;UnivariateIntPolynomial&lt;/code&gt; class can be structured the same way as the former. Now that we need almost the same functionality, why not temlatize the wrapper? (suggested by Isuru) That&amp;#8217;s what I did, and the PR &lt;a href="https://github.com/symengine/symengine/pull/946"&gt;#946&lt;/a&gt; is almost merged in. More on wrappers next time!&lt;/p&gt;

&lt;h3 id="miscellaneous-issues"&gt;Miscellaneous issues&lt;/h3&gt;
&lt;p&gt;Most of my work during this period revolved around reading the existing polynomial class, and refactor it and removed any redundancies. Some of the miscellaneous work that was done :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Some refactoring was done in the &lt;code class="highlighter-rouge"&gt;dict.cpp&lt;/code&gt; file. There were some redundancy in the functions which was removed. Templatized methods for checking equality and comparing vectors (and sets) were made. Other specific &lt;code class="highlighter-rouge"&gt;eq&lt;/code&gt; &amp;amp; &lt;code class="highlighter-rouge"&gt;compare&lt;/code&gt; methods became derived methods of these base classes. &lt;a href="https://github.com/symengine/symengine/pull/933"&gt;#933&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Initially, the &lt;code class="highlighter-rouge"&gt;mul_poly&lt;/code&gt; method was constructing a vector of coefficients for the resulting multiplied polynomial (thus, implicitly storing it in a dense representation for a while). However, it was returned as a sparse represented polynomial, using a dictionary. This was changed, so that the dictionary is directly created, and the intermediate vector isn&amp;#8217;t requireds. Also, some changes in variable names for clarity, as well as removing the redundant function &lt;code class="highlighter-rouge"&gt;dict_add_term&lt;/code&gt;. &lt;a href="https://github.com/symengine/symengine/pull/928"&gt;#928&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A redundant function &lt;code class="highlighter-rouge"&gt;create&lt;/code&gt; was removed. All it was doing was calling &lt;code class="highlighter-rouge"&gt;from_vec&lt;/code&gt; within the same class. &lt;a href="https://github.com/symengine/symengine/pull/941"&gt;#941&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you next week, Goodbye!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/05/20/Community-Bonding.html</guid>
      <title>Community Bonding Period</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 20 May 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/05/20/Community-Bonding.html</link>
      <description>&lt;p&gt;The community bonding period is coming to a close and so I&amp;#8217;d like to write
about what I&amp;#8217;ve done/learned during this time. I&amp;#8217;ve had the opportunity to
create my first blog, have my first meeting with my mentors, submit a couple of
minor pull requests to pydy and sympy, add an example script to the pydy
repository, begin learning about spatial vectors and begin work on some
benchmarking code.&lt;/p&gt;

&lt;p&gt;This is my first attempt at blogging and I had some trouble initially setting
it up. For starters I did not know what an RSS feed was or for what it was
used. Also I wanted the blog to be hosted on github pages where I currently
keep my collection of notes and thus I decided to try to use the jekyll static
site backend that github uses. I tried, however, to isolate the blog in its own
subfolder with the rest of my GSoC information but this caused all kinds of
problems with posts showing up multiple times and the RSS feed not updating
properly. I eventually decided to stop trying to separate the posts and just
centrally locate them as is demonstrated in the jekyll documentation. For the
RSS feed I used a template that I found online. Now the posts appeared properly
and the RSS feed updated correctly. The last thing I wanted to do for my blog
before I considered it officially set up was to have some method of allowing
people to comment on my posts. I found a blog post online on how to achieve
this without the need for anything other than what github pages offers and so I
set out to try this method. I used the code shown on the blog post without any
luck. Prior to this I have had zero experience working with javascript and so
I didn&amp;#8217;t even know where to begin to try to debug why the comments were not
showing up and so I sent the writer of the blog post an email asking for his
assistance. And he replied! He pointed out that I was missing the part where a
java script library would be loaded for use on the page and once I added the
couple of lines of code, commenting on my blog posts is now possible (At least I
think that&amp;#8217;s what the problem was but again I have no experience working with
javascript). With the ability to comment added, my blog is completely set up
and is connected to the correct channels for the Google Summer of Code.&lt;/p&gt;

&lt;p&gt;Early in the community bonding period I was able to have my first meeting with
my mentors for my project. During this meeting it was discussed that I could
change the later portion of my project from working on implementing a Newton
Euler method of equations of motion generation to implementing the faster
Featherstone method. Considering I had no great attachment to the Newton Euler
method I agreed that the faster method would provide a greater benefit for the
overall project. Since the meeting I have spent some time reading on the math
involved in the Featherstone method, specifically spatial vectors and their
uses in dynamics. To this end I have read &lt;a href="http://ieeexplore.ieee.org/xpls/icp.jsp?arnumber=5569032#article"&gt;A Beginners Guide to 6-D Vectors
(Part 1)&lt;/a&gt; and
started reading both &lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D Vectors (Part
2)&lt;/a&gt; and Roy
Featherstone&amp;#8217;s short course on spatial vector algebra.&lt;/p&gt;

&lt;p&gt;I have also spent some time beginning to familiarize myself with the code that
I will be working with. To begin I followed Jason Moore&amp;#8217;s great suggestion of
coding through one of the examples from my dynamics course and adding it to the
pydy/examples folder in the pydy repository. The example I chose to use was a
&lt;a href="http://jbm950.github.io/../../../notes/analytical_dynamics/analytical_dynamics_main.html#e_basic_equation_of_motion"&gt;simple
pendulum&lt;/a&gt;
so that I could focus on the code rather than the complexities of the problem
itself. This code and diagram are currently undergoing the review process now
in order to be added to the pydy repository.&lt;/p&gt;

&lt;p&gt;Lastly I have begun work on benchmarking code which is mentioned as part of my
project itself. In working on this part of the project I was able to learn how
to use a SQLite database with python which I had only obtained brief exposure
to in the past. This code currently works using python&amp;#8217;s timeit library to run
a file utilizing Lagrange&amp;#8217;s method of equations of motion generation and
another using Kane&amp;#8217;s method. The code runs each file several thousand times and
iterates through this process 30 times and saves the average of the 30 runs
along with several other useful bits of information about the computer and
version of python being used to run the tests. In addition to the benchmarking
code itself I have been working on a script that will allow viewing of a graph
of the tests utilizing matplotlib and tkinter. This code is close to completion
and the current next major addition will be to add the ability to filter the
tests based on what platform was used/what version of python was used to run
the tests.&lt;/p&gt;

&lt;p&gt;This community bonding period has been productive and I am excited to begin the
Google Summer of Code program on Monday.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/moving-away-from-python-2/</guid>
      <title>Moving Away from Python 2</title>
      <author>Aaron Meurer (asmeurer)</author>
      <pubDate>Thu, 19 May 2016 18:00:00 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/moving-away-from-python-2/</link>
      <description>&lt;div&gt;&lt;p&gt;About a month ago I tweeted this:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Thought: get the maintainers of a bunch of big Python libraries to sign something saying that they WILL drop Python 2.7 support in 2020.&lt;/p&gt;&amp;#8212; Aaron Meurer (@asmeurer) &lt;a href="https://twitter.com/asmeurer/status/712304912428875776"&gt;March 22, 2016&lt;/a&gt;&lt;/blockquote&gt;



&lt;p&gt;&lt;strong&gt;EDIT: Some people have started working on making this happen. See
&lt;a href="https://python3statement.github.io/"&gt;https://python3statement.github.io/&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For those of you who don't know, Python 2.7 is
&lt;a href="https://docs.python.org/devguide/#status-of-python-branches"&gt;slated&lt;/a&gt; to reach
end-of-life in 2020 (originally, it was slated to end in 2015, but it was
extended in 2014, due to the extraordinary difficulty of moving to a newer
version). "End-of-life" means absolutely no more support from the core Python
team, even for security updates.&lt;/p&gt;
&lt;p&gt;I'm writing this post because I want to clarify why I think this should be
done, and to clear up some misconceptions, the primary one being that this
represents library developers being antagonistic against those who want or
have to use Python 2.&lt;/p&gt;
&lt;p&gt;I'm writing this from my perspective as a library developer. I'm the lead
developer of &lt;a href="http://www.sympy.org/"&gt;SymPy&lt;/a&gt;, and I have sympathies for
developers of other libraries.&lt;sup id="fnref:sympy"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:sympy" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I say this because my idea may seem a bit
in tension with "users" (even though I hate the "developer/user" distinction).&lt;/p&gt;
&lt;h3&gt;Python 2&lt;/h3&gt;
&lt;p&gt;There are a few reasons why I think libraries should drop (and announce that
they will drop) Python 2 support by 2020 (actually earlier, say 2018 or 2019,
depending on how core the library is).&lt;/p&gt;
&lt;p&gt;First, library developers have to be the leaders here. This is apparent from
the historical move to Python 3 up to this point. Consider the three (not
necessarily disjoint) classes of people: CPython core developers, library
developers, and users. The core developers were the first to move to Python 3,
since they were the ones who wrote it. They were also the ones who provided
the messaging around Python 3, which has varied over time. In my opinion, it
should have been and should be more forceful.&lt;sup id="fnref:core"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:core" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; Then you have the library
developers and the users. A chief difference here is that users are probably
going to be using only one version of Python. In order for them to switch that
version to Python 3, all the libraries that they use need to support it. This
took some time, since library developers saw little impetus to support Python
3 when no one was using it (Catch 22), and to worsen the situation, versions
of Python older than 2.6 made
&lt;a href="https://asmeurersympy.wordpress.com/2013/08/22/python-3-single-codebase-vs-2to3/"&gt;single codebase compatibility&lt;/a&gt;
almost impossible.&lt;/p&gt;
&lt;p&gt;Today, though, &lt;a href="http://py3readiness.org/"&gt;almost all libraries&lt;/a&gt; support Python
3, and we're reaching a point where those that don't have
forks that do.&lt;/p&gt;
&lt;p&gt;But it only happened &lt;em&gt;after&lt;/em&gt; the library developers transitioned. I believe
libraries need to be the leaders in moving away from Python 2 as well. It's
important to do this for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python 2.7 support ends in 2020. That means all updates, including security
  updates. For all intents and purposes, Python 2.7 becomes an insecure
  language to use at that point in time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supporting two major versions of Python is technical debt for every project
  that does it. While writing cross compatible code is
  &lt;a href="http://python-future.org/"&gt;easier than ever&lt;/a&gt;, it still remains true that
  you have to remember to add &lt;code&gt;__future__&lt;/code&gt; imports to the top of every file,
  to import all relevant builtins from your compatibility file or library, and
  to run all your tests in both Python 2 and 3. Supporting both versions is a
  major cognitive burden to library developers, as they always have to be
  aware of important differences in the two languages. Developers on any
  library that does anything with strings will need to understand how things
  work in both Python 2 and 3, and the often obscure workarounds required for
  things to work in both (pop quiz: how do you write Unicode characters to a
  file in a Python 2/3 compatible way?).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of Python 3's
  &lt;a href="https://asmeurer.github.io/python3-presentation/slides.html"&gt;new syntax features&lt;/a&gt;
  (i.e., features that are impossible to use in Python 2) only matter for
  library developers. A great example of this is
  &lt;a href="https://www.python.org/dev/peps/pep-3102/"&gt;keyword-only arguments&lt;/a&gt;. From an
  API standpoint, almost every instance of keyword arguments should be
  implemented as keyword-only arguments. This avoids mistakes that come from
  the antipattern of passing keyword arguments without naming the keyword, and
  allows the argspec of the function to be expanded in the future without
  breaking API.&lt;sup id="fnref:swift"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:swift" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second reason I think library developers should agree to drop Python 2
support by 2020 is completely selfish. A response that I heard on that tweet
(as well as elsewhere), was that libraries should provide carrots, not sticks.
In other words, instead of forcing people off of Python 2, we should make them
want to come to Python 3. There are some issues with this argument. First,
Python 3 already has
&lt;a href="https://asmeurer.github.io/python3-presentation/slides.html"&gt;tons of carrots&lt;/a&gt;.
Honestly, not being terrible at Unicode ought to be a carrot in its own right.&lt;sup id="fnref:unicode"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:unicode" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If you don't deal with strings, or do but don't care about those silly
foreigners with weird accents in their names, there are other major carrots as
well. For SymPy, the fact that 1/2 gives 0 in Python 2 has historically been a
major source of frustration for new users. Imagine writing out &lt;code&gt;1/2*x +
x**(1/2)*y*z - 3*z**2&lt;/code&gt; and wondering why half of what you wrote just
"disappeared" (granted, this was worse before we
&lt;a href="https://asmeurersympy.wordpress.com/2011/08/18/sqrtx-now-prints-as-sqrtx/"&gt;fixed the printers&lt;/a&gt;).
While &lt;code&gt;integer/integer&lt;/code&gt; not giving a rational number is a major
&lt;a href="http://docs.sympy.org/latest/tutorial/gotchas.html#two-final-notes-and"&gt;gotcha&lt;/a&gt;
for SymPy, giving a float is infinitely better than giving what is effectively
the wrong answer. Don't use strings or integers?
&lt;a href="https://asmeurer.github.io/python3-presentation/slides.html"&gt;I've got more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Frankly, if these "carrots" haven't convinced you yet, then I'll wager you're
not really the sort of person who is persuaded by carrots.&lt;/p&gt;
&lt;p&gt;Second, some "carrots" are impossible unless they are implemented in
libraries. While some features can be implemented in 2/3 compatible code and
only work in Python 3 (such as &lt;code&gt;@&lt;/code&gt; matrix multiplication), others, such as
keyword-only arguments, can only be implemented in code that does not support
Python 2. Supporting them in Python 2 would be a net deficit of technical debt
(one can imagine, for instance, trying to support keyword-only arguments
manually using &lt;code&gt;**kwargs&lt;/code&gt;, or by using some monstrous meta-programming).&lt;/p&gt;
&lt;p&gt;Third, as I said, I'm selfish. Python 3 &lt;em&gt;does&lt;/em&gt; have carrots, and I want them.
As long as I have to support Python 2 in my code, I can't use keyword-only
arguments, or extended argument unpacking, or async/await, or any of the
dozens of features that can't be used in cross compatible code.&lt;/p&gt;
&lt;p&gt;A counterargument might be that instead of blocking users of existing
libraries, developers should create new libraries which are Python 3-only and
make use of new exciting features of Python 3 there. I agree we should do
that, but existing libraries are good too. I don't see why developers should
throw out all of a well-developed library just so they can use some Python
features that they are excited about.&lt;/p&gt;
&lt;h3&gt;Legacy Python&lt;/h3&gt;
&lt;p&gt;A lot of people have taken to calling Python 2
"&lt;a href="https://twitter.com/RipLegacyPython"&gt;legacy Python&lt;/a&gt;". This phrase is often
used condescendingly and
&lt;a href="https://twitter.com/stephtdouglas/status/713433933040340993"&gt;angers a lot of people&lt;/a&gt;
(and indeed, this blog post is the first time I've used it myself). However, I
think Python 2 really should be seen this way, as a "legacy" system. If you
want to use it, for whatever your reasons, that's fine, but just as you
shouldn't expect to get any of the newest features of Python, you shouldn't
expect to be able to use the newest versions of your libraries. Those
libraries that have a lot of development resources may choose to support older
Python 2-compatible versions with bug and/or security fixes. Python 2 itself
will be supported for these until 2020. Those without resources probably won't
(keep in mind that you're using open source libraries without paying money for
them).&lt;/p&gt;
&lt;p&gt;I get that some people have to use Python 2, for whatever reasons. But using
outdated software comes at a cost. Libraries have borne this technical debt
for the most part thus far, but they shouldn't be expected to bear it forever.
The debt will only increase, especially as the technical opportunity cost, if
you will, of not being able to use newer and shinier versions of Python 3
grows. The burden will have to shift at some point. Those with the financial
resources may choose to offload this debt to others,&lt;sup id="fnref:continuum"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:continuum" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; say, by
backporting features or bugfixes to older library versions that support Python
2 (or by helping to move code to Python 3).&lt;/p&gt;
&lt;p&gt;I want to end by pointing out that if you are, for whatever reason, still
using Python 2, you may be worried that if libraries become Python 3-only and
start using Python 3 features, won't that break your code? The answer is no.
Assuming package maintainers mark the metadata on their packages correctly,
tools like pip and conda will not install non-Python 2 compatible versions
into Python 2.&lt;/p&gt;
&lt;p&gt;If you haven't transitioned yet, and want to know more, a good place to start
is the &lt;a href="https://docs.python.org/3/howto/pyporting.html"&gt;official docs&lt;/a&gt;. I also
highly recommend using &lt;a href="http://conda.pydata.org/docs/"&gt;conda&lt;/a&gt; environments, as
it will make it easy to separate your Python 2 code from your Python 3 code.&lt;/p&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:sympy"&gt;
&lt;p&gt;With that being said, the opinions here are entirely my own, and are
    don't necessarily represent those of other people, nor do they
    represent official SymPy policy (no decisions have been made by the
    community about this at this time).&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:sympy" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:core"&gt;
&lt;p&gt;It often feels like core Python itself doesn't really want people to
    use Python 3. It's little things, like
    &lt;a href="https://docs.python.org/library/"&gt;docs links&lt;/a&gt; that redirect to Python
    2, or &lt;a href="https://www.python.org/dev/peps/pep-0394/"&gt;PEP 394&lt;/a&gt;, which
    still says that the &lt;code&gt;python&lt;/code&gt; should always point to Python 2.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:core" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:swift"&gt;
&lt;p&gt;In Swift, Apple's new language for iOS and OS X, function parameter
    names are effectively "keyword-only"
    &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html"&gt;by default&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:swift" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:unicode"&gt;
&lt;p&gt;As an example of this, in conda, if you use Python 2 in the root
    environment, then installing into a path with non-ASCII characters is
    unsupported. This is common on Windows, because Windows by default
    uses the user's full name as the username, and the default conda
    install path is in the user directory.&lt;/p&gt;
&lt;p&gt;This is unsupported except in Python 3, because to fix the issue,
every single place in conda where a string appears would have to be
changed to use a &lt;code&gt;unicode&lt;/code&gt; string in Python 2. The basic issue is that
things like &lt;code&gt;'&amp;#960;' + u'i'&lt;/code&gt; raise &lt;code&gt;UnicodeDecodeError&lt;/code&gt; in Python 2 (even
though &lt;code&gt;'&amp;#960;' + 'i'&lt;/code&gt;, &lt;code&gt;u'&amp;#960;' + 'i'&lt;/code&gt;, and &lt;code&gt;u'&amp;#960;' + u'i'&lt;/code&gt; all work fine).
You can read a more in-depth description of the problem
&lt;a href="https://github.com/sympy/sympy/pull/9692#issuecomment-126162173"&gt;here&lt;/a&gt;.
Incidentally, this is also why you should never use &lt;code&gt;from __future__
import unicode_literals&lt;/code&gt; in Python 2, in my opinion.&lt;/p&gt;
&lt;p&gt;I no longer work on conda, but as far as I know, the
&lt;a href="https://github.com/conda/conda/issues/1180"&gt;issue&lt;/a&gt; remains unfixed.
Of course, this whole thing works just fine if conda is run in Python
3.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:unicode" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:continuum"&gt;
&lt;p&gt;If that legitimately interests you, I
    &lt;a href="https://twitter.com/pwang/status/712780279211884546"&gt;hear Continuum&lt;/a&gt;
    may be able to help you.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:continuum" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=201</guid>
      <title>GSoC 2016 &#x2013; All set to go</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Wed, 18 May 2016 16:06:07 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/05/18/gsoc-2016-all-set-to-go/</link>
      <description>&lt;p&gt;GSoC Coding period is about to start&amp;#160;next week.&lt;/p&gt;
&lt;p&gt;The past week I was focused on completing the &lt;a href="https://github.com/symengine/symengine.rb/pull/38" target="_blank"&gt;NTheory Ruby wrappers&lt;/a&gt;, in order to complete my promised workload for the pre-coding time.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The main lessons learnt from this week&amp;#8217;s work was handling conversions&amp;#160;between Ruby and C types. This proved to be a quite easy task, with the Ruby C API.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://silverhammermba.github.io/emberb/c/#numeric" target="_blank"&gt;The Definitive Guide to Ruby&amp;#8217;s C API&lt;/a&gt;&amp;#160;covers this in detail.&lt;/p&gt;
&lt;p&gt;Then I&amp;#160;had to figure out how to let SymEngine Integers to be implicitly convertible into Ruby numeric types. This proved tricky for me to get around as I wasn&amp;#8217;t aware that it could&amp;#160;be done in the actual Ruby code, without having to use the Ruby C API. The implicit conversion to Ruby numeric types was quite easy.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;As shown in the gist above, I just had to declare the class in the lib folder with the necessary conversion method.&lt;/p&gt;
&lt;p&gt;With this part done, several number theory functions can now be called upon SymEngine Integers. Those functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCD&lt;/li&gt;
&lt;li&gt;LCM&lt;/li&gt;
&lt;li&gt;Mod&lt;/li&gt;
&lt;li&gt;Next Prime&lt;/li&gt;
&lt;li&gt;Quotient&lt;/li&gt;
&lt;li&gt;Fibonacci Number&lt;/li&gt;
&lt;li&gt;Lucas Number&lt;/li&gt;
&lt;li&gt;Binomials&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that this part is done, the next step would be to start coding from next Monday. From my proposed plan, the first two weeks would be for wrapping Complex Numbers and Floating Point Numbers for Ruby.&lt;/p&gt;
&lt;p&gt;See you after the first week.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/201/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/201/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=201&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=89</guid>
      <title>GSoC: Community Bonding Period</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sun, 15 May 2016 14:25:31 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/05/15/gsoc-community-bonding-period/</link>
      <description>&lt;p&gt;The 4th week of Community Bonding Period is about to kick off. I am here to write about what I&amp;#8217;ve done so far and my goals for next week.&lt;/p&gt;
&lt;p&gt;The first &lt;a href="https://github.com/sympy/sympy/pull/10793" target="_blank"&gt;PR&lt;/a&gt;&amp;#160;for the project &amp;#8220;Implementation of Holonomic Function&amp;#8221; got merged today. This adds following functionality in SymPy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Differential Operators with Polynomial Coefficients and operation like addition, multiplication etc.&lt;/li&gt;
&lt;li&gt;Holonomic Functions. A representation of Holonomic Functions given its annihilator and Initial Conditions (optional).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A little about the API to get you an idea of this.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; from sympy import *&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.holonomic import HolonomicFunction, DiffOperatorAlgebra&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; x = symbols(&amp;#8216;x&amp;#8217;)&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; R, Dx = DiffOperatorAlgebra(ZZ.old_poly_ring(x), &amp;#8216;Dx&amp;#8217;)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; Dx * x&lt;br /&gt;
(1) + (x)Dx&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; HolonomicFunction(Dx &amp;#8211; 1, x, 0, [1]) + HolonomicFunction(Dx**2 + 1, x, 0, [0, 1])&lt;br /&gt;
HolonomicFunction((-1) + (1)Dx + (-1)Dx**2 + (1)Dx**3, x), f(0) = 1, f'(0) = 2, f&amp;#8221;(0) = 1&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Operations supported for Differential Operators are addition, multiplication, subtraction and power. Holonomic Functions can be added and multiplied with or without giving the Initial Conditions. Special thanks to&amp;#160;&lt;a href="https://github.com/certik" target="_blank"&gt;Ondrej&lt;/a&gt;,&amp;#160;&lt;a href="https://github.com/jksuom" target="_blank"&gt;Kalevi&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt;&amp;#160;for all the help, suggestions and reviews.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What Now?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now the goal is to use Polynomials and Fractions i.e. instances of &lt;code&gt;DMP&lt;/code&gt;&amp;#160;and &lt;code&gt;DMF&lt;/code&gt;&amp;#160;classes instead of expressions for all the manipulation done internally. This is necessary for robustness. After that is done I work on to implement conversion of Hypergeometric Functions to Holonomic Functions.&lt;/p&gt;
&lt;p&gt;This has been super exciting so far and I hope same for future.&lt;/p&gt;
&lt;p&gt;Thank You.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/89/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/89/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=89&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=94</guid>
      <title>GSoC Community Bonding Period Week 3</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sat, 14 May 2016 16:33:04 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/14/gsoc-community-bonding-period-week-3/</link>
      <description>&lt;p&gt;Hi there ! This week was great. I got to learn about many new things. I have mentioned in my last post, about my goals for this week, let us see what I have done so far.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;So far&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;, implementation of &amp;#160;&lt;code&gt;_eval_expand_diracdelta&lt;/code&gt;&amp;#160;is almost done . A final review is needed. But at the same time, I was forgetting about the fact that the &amp;#160;&amp;#160;&lt;code&gt;simplify&lt;/code&gt;&amp;#160; method has to be deprecated in order to make things backwards compatible. Thanks&amp;#160;&lt;a href="http://www.github.com/moorepants"&gt;Jason&lt;/a&gt;&amp;#160;for the suggestion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have made&amp;#160;the &lt;code&gt;simplify()&lt;/code&gt; method call the&amp;#160;&lt;code&gt;_eval_expand_diracdelta()&lt;/code&gt;&amp;#160;method and raise a deprecation warning. I have also added the tests for this method by catching the deprecation warnings properly. The API works like this:-&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;In [&lt;span class="hljs-number"&gt;3&lt;/span&gt;]: DiracDelta(x*y).simplify(x)
/home/ahappyidiot/anaconda2/bin/ipython:&lt;span class="hljs-number"&gt;1&lt;/span&gt;: SymPyDeprecationWarning: 

simplify has been deprecated since SymPy &lt;span class="hljs-number"&gt;1.0&lt;/span&gt;&lt;span class="hljs-number"&gt;.1&lt;/span&gt;. Use
expand(diracdelta=&lt;span class="hljs-keyword"&gt;True&lt;/span&gt;, wrt=x) instead.

  &lt;span class="hljs-comment"&gt;#!/home/ahappyidiot/anaconda2/bin/python&lt;/span&gt;
Out[&lt;span class="hljs-number"&gt;3&lt;/span&gt;]: DiracDelta(x)/Abs(y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These commits are needed to be reviewed properly in order to merge&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;&lt;code&gt;rewrite(Piecewise)&lt;/code&gt;&amp;#160;:- In &lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;, I have implemented a new method under DiracDelta class which would successfully&amp;#160;output a Piecewise representation of a DiracDelta Object. For this pull request also,&amp;#160;a final review is needed. The&amp;#160;API works as:-&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&lt;span class="hljs-prompt"&gt;In [4]: DiracDelta(x).rewrite(Piecewise)&lt;/span&gt;
Out[4]:
&lt;/code&gt;&amp;#9127;  oo       &lt;span class="pl-k"&gt;for&lt;/span&gt; x &lt;span class="pl-k"&gt;=&lt;/span&gt; 0&lt;span class="pl-c1"&gt;
&lt;/span&gt;&amp;#9128; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;#160;
&amp;#9129;  &lt;span class="pl-c1"&gt;0&lt;/span&gt;        otherwise&amp;#160;

&lt;code class="language-py"&gt;&lt;span class="hljs-prompt"&gt;In [4]: DiracDelta(x - 5).rewrite(Piecewise)&lt;/span&gt;
Out[4]:
&lt;/code&gt;&amp;#9127;  oo       &lt;span class="pl-k"&gt;for&lt;/span&gt; x - 5 &lt;span class="pl-k"&gt;=&lt;/span&gt; 0&lt;span class="pl-c1"&gt;
&lt;/span&gt;&amp;#9128; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;#160;
&amp;#9129;  &lt;span class="pl-c1"&gt;0&lt;/span&gt;        otherwise&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;I have also reviewed&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11065" target="_blank"&gt;PR 11065&lt;/a&gt;, I personally think that the implementation is a great idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;My plans for next weeks are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polish both&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;&amp;#160;and&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;&amp;#160;and get these pull requests merged&lt;/li&gt;
&lt;li&gt;Improve doc strings of the &lt;code&gt;DircaDelta&lt;/code&gt; and &lt;code&gt;Heaviside&lt;/code&gt; classes and methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;I will again get back by the end of the next week. Cheers !!!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/94/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/94/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=94&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=23</guid>
      <title>GSoC Community Bonding Period Week 2</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Tue, 10 May 2016 20:17:03 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/10/gsoc-community-bonding-period-week-2/</link>
      <description>&lt;p&gt;The second week of the Community Bonding Period got over. Though this post is quite late, I will try to post updates on Fridays of every week.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&lt;em&gt;So far&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I had my first meeting with Jason Moore, one of my mentor, on 5th May through Google Hangouts. We had a brief discussion over my proposal. I am taking a head-start for coding along with community bonding. I have started a discussion about the first phase of my proposal. Jason has created an issue tracker for&amp;#160;&lt;a href="https://github.com/sympy/sympy/issues/11075"&gt;Improvements to DiracDelta and Heaviside&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/10863" target="_blank"&gt;PR 10863&lt;/a&gt;&amp;#160;is almost completed only the depreciation part is left.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Almost all the&amp;#160;&lt;a href="https://en.wikipedia.org/wiki/Dirac_delta_function#Properties" target="_blank"&gt;properties&lt;/a&gt;&amp;#160;of DiracDelta functions has been already implemented&amp;#160;in Sympy. But I need to check whether all of them are unit tested and well documented.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;My targets for this week are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polish &lt;a href="https://github.com/sympy/sympy/pull/10863" target="_blank"&gt;PR 10863&lt;/a&gt;&amp;#160; and get it merged.&lt;/li&gt;
&lt;li&gt;Implement rewriting&amp;#160;&lt;code&gt;DircaDelta&lt;/code&gt;&amp;#160; as Piecewise.&lt;/li&gt;
&lt;li&gt;Improve doc strings of the &lt;code&gt;DircaDelta&lt;/code&gt; and &lt;code&gt;Heaviside&lt;/code&gt; classes and methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will again get back by the end of this week. Cheers !!!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/23/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/23/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=23&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=186</guid>
      <title>Community Bonding Period Starts for GSoC</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sat, 07 May 2016 08:46:29 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/05/07/community-bonding-period-starts-for-gsoc/</link>
      <description>&lt;p&gt;So, the GSoC is officially starting with the community bonding period until the last week of May. Until then, the official requirements are to get to know the communities. For my project, this puts me in an odd situation with the project being done for SymEngine community, while under the auspices of SciRuby Foundation. For the starters, I am familiar with many people from the SymEngine community, and just now I am trying to get more involved with the SciRuby people.&lt;/p&gt;
&lt;p&gt;Also, according to my proposal I have listed a couple of tasks to be completed before the actual coding begins. So this week was mostly spent on merging my existing and long standing &lt;a href="https://github.com/symengine/symengine.rb/pull/23" target="_blank"&gt;PR for Ruby Wrappers for Trigonometric, Hyperbolic and other functions&lt;/a&gt;. The major problem I had was writing the repetitive tests for all the functions included in the wrappers. But apart from that the requirements were quite straightforward.&lt;/p&gt;
&lt;p&gt;For the next week, I am planning to wrap the Number Theory functions in Ruby. This already has a &lt;a href="https://github.com/symengine/symengine/pull/852" target="_blank"&gt;CWrapper&lt;/a&gt;, which makes my task a lot easier.&lt;/p&gt;
&lt;p&gt;Apart from coding, I wanted to set the record straight for SymEngine gem in the &lt;a href="http://gems.sciruby.com/" target="_blank"&gt;sciruby website&lt;/a&gt;. It lists the SymEngine gem as broken, and I would need to correct the gem&amp;#8217;s installation scripts. Figuring out this is another task I carry on for the coming week.&lt;/p&gt;
&lt;p&gt;See you!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/186/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/186/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=186&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/2016/05/02/google-summer-of-code-with-sympy/</guid>
      <title>Google Summer of Code with Sympy</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Mon, 02 May 2016 11:04:16 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/02/google-summer-of-code-with-sympy/</link>
      <description>&lt;p&gt;About one and half week ago, the results of Google Summer of Code were out.&amp;#160;I am extremely glad to inform that my project for Sympy on Implementation of Singularity Functions got selected for GSoC 2016.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Google Summer of Code&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Google_Summer_of_Code"&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; is a global annual program focused on bringing more student developers into open source software development. It is a global program that offers students stipends to write code for open source projects.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Sympy&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://sampadblog.wordpress.com/2016/05/02/google-summer-of-code-with-sympy/" target="_blank"&gt;SymPy&lt;/a&gt;&lt;/strong&gt;&amp;#160; is a Python library for symbolic mathematics. It aims to become a full-featured&amp;#160;&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Computer_algebra_system"&gt;Computer Algebra System&lt;/a&gt;&lt;/strong&gt; (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;About my &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Sampad-Kumar-Saha:-Singularity-Functions" target="_blank"&gt;Project&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;I have proposed to work on the Implementation of a full fledged&amp;#160;&lt;strong&gt;Computer Algebra System&lt;/strong&gt; (CAS) of Singularity Functions. I will create a module&amp;#160;to represent a Singularity Function and implement different mathematical operations. This module will be further used to create an another module which would be used for solving complicated beam bending problems.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/moorepants" target="_blank"&gt; Jason Moore&lt;/a&gt;, &lt;a href="https://github.com/leosartaj" target="_blank"&gt;Sartaj Singh&lt;/a&gt; and&amp;#160;&lt;a href="https://github.com/certik" target="_blank"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt;&amp;#160;are going to mentor me throughout the whole program. All of them are really talented and very humble people. I have learned a lot from all of them. I am extremely lucky to work under such great people.&lt;/p&gt;
&lt;p&gt;Now Community Bonding Period is going on. This is intended to get students ready to start contributing to their organization full time from 23rd May. I am supposed to :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Become familiar with the community practices and processes.&lt;/li&gt;
&lt;li&gt;Participate on Mailing Lists / IRC / etc.&lt;/li&gt;
&lt;li&gt;Set up your development environment.&lt;/li&gt;
&lt;li&gt;Small (or large) patches/bug fixes.&lt;/li&gt;
&lt;li&gt;Participate in code reviews for others.&lt;/li&gt;
&lt;li&gt;Work with my mentor and other org members on refining my project plan. This might include finalizing deadlines and milestones, adding more detail, figuring out potential issues, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward toward a great summer.&lt;/p&gt;
&lt;p&gt;Cheers!!!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/14/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/14/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=14&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC 2016 Phase I : Proposal, Acceptance</guid>
      <title>GSoC 2016 Phase I : Proposal, Acceptance</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sun, 01 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc-with-sympy.html</link>
      <description>&lt;p&gt;Hello, I'm Gaurav Dhingra a 3rd year undergraduate student at IIT Roorkee, my proposal on Group Theory with &lt;i&gt;SymPy&lt;/i&gt; has been accepted as a part of &lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
First, a little bit about &lt;a href="http://www.sympy.org/"&gt;SymPy&lt;/a&gt;, a &lt;i&gt;Computer Algebra System&lt;/i&gt; (CAS) written entirely in Python. SymPy 1.0 was released about 2 months ago, &lt;i&gt;Sympy&lt;/i&gt; has been created by hundreds of contributors starting from 2006.

I will be working on Group Theory over the summer, for the next 3 months, to implement Computational Group Theory (CGT) and Group Theory, which are parts of mathematics I particularly enjoy. You can view my project proposal &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Gaurav-Dhingra:-Group-Theory"&gt;GSoC 2016 Application Gaurav Dhingra: Group Theory&lt;/a&gt;. Until a few days ago I was pretty busy with my exams, but in the next few weeks I will go over working on the project. I will particularly focus on Finite and Finitely Presented Groups.
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
I hope that I'll be able to implement everything that I promised in it. Moving onto the ongoing community bonding. Since I am very well acquitted with the workflow of SymPy, I can get straight to few important things, which i will do in the next few days.

&lt;br /&gt;&lt;br /&gt;
This includes things like:
&lt;ul&gt;
  &lt;li&gt;
    Setting up a blog with RSS feed i.e this blog in which I am supposed to add an RSS feed functionality.
  &lt;/li&gt;
  &lt;li&gt;
    Talking to my mentors regarding the time, and place of chat on internet, we differ by almost 5hrs. Time wouldn't be an issue, since seeing from past, I haven't faced such difficulty as both me and my mentor work for almost the same time intervals. From the GSoC 2015 discussions, I remember that Ondrej tries to make sure everyone knows what time student-mentor meet, since of different time zones.
  &lt;/li&gt;
  &lt;li&gt;
    In the past we have had discussion on my private gitter channel &lt;a href="https://gxyd.github.io/feeds/atom.xml"&gt;Group Theory Implementation&lt;/a&gt;. &lt;i&gt;Would it be wise to continue code discussions there?&lt;/i&gt;. Since no one can be added in the channel without my permission.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
One thing that has been a hell of a lot annoying has been the GSoC mailing list, it's a lot distracting. I changed list settings to abridged daily updates because I was getting like 50 mails every day and that too about some really stupid and irrelevant things. But yeah like whatever.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;i&gt;"LESS TALK, MORE CODE"&lt;/i&gt; is the policy that I always tend to follow (not for blog!!). I will try my best to implement it in a strict way this summer. I have seen this policy working fine for me, mostly first I start writing question in a message box to my mentor, and then i think more about it myself and in the end I come up with a solution on my own, instead of asking.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I'm quite sure that I will write more than enough blog posts about my project during the summers. Since I enjoy writing and that too regarding things that occupy larger part of my day.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I'd like to thank all the people involved with contributions to &lt;i&gt;SymPy&lt;/i&gt;. My special thanks to my mentor - &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; and my co-mentor - &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt; for all the suggestions while making my proposal, and showing faith and enthusiasm in my ability and my proposal.
&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/04/29/Selected</guid>
      <title>Selected</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Fri, 29 Apr 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/04/29/Selected/</link>
      <description>&lt;p&gt;I have been selected for GSoC&amp;#8217;16! The results came out on Apr 23, and I have never been happier! I got around to writing this blog post only now, because of my end semester examinations which ended yesterday. I have been alotted &lt;a href="https://github.com/isuruf"&gt;Isuru&lt;/a&gt; and &lt;a href="https://github.com/sumith1896"&gt;Sumith&lt;/a&gt; as my official mentors. I&amp;#8217;m very excited to start working on the project, alongside them.&lt;/p&gt;

&lt;p&gt;Right now, I&amp;#8217;ll start my discussions on the implementation details, and overall structure of the code. Also I will begin work on the Fast Fourier algorithm for univariate polynomial multiplication.&lt;/p&gt;

&lt;p&gt;Looking forward to a busy summer!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=46</guid>
      <title>GSoC &#x2013; Prologue</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Tue, 26 Apr 2016 06:53:46 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/04/26/gsoc-prologue/</link>
      <description>&lt;p&gt;So, I have been accepted for the Google Summer of Code &amp;#8211; 2016 for the project &amp;#8220;Ruby Wrappers for SymEngine&amp;#8221;, under the mentoring organization SciRuby.&lt;/p&gt;
&lt;p&gt;The aim of this post is to give an introduction to the project.&lt;/p&gt;
&lt;p&gt;The abstract of the project is as follows:&lt;/p&gt;
&lt;div&gt;A project started by the SymPy organisation, SymEngine is a standalone fast C++ symbolic manipulation library. It solves mathematical problems the same way a human does, but way more quickly and precisely. The motivation for SymEngine is to develop the Computer Algebra System once in C++ and then use it from other languages rather than doing the same thing all over again for each language that it is required in. The project for Ruby bindings has already been setup at symengine.rb. Few things that the project involves are:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Extending the C interface of SymEngine library.&lt;/li&gt;
&lt;li&gt;Wrapping up the C interface for Ruby using Ruby C API, including error handling.&lt;/li&gt;
&lt;li&gt;Designing the Ruby interface.&lt;/li&gt;
&lt;li&gt;Integrating IRuby with symengine gem for better printing and writing IRuby notebooks.&lt;/li&gt;
&lt;li&gt;Integrating the gem with existing gems like gmp, mpfr and mpc.&lt;/li&gt;
&lt;li&gt;Making the installation of symengine gem easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested, the &lt;a href="https://docs.google.com/document/d/1HKEzqpm3yk9ax5Fs7POQaBFZFxSOjy1MXNyeB7JXBxg/edit?usp=sharing" target="_blank"&gt;full proposal&lt;/a&gt;, which includes the timeline is available online.&lt;/p&gt;
&lt;p&gt;Also, the GitHub repository for the project is at &lt;a href="https://github.com/symengine/symengine.rb" target="_blank"&gt;SymEngine/SymEngine.rb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The actual coding phase starts in about a month, and before that I plan to complete the&amp;#160;&lt;a href="https://github.com/symengine/symengine.rb/pull/23"&gt;&lt;span style="font-weight: 400;"&gt;Ruby Wrappers for the Trigonometric and Hyperbolic Functions&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and to write the necessary tests.&amp;#160;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Next, the NTheory CWrappers can be wrapped into Ruby. This too will be done before the GSoC period starts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Keep checking the blog if you are interested to track the progress of this project. I will be posting&amp;#160;weekly updates in the blog.&lt;/p&gt;
&lt;p&gt;Auf Wiedersehen!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/46/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/46/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=46&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/04/26/GSoC-Acceptance.html</guid>
      <title>GSoC Acceptance</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Tue, 26 Apr 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/04/26/GSoC-Acceptance.html</link>
      <description>&lt;p&gt;I am excited to announce that I have been accepted for the the Google Summer of
Code program for the summer of 2016. I will be working with the Sympy open
source project&amp;#8217;s equation of motion generators. For the project I will mainly
be focusing on creating a shared base class for the current equation of motion
generators and adding an additional generator.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/SymPy Workshop at FOSSASIA 2016, Singapore</guid>
      <title>SymPy Workshop at FOSSASIA 2016, Singapore</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Fri, 25 Mar 2016 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/sympy-workshop-fossasia-2016</link>
      <description>&lt;p&gt;Hi there! Last week I went to &lt;a href="https://en.wikipedia.org/wiki/Singapore"&gt;Singapore&lt;/a&gt; for &lt;a href="http://2016.fossasia.org/"&gt;FOSSASIA&lt;/a&gt; Open Tech Summit  2016. I conducted a Worskhop on &lt;a href="http://sympy.org"&gt;SymPy&lt;/a&gt; and assisted the &lt;a href="http://pydy.org"&gt;PyDy&lt;/a&gt; Workshop in Python track hosted by &lt;a href="https://kushaldas.in/"&gt;Kushal Das&lt;/a&gt;. This blog post accounts to my experience as a speaker, as a attendee at FOSSASIA and as a traveler to Singapore.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;About FOSSASIA&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/fossasia.png" width="200" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FOSSASIA is the premier Free and Open Source technology event in Asia for developers, start-ups, and contributors. Projects at FOSSASIA range from open hardware, to design, graphics and software. FOSSASIA was established in 2009. Previous events took place in Cambodia and Vietnam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the name suggests its one of the largest tech conferences in Asia and my expectations were pretty high from this conference and moreover It was my first international conference. I witnessed lots of amazing people in the conference and interacted with a few as well. This is how it started: &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/harish-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;The SymPy/PyDy Workshop&lt;/h2&gt;

&lt;p&gt;Community is more important than Code @ Singapore Science Center Level 3, Pauling Lab
&lt;img align="center" src="http://iamit.in/assets/sympy-zen.jpg" width="400" /&gt;&lt;/p&gt;

&lt;p&gt;The SymPy and PyDy workshop was scheduled on 20th March at 1:00 - 2:00 PM (PyDy) and 2:00 - 4:00 PM (SymPy). &lt;a href="http://www.moorepants.info/"&gt;Jason&lt;/a&gt; suggested to conduct the SymPy workshop first since PyDy uses SymPy and it would be easier for people to learn SymPy first and then PyDy, but since the &lt;a href="http://2016.fossasia.org/schedule/"&gt;schedule&lt;/a&gt; was already published, It was not possible to reschedule the workshops, so we had to continue with PyDy first.
&lt;a href="https://github.com/sahilshekhawat"&gt;Sahil&lt;/a&gt; started the PyDy workshop at 1:00 PM, though we had to spend a lot of time installing Anaconda to everyone's systems by creating a local server and distributing flash drives as most of the people didn't had Anaconda or Canopy installed. This has been the problem for almost all the workshops I have conducted in the past. It seems I need to invent an efficient way to do this faster in future as we spent 30-40 odd minutes in installation. &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/sympy-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately &lt;a href="https://github.com/sahilshekhawat"&gt;Sahil&lt;/a&gt; finished his presentation at around 2:15 PM. Then I took over for SymPy workshop, I started with the basic introduction to SymPy, the slides can be found &lt;a href="http://slides.com/aktech/sympy"&gt;here&lt;/a&gt;. Then I jumped to IPython notebook exercises to demonstrate more of SymPy. People were amazed by the capabilities of this amazing piece of software. The most beautiful feature they liked was printing and integration. The workshop went pretty well except for the glitches in the HDMI port of my laptop (probably, its the right time to get a new laptop). Here are some SymPy stickers for you, if you missed there.  &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/sympy-sticker-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;Singapore was Fun ;)&lt;/h2&gt;

&lt;p&gt;Visiting Singapore has been a great experience, the culture is a mix of &lt;a href="https://en.wikipedia.org/wiki/Malaysian"&gt;Malaysian&lt;/a&gt;, Indian and native Singaporean. The City is well connected with &lt;a href="https://en.wikipedia.org/wiki/Mass_Rapid_Transit_(Singapore)"&gt;MRT/SMRT&lt;/a&gt; (Metro and Buses). It's quite easy get anywhere around the city. People here are very helpful and nice. I didn't faced any problems throughout my stay there. I spent most of my time near &lt;a href="https://en.wikipedia.org/wiki/Science_Centre_Singapore"&gt;Science Center&lt;/a&gt;, China Town and Little India. There were lot of people from India and particularly from Delhi and three from my University. It was awesome time spent with geeks all around. Tagging some of them &lt;a href="http://devmaany.co/"&gt;Mayank&lt;/a&gt;, &lt;a href="http://www.ishankhanna.in/"&gt;Ishaan&lt;/a&gt;, &lt;a href="http://omerjerk.in/"&gt;Umair&lt;/a&gt;, &lt;a href="https://github.com/jig08"&gt;Jigyasa&lt;/a&gt;, &lt;a href="http://iyask.me/"&gt;Yask&lt;/a&gt;, &lt;a href="http://garvitdelhi.blogspot.in/"&gt;Garvit&lt;/a&gt;, &lt;a href="http://home.iiitd.edu.in/%7Emanan13056/"&gt;Manan&lt;/a&gt;, sorry If I missed someone. Here is a pic of the last day of the conference. &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/fossasia-all.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;Thank you FOSSASIA Organizing Team, Hong Phuc Dang for inviting me to be part of this awesome FOSS community.
I would not have been able to attend the conference without the generous financial support from SymPy, Thank you &lt;a href="http://www.ondrejcertik.com/"&gt;Ondrej Certik&lt;/a&gt;, &lt;a href="http://asmeurer.github.io/blog/"&gt;Aaron Meurer&lt;/a&gt; &amp;amp; SymPy contributors.&lt;/p&gt;

&lt;h3&gt;Good Bye!&lt;/h3&gt;

&lt;p&gt;Good bye! everyone, see you on my next blog post, meanwhile you can have a look at a Picture of me doing back flip at Sentosa ;)
&lt;img align="center" src="http://iamit.in/assets/amit-backflip.gif" /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/Hello-World</guid>
      <title>Hello World!</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Thu, 24 Mar 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/Hello-World/</link>
      <description>&lt;p&gt;Hello World!
My previous blog posts were at: &lt;a href="http://nishantnikhil.weebly.com/"&gt;Global Class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should try not to reinvent the wheel, So I thought it would be better for me to fork &lt;a href="https://github.com/barryclark/jekyll-now"&gt;jekyll-now&lt;/a&gt; repo and build this jekyll blog in minutes :smile: .&lt;/p&gt;

&lt;p&gt;This is cool and the awesome most part is that &lt;strong&gt;It is Markdown flavoured&lt;/strong&gt; . Its quite cool writing in markdown now. Oh! I remember how weird I felt writing in markdown back in December. Snap!&lt;/p&gt;

&lt;p&gt;Now, I will search for a way to do spell correction in markdown. It is so much nedded, I know a little bit of googling will help me.&lt;/p&gt;

&lt;p&gt;Happy Holi! :fire:&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/03/07/Initial-Commit</guid>
      <title>Initial Commit</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Mon, 07 Mar 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/03/07/Initial-Commit/</link>
      <description>&lt;p&gt;This is my first blog post. The blog was made to track progress of my GSoC project and get feedback from my mentors, if my proposal gets selected. I&amp;#8217;m proposing to implement the Multivariate and Univariate polynomial class in SymEngine.&lt;/p&gt;

&lt;p&gt;Wish me luck!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
