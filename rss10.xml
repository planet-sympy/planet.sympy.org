<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=133</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): GSoC: Progress on Utility Functions</title>
      <pubDate>Fri, 23 Jun 2017 16:27:46 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/06/23/gsoc-progress-on-utility-functions/</link>
      <description>&lt;p&gt;Hello all!&lt;/p&gt;
&lt;p&gt;After adding Algebraic\Linear Product rules and tests Arihant and I are working on implementations of Utility Functions, there is a huge set Utility Functions that needs to be implemented before we proceed ahead with next set of rules. Once we are done with the entire set of utility functions implementing rules and adding tests would be an easy task. Understanding the Mathematica codes and analyzing its dependent functions and converting it into Python syntax is a major task.&lt;/p&gt;
&lt;p&gt;We started with implementation of only those functions which were necessary to support &lt;strong&gt;Algebraic rules\Linear Products&lt;/strong&gt; but because they were dependent on the previous functions we had to start off from the very beginning of the &lt;a href="http://www.apmaths.uwo.ca/~arich/IntegrationRules/PortableDocumentFiles/Integration%20utility%20functions.pdf"&gt;Pdf&lt;/a&gt;. So far we have implemented more that 100 utility functions. Our priority is to implement all Utility functions capable to support Algebraic Rules as soon as possible.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/nesar2017.wordpress.com/133/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nesar2017.wordpress.com/133/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=nesar2017.wordpress.com&amp;#038;blog=126779945&amp;#038;post=133&amp;#038;subd=nesar2017&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/week-3/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): Week 3</title>
      <pubDate>Tue, 20 Jun 2017 22:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/week-3/</link>
      <description>&lt;p&gt;In the last week I focused mainly on finishing tasks related Lame coefficients. During this time two PR were merged. In my previous post I described how we can calculate gradient, curl and divergence in different type of coordinate system, so now I described only new thing which was already add to mainline. We decided to remove dependency between Del class and CoordSysCartesian. From mathematical point of view it makes sense, because nabla operator is just an entity which acts on vector or scalar and his behavior is independent from coordinate system.</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/06/20/Solvers</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Solvers</title>
      <pubDate>Tue, 20 Jun 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/06/20/Solvers/</link>
      <description>&lt;p&gt;This week, I tried to get the earlier PR&amp;#8217;s &lt;a href="https://github.com/symengine/symengine/pull/1291"&gt;#1291&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine/pull/1293"&gt;#1293&lt;/a&gt; merged in.
But, Unfortunately there were several mistakes in the earlier implementation of simplifications in &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;. Thanks to &lt;a href="https://github.com/isuruf"&gt;isuruf&lt;/a&gt;, I was able to correct them and finally it got merged in.
&lt;a href="https://github.com/symengine/symengine/pull/1293"&gt;#1293&lt;/a&gt; PR on ImageSet is also complete but not yet merged.&lt;/p&gt;

&lt;p&gt;Along side, I started working on implementing lower order polynomial solvers. This work is done here in &lt;a href="https://github.com/symengine/symengine/pull/1296"&gt;#1296&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Short description of this PR:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Basic module for sovlers is up and running.&lt;/li&gt;
  &lt;li&gt;adds solvers for polynomials with degree &amp;lt;= 4.&lt;/li&gt;
  &lt;li&gt;integrates Flint&amp;#8217;s wrappers for factorisation into solvers.&lt;/li&gt;
  &lt;li&gt;Fixes a bug in Forward Iterator. credits : &lt;a href="https://github.com/srajangarg"&gt;Srajangarg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This PR is still a WIP, as it doesn&amp;#8217;t handle polynomials with symbolic coefficients.&lt;/p&gt;

&lt;p&gt;More on Solvers coming soon !! Until then Stay tuned !!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://bjodah.github.io/blog/posts/gsoc-week3.html</guid>
      <author>Bj&#xF6;rn Dahlgren (bjodah)</author>
      <title>Bj&#xF6;rn Dahlgren (bjodah): Status update week 3 GSoC</title>
      <pubDate>Mon, 19 Jun 2017 21:15:00 GMT</pubDate>
      <link>http://bjodah.github.io/blog/posts/gsoc-week3.html</link>
      <description>&lt;div&gt;&lt;div class="section" id="fast-callbacks-from-sympy-using-symengine"&gt;
&lt;h2&gt;Fast callbacks from SymPy using SymEngine&lt;/h2&gt;
&lt;p&gt;My main focus the past week has been to get &lt;tt class="docutils literal"&gt;Lambdify&lt;/tt&gt; in SymEngine
to work with multiple output parameters. Last year Isuru Fernando lead
the &lt;a class="reference external" href="https://github.com/symengine/symengine/pull/1094"&gt;development&lt;/a&gt; to support jit-compiled callbacks using LLVM in SymEngine.
I started work on leveraging this in the Python wrappers of SymEngine
but my work stalled due to time constraints.&lt;/p&gt;
&lt;p&gt;But since it is very much related to code generation in SymPy I did
put it into my time-line (later in the summer) in my GSoC
application. But with the upcoming SciPy conference, and the fact that
it would make a nice addition to our tutorial, I have put in &lt;a class="reference external" href="https://github.com/symengine/symengine.py/pull/112"&gt;work&lt;/a&gt; to
get this done earlier than first planned.&lt;/p&gt;
&lt;p&gt;Another thing on my to-do-list from last week was to get &lt;tt class="docutils literal"&gt;numba&lt;/tt&gt; working
with &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt;. But for this to work we need to wait for a new upstream
release of &lt;tt class="docutils literal"&gt;numba&lt;/tt&gt; (which they are hoping to release before the SciPy
&lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493418/"&gt;conference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status-of-codegen-tutorial-material"&gt;
&lt;h2&gt;Status of codegen-tutorial material&lt;/h2&gt;
&lt;p&gt;I have not added any new tutorial material this week, but have been
working on making all notebooks work under all targeted operating
systems. However, every change to the notebooks have to be checked
on all operating systems using both Python 2 and Python 3. This
becomes tedious very quickly so I decided to enable continuous
integration on our &lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial"&gt;repository&lt;/a&gt;. I followed conda-forges approach: Travis CI
for OS X, CircleCI for Linux and AppVeyor for Windows (and a private
CI server for another Linux setup). And last night
I &lt;em&gt;finally&lt;/em&gt; got green light on all 4 of our CI services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plans-for-the-upcoming-week"&gt;
&lt;h2&gt;Plans for the upcoming week&lt;/h2&gt;
&lt;p&gt;We have had a performance &lt;a class="reference external" href="https://github.com/sympy/sympy/issues/12411"&gt;regression&lt;/a&gt; in &lt;tt class="docutils literal"&gt;sympy.cse&lt;/tt&gt; which has bit me
multiple times this week. I managed to &lt;a class="reference external" href="https://github.com/sympy/sympy_benchmarks/pull/38"&gt;craft&lt;/a&gt; a small test case
indicating that the algorithmic complexity of the new function is
considerably worse than before (effectively making it useless for many
applications). In my weekly mentor-meeting (with Aaron) we discussed
possibly reverting that &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/11232"&gt;change&lt;/a&gt;. I will first try to see if I can
identify easy-to-fix bottlenecks by profiling the code. But the
risk is that it is too much work to be done before the upcoming
new release of SymPy, and then we will simply revert for now (choosing
speed over extensiveness of the sub-expression elimination).&lt;/p&gt;
&lt;p&gt;I still need to test the notebooks using not only &lt;tt class="docutils literal"&gt;msvc&lt;/tt&gt; under Windows
(which is currently used in the AppVeyor tests), but also &lt;tt class="docutils literal"&gt;mingw&lt;/tt&gt;. I did
manage to get it working locally but there is still some effort left
in order to make this work on AppVeyor. It's extra tricky since there
is a &lt;a class="reference external" href="https://bugs.python.org/issue21821"&gt;bug&lt;/a&gt; in &lt;tt class="docutils literal"&gt;distutils&lt;/tt&gt; in Python 3 which causes the detection of mingw
to fail. So we need to either:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Patch &lt;tt class="docutils literal"&gt;cygwincompiler.py&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;distutils&lt;/tt&gt; (which I believe we can do
if we create a conda package for our tutorial material).&lt;/li&gt;
&lt;li&gt;...or use something else than &lt;tt class="docutils literal"&gt;pyximport&lt;/tt&gt; (I'm hesitant to do this
before the conference).&lt;/li&gt;
&lt;li&gt;...or provide a gcc executable (not a &lt;tt class="docutils literal"&gt;.bat&lt;/tt&gt; file) that simply
spawns &lt;tt class="docutils literal"&gt;gcc.bat&lt;/tt&gt; (but that executable would need to be compiled
during build of our conda package).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on my work on making the CI services work, we will need to
provide test scripts for the participants to run. We need to provide
the organizers with these scripts by June 27th so this needs to be
decided upon during next week. I am leaning towards providing an
&lt;tt class="docutils literal"&gt;environment.yml&lt;/tt&gt; file together with a simple instruction of
activating said environment, e.g.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ conda env create -f environment.yml
$ source activate codegen17
$ python -c "import scipy2017codegen as cg; cg.test()"
&lt;/pre&gt;
&lt;p&gt;This could even be tested on our CI services.&lt;/p&gt;
&lt;p&gt;I also intend to add a (perhaps final) tutorial notebook for chemical
kinetics where we also consider diffusion. We will solve the PDE using
the method of lines. The addition of a spatial dimension in this way
is simple in principle, things do tend to become tricky when handling
boundary conditions though. I will try to use the simplest possible
treatment in order to avoid taking focus from what we are teaching
(code-generation).&lt;/p&gt;
&lt;p&gt;It is also my hope that this combined diffusion-reaction model is a
good candidate for &lt;tt class="docutils literal"&gt;ufuncify&lt;/tt&gt; from
&lt;tt class="docutils literal"&gt;sympy.utilities.autowrap&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/automatically-deploying-this-blog-to-github-pages-with-travis-ci/</guid>
      <author>Aaron Meurer (asmeurer)</author>
      <title>Aaron Meurer (asmeurer): Automatically deploying this blog to GitHub Pages with Travis CI</title>
      <pubDate>Mon, 19 Jun 2017 19:21:32 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/automatically-deploying-this-blog-to-github-pages-with-travis-ci/</link>
      <description>&lt;div&gt;&lt;p&gt;This blog is now &lt;a href="http://travis-ci.org/asmeurer/blog"&gt;deployed to GitHub pages automatically&lt;/a&gt; from Travis CI.&lt;/p&gt;
&lt;p&gt;As I've outlined in the &lt;a href="https://asmeurer.github.io/blog/posts/automatically-deploying-this-blog-to-github-pages-with-travis-ci/moving-to-github-pages-with-nikola/"&gt;past&lt;/a&gt;,
is built with the &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; static blogging
engine. I really like Nikola because it uses Python, has lots of nice
extensions, and is &lt;a href="https://github.com/getnikola/nikola/blob/master/LICENSE.txt"&gt;sanely
licensed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most importantly, it is a static site generator, meaning I write my posts in
Markdown, and Nikola generates the site as static web content ("static" means no web server
is required to run the site). This means that the site can be hosted for free
on &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;. This is how this site has been
hosted since I started it. I have
a &lt;a href="http://github.com/asmeurer/blog"&gt;GitHub repo&lt;/a&gt; for the site, and the content
itself is deployed to
the &lt;a href="https://github.com/asmeurer/blog/tree/gh-pages"&gt;gh-pages&lt;/a&gt; branch of the
repo. But until now, the deployment has happened only manually with the
&lt;code&gt;nikola github_deploy&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;A much better way is to deploy automatically using Travis CI. That way, I do
not need to run any software on my computer to deploy the blog.&lt;/p&gt;
&lt;p&gt;The steps outlined here will work for any static site generator. They assume
you already have one set up and hosted on GitHub.&lt;/p&gt;
&lt;h3&gt;Step 1: Create a .travis.yml file&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Create a &lt;code&gt;.travis.yml&lt;/code&gt; file like the one below&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;sudo: false
language: python

python:
  - 3.6

install:
  - pip install "Nikola[extras]" doctr

script:
  - set -e
  - nikola build
  - doctr deploy . --built-docs output/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If you use a different static site generator, replace &lt;code&gt;nikola&lt;/code&gt; with that
site generator's command.&lt;/li&gt;
&lt;li&gt;If you have Nikola configured to output to a different directory, or use a
different static site generator, replace &lt;code&gt;--built-docs output/&lt;/code&gt; with the
directory where the site is built.&lt;/li&gt;
&lt;li&gt;Add any extra packages you need to build your site to the &lt;code&gt;pip install&lt;/code&gt;
command. For instance, I use the &lt;code&gt;commonmark&lt;/code&gt; extension for Nikola, so I
need to install &lt;code&gt;commonmark&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;set -e&lt;/code&gt; line is important. It will prevent the blog from being deployed
if the build fails.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Then go to &lt;a href="http://www.asmeurer.com/blog/"&gt;https://travis-ci.org/profile/&lt;/a&gt; and enable Travis for your blog
repo.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Step 2: Run doctr&lt;/h3&gt;
&lt;p&gt;The key here is &lt;a href="https://drdoctr.github.io/doctr/"&gt;doctr&lt;/a&gt;, a tool I wrote with
&lt;a href="https://github.com/gforsyth"&gt;Gil Forsyth&lt;/a&gt; that makes deploying anything from
Travis CI to GitHub Pages a breeze. It automatically handles creating and
encrypting a deploy SSH key for GitHub, and the syncing of files to the
&lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First install doctr.&lt;/strong&gt; &lt;code&gt;doctr&lt;/code&gt; requires
Python 3.5+, so you'll need that. You can install it with conda:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;conda install -c conda-forge doctr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you don't use conda, with pip&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install doctr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Then run this command in your blog repo:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;doctr configure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will ask you for your GitHub username and password,
and for the name of the repo you are deploying from and to (for instance, for
my blog, I entered &lt;code&gt;asmeurer/blog&lt;/code&gt;). The output will look something like this:&lt;/p&gt;


&lt;pre&gt;&lt;code class="language-http"&gt;$ doctr configure
What is your GitHub username? asmeurer
Enter the GitHub password for asmeurer:
A two-factor authentication code is required: app
Authentication code: 911451
What repo do you want to build the docs for (org/reponame, like 'drdoctr/doctr')? asmeurer/blog
What repo do you want to deploy the docs to? [asmeurer/blog] asmeurer/blog
Generating public/private rsa key pair.
Your identification has been saved in github_deploy_key.
Your public key has been saved in github_deploy_key.pub.
The key fingerprint is:
SHA256:4cscEfJCy9DTUb3DnPNfvbBHod2bqH7LEqz4BvBEkqc doctr deploy key for asmeurer/blog
The key's randomart image is:
+---[RSA 4096]----+
|    ..+.oo..     |
|     *o*..  .    |
|      O.+  o o   |
|     E + o  B  . |
|      + S .  +o +|
|       = o o o.o+|
|        * . . =.=|
|       . o ..+ =.|
|        o..o+oo  |
+----[SHA256]-----+

The deploy key has been added for asmeurer/blog.

You can go to https://github.com/asmeurer/blog/settings/keys to revoke the deploy key.

================== You should now do the following ==================

1. Commit the file github_deploy_key.enc.

2. Add

    script:
      - set -e
      - # Command to build your docs
      - pip install doctr
      - doctr deploy &amp;lt;deploy_directory&amp;gt;

to the docs build of your .travis.yml.  The 'set -e' prevents doctr from
running when the docs build fails. Use the 'script' section so that if
doctr fails it causes the build to fail.

3. Put

    env:
      global:
        - secure: "Kf8DlqFuQz9ekJXpd3Q9sW5cs+CvaHpsXPSz0QmSZ01HlA4iOtdWVvUttDNb6VGyR6DcAkXlADRf/KzvAJvaqUVotETJ1LD2SegnPzgdz4t8zK21DhKt29PtqndeUocTBA6B3x6KnACdBx4enmZMTafTNRX82RMppwqxSMqO8mA="

in your .travis.yml.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow the steps at the end of the command:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Commit the file &lt;code&gt;github_deploy_key.enc&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You already have &lt;code&gt;doctr deploy&lt;/code&gt; in your &lt;code&gt;.travis.yml&lt;/code&gt; from step 1 above.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add the &lt;code&gt;env&lt;/code&gt; block to your &lt;code&gt;.travis.yml&lt;/code&gt;.&lt;/strong&gt; This will let Travis CI decrypt
the SSH key used to deploy to &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;That's it&lt;/h3&gt;
&lt;p&gt;Doctr will now deploy your blog automatically. You may want to look at the
Travis build to make sure everything works. Note that &lt;code&gt;doctr&lt;/code&gt; only deploys
from &lt;code&gt;master&lt;/code&gt; by default (see below). You may also want to look at the
other
&lt;a href="https://drdoctr.github.io/doctr/commandline.html#doctr-deploy"&gt;command line flags&lt;/a&gt; for
&lt;code&gt;doctr deploy&lt;/code&gt;, which let you do things such as to deploy to &lt;code&gt;gh-pages&lt;/code&gt; for a
different repo than the one your blog is hosted on.&lt;/p&gt;
&lt;p&gt;I recommend these steps over the ones in
the
&lt;a href="https://getnikola.com/blog/automating-nikola-rebuilds-with-travis-ci.html"&gt;Nikola manual&lt;/a&gt; because
doctr handles the SSH key generation for you, making things more secure. I
also found that the &lt;code&gt;nikola github_deploy&lt;/code&gt; command
was &lt;a href="https://github.com/getnikola/nikola/issues/2847"&gt;doing too much&lt;/a&gt;, and
&lt;code&gt;doctr&lt;/code&gt; handles syncing the built pages already anyway. Using &lt;code&gt;doctr&lt;/code&gt; is much
simpler.&lt;/p&gt;
&lt;h3&gt;Extra stuff&lt;/h3&gt;
&lt;h4&gt;Reverting a build&lt;/h4&gt;
&lt;p&gt;If a build goes wrong and you need to revert it, you'll need to use git to
revert the commit on your &lt;code&gt;gh-pages&lt;/code&gt; branch. Unfortunately, GitHub doesn't
seem to have a way to revert commits in their web interface, so it has to be
done from the command line.&lt;/p&gt;
&lt;h4&gt;Revoking the deploy key&lt;/h4&gt;
&lt;p&gt;To revoke the deploy key generated by doctr, go your repo in GitHub, click on
"settings" and then "deploy keys". Do this if you decide to stop using this,
or if you feel the key may have been compromised. If you do this, the
deployment will stop until you run step 2 again to create a new key.&lt;/p&gt;
&lt;h4&gt;Building the blog from branches&lt;/h4&gt;
&lt;p&gt;You can also build your blog from branches, e.g., if you want to test things
out without deploying to the final repo.&lt;/p&gt;
&lt;p&gt;We will use the steps
outlined
&lt;a href="https://drdoctr.github.io/doctr/recipes.html#deploy-docs-from-any-branch"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Replace the line&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;  - doctr deploy . --built-docs output/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in your &lt;code&gt;.travis.yml&lt;/code&gt; with something like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;  - if [[ "${TRAVIS_BRANCH}" == "master" ]]; then
      doctr deploy . --built-docs output/;
    else
      doctr deploy "branch-$TRAVIS_BRANCH" --built-docs output/ --no-require-master;
    fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will deploy your blog as normal from &lt;code&gt;master&lt;/code&gt;, but from a branch it will
deploy to the &lt;code&gt;branch-&amp;lt;branchname&amp;gt;&lt;/code&gt; subdir. For instance, my blog is at
&lt;a href="http://www.asmeurer.com/blog/"&gt;http://www.asmeurer.com/blog/&lt;/a&gt;, and if I had a branch called &lt;code&gt;test&lt;/code&gt;, it would
deploy it to &lt;a href="https://asmeurer.github.io/blog/posts/automatically-deploying-this-blog-to-github-pages-with-travis-ci/"&gt;http://www.asmeurer.com/blog/branch-test/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that it will not delete old branches for you from &lt;code&gt;gh-pages&lt;/code&gt;. You'll need
to do that manually once they are merged.&lt;/p&gt;
&lt;p&gt;This only works for branches in the same repo. It is not possible to deploy
from a branch from pull request from a fork, for security purposes.&lt;/p&gt;
&lt;h4&gt;Enable build cancellation in Travis&lt;/h4&gt;
&lt;p&gt;If you go the Travis page for your blog and choose "settings" from the
hamburger menu, you can enable auto cancellation for branch builds. This will
make it so that if you push many changes in succession, only the most recent
one will get built. This makes the changes get built faster, and lets you
revert mistakes or typos without them ever actually being deployed.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/06/19/GSoC-Progress-Week-3</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): GSoC Progress - Week 3</title>
      <pubDate>Mon, 19 Jun 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/06/19/GSoC-Progress-Week-3/</link>
      <description>&lt;p&gt;Hello, this post contains the third report of my GSoC progress. This week was mostly spent on learning the internal structures of &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; functionalities and methods on a deeper level.&lt;/p&gt;

&lt;h2 id="report"&gt;Report&lt;/h2&gt;

&lt;h3 id="symengine"&gt;SymEngine&lt;/h3&gt;
&lt;p&gt;This week I worked on implementing &lt;code class="highlighter-rouge"&gt;Conjugate&lt;/code&gt; class and the related methods in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;, through PR &lt;a href="https://github.com/symengine/symengine/pull/1295"&gt;#1295&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also worked on implementing the &amp;#8220;fancy-set&amp;#8221; &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt;, the code for which would be complete enough to be pushed sometime in the coming GSoC week.&lt;/p&gt;

&lt;p&gt;Also, since it would probably be the last week that I&amp;#8217;d be working on &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;, I spent some time going through the codebase and checking for discontinuities between &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;&amp;#8217;s implementations.&lt;/p&gt;

&lt;h3 id="symenginepy"&gt;SymEngine.py&lt;/h3&gt;
&lt;p&gt;I pushed in &lt;a href="https://github.com/symengine/symengine.py/pull/155"&gt;#155&lt;/a&gt; fixing a trivial change from &lt;code class="highlighter-rouge"&gt;_sympify&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;sympify&lt;/code&gt; in relevant cases throughout the &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; codebase. The PR is reviewed and merged.&lt;/p&gt;

&lt;p&gt;I reached out to Isuru once again regarding further work to be undertaken for &lt;code class="highlighter-rouge"&gt;PyDy&lt;/code&gt;, and he suggested wrapping up &lt;code class="highlighter-rouge"&gt;Relationals&lt;/code&gt; from &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;. The work, which is pushed through &lt;a href="https://github.com/symengine/symengine.py/pull/159"&gt;#159&lt;/a&gt;, is in itself close to completion, with only specific parsing capabilities left to be implemented (for eg.  &lt;code class="highlighter-rouge"&gt;x &amp;lt; y&lt;/code&gt; should return a &lt;code class="highlighter-rouge"&gt;LessThan(x, y)&lt;/code&gt; object).&lt;/p&gt;

&lt;p&gt;Wrapping &lt;code class="highlighter-rouge"&gt;Relationals&lt;/code&gt; also marks the initiation of &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt;&amp;#8217;s side of Phase II, which predominantly focuses on bug-fixing and wrapping.&lt;/p&gt;

&lt;p&gt;See you again!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Addio&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/06/18/order</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): The order method</title>
      <pubDate>Sun, 18 Jun 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/06/18/order/</link>
      <description>&lt;p&gt;Last week and some of this one I was working on changing the &lt;code class="highlighter-rouge"&gt;order()&lt;/code&gt; method of &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;s. Currently SymPy attempts to perform coset enumeration on the trivial subgroup and, if it terminates, the order of the group is the length of the coset table. A somewhat better way, at least theoretically, is to try and find a subgroup of finite index and compute the order of this subgroup separately. The function I&amp;#8217;ve implemented only looks for a finite index subgroup generated by a subset of the group&amp;#8217;s generators with a pseudo-random element thrown in (this can sometimes give smaller index subgroups and make the computation faster). The PR is &lt;a href="https://github.com/sympy/sympy/pull/12761"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is to split the list of generators (with a random element) into two halves and try coset enumeration on one of the halves. To make sure this doesn&amp;#8217;t go on for too long, it is necessary to limit the number of cosets that the coset enumeration algorithm is allowed to define. (Currently, the only way to set the maximum number of cosets is by changing the class variable &lt;code class="highlighter-rouge"&gt;CosetTable.coset_table_max_limit&lt;/code&gt; which is very large (4096000) by default - in the PR, I added a keyword argument to all functions relevant to coset enumeration so that the maximum can be set when calling the function.) If the coset enumeration fails (because the maximum number of cosets was exceeded), try the other half. If this doesn&amp;#8217;t succeed, double the maximum number of cosets and try again. Once (if) a suitable subgroup is found, the order of the group is just the index times the order of the subgroup. The latter is computed in the same way by having &lt;code class="highlighter-rouge"&gt;order()&lt;/code&gt; call itself recursively.&lt;/p&gt;

&lt;p&gt;The implementation wasn&amp;#8217;t hard in itself but I did notice that finding the subgroup&amp;#8217;s presentation was taking far too long in certain cases (specifically when the subgroup&amp;#8217;s index wasn&amp;#8217;t small enough) and spent a while trying to think of a way around it. I think that for cyclic subgroups, there is a way to calculate the order during coset enumeration without having to find the presentation explicitly but I couldn&amp;#8217;t quite work out how to do that. Perhaps, I will eventually find a way and implement it. For now, I left it as it is. For large groups, coset enumeration will take a long time anyway and at least the new way will be faster in some cases and may also be able to tell if a group is infinite (while coset enumeration on the trivial subgroup wouldn&amp;#8217;t terminate at all).&lt;/p&gt;

&lt;p&gt;Now I am going to actually start working on homomorphisms which will be the main and largest part of my project. I&amp;#8217;ll begin by writing the &lt;code class="highlighter-rouge"&gt;GroupHomomorphism&lt;/code&gt; class in this coming week. This won&amp;#8217;t actually become a PR for a while but it is easier to do it first because I still have exams in the next several days. After that I&amp;#8217;ll implement the Knuth-Bendix algorithm for rewriting systems (I might make a start on this later this week as I&amp;#8217;ll have more time once the exams are over). Then I&amp;#8217;ll send a PR with rewriting systems and once that&amp;#8217;s merged, the &lt;code class="highlighter-rouge"&gt;GroupHomomorphism&lt;/code&gt; class one, because it would depend on rewriting systems.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://arif7blog.wordpress.com/?p=400</guid>
      <author>Arif Ahmed (ArifAhmed1995)</author>
      <title>Arif Ahmed (ArifAhmed1995): Week 3 Report(June 11 &#x2013; 17): Implementing suggestions</title>
      <pubDate>Sat, 17 Jun 2017 17:17:28 GMT</pubDate>
      <link>https://arif7blog.wordpress.com/2017/06/17/week-3-reportjune-11-17-implementing-suggestions/</link>
      <description>&lt;p&gt;Ondrej and Prof.Sukumar were quite busy this week, but eventually they reviewed both the notebook and code. Their review was quite insightful as it brought to surface one major optimization problem which I&amp;#8217;ll discuss below. I also encountered a major issue with the already defined Polygon class.&lt;/p&gt;
&lt;p&gt;Firstly, there were some minor issues :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I had used python floating point numbers instead of SymPy&amp;#8217;s exact representation in numerous places(both in the algorithm and the test file). So, that had to be changed first.&lt;/li&gt;
&lt;li&gt;The decompose() method discarded all constant terms in a polynomial. Now, the constant value is assigned a value of zero as key.&lt;br /&gt;
Example:&lt;br /&gt;
Before:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
decompose(x**2 + x + 2) = {1: x, 2: x**2}
&lt;/pre&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
decompose(x**2 + x + 2) = {0: 2, 1: x, 2: x**2}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Instead of computing component-wise and passing that value to integration_reduction(), the inner product is computed directly and then passed on. This leads to only one recursive call instead of two for 2D case and future three for 3D case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prof. Sukumar also suggested that I should add the option of hyperplane representation. This was simple to do as well. All I did was compute intersection of the hyperplanes(lines as of now) to get the vertices. In case of vertex representation the hyperplane parameters would have to be computed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Major Issues:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Another suggestion was to add the tests for 2D polytopes mentioned in the &lt;span style="color: #00ffff;"&gt;&lt;a href="http://dilbert.engr.ucdavis.edu/~suku/quadrature/cls-integration.pdf" rel="noopener" target="_blank"&gt;paper&lt;/a&gt;&lt;/span&gt;(Page 10). The two tests which failed were polytopes with intersecting sides. In fact, this was the error which I got :&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
sympy.geometry.exceptions.GeometryError: Polygon has intersecting sides.

&lt;/pre&gt;
&lt;p&gt;It seems that the existing polygon class in SymPy does not account for polygons with intersecting sides. At first I thought maybe polygons are not supposed to have intersecting sides by geometrical definition but that was &lt;span style="color: #00ffff;"&gt;&lt;a href="https://en.wikipedia.org/wiki/Complex_polygon" rel="noopener" target="_blank"&gt;not true.&amp;#160;&amp;#160;&lt;/a&gt;&lt;/span&gt;I&amp;#8217;ll have to discuss how to circumvent this problem with my mentor.&lt;/p&gt;
&lt;p&gt;2. Prof. Sukumar correctly questioned the use of best_origin(). As explained in an earlier post, best_origin() finds that point on the facet which will lead to an inner product with lesser degree. But, obviously there is an associated cost with computing that intersection point. So, I wrote some really basic code to test out the current best_origin() versus simply choosing the first vertex of the facet.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;

from __future__ import print_function, division
from time import time

import matplotlib.pyplot as plt

from sympy import sqrt

from sympy.core import S

from sympy.integrals.intpoly import (is_vertex, intersection, norm,
decompose, best_origin,
hyperplane_parameters,
integration_reduction, polytope_integrate,
polytope_integrate_simple)
from sympy.geometry.line import Segment2D
from sympy.geometry.polygon import Polygon
from sympy.geometry.point import Point
from sympy.abc import x, y

MAX_DEGREE = 10

def generate_polynomial(degree, max_diff):
    poly = 0
    if max_diff % 2 == 0:
    degree += 1
    for i in range((degree - max_diff)//2, (degree + max_diff)//2):
        if max_diff % 2 == 0:
            poly += x**i*y**(degree - i - 1) + y**i*x**(degree - i - 1)
        else:
            poly += x**i*y**(degree - i) + y**i*x**(degree - i)
    return poly

times = {}
times_simple = {}
for max_diff in range(1, 11):
    times[max_diff] = 0
for max_diff in range(1, 11):
    times_simple[max_diff] = 0

def test_timings(degree):
    hexagon = Polygon(Point(0, 0), Point(-sqrt(3) / 2, S(1) / 2),
                      Point(-sqrt(3) / 2, 3 / 2), Point(0, 2),
                      Point(sqrt(3) / 2, 3 / 2), Point(sqrt(3) / 2, S(1) / 2))
    square = Polygon(Point(-1,-1), Point(-1,1), Point(1,1), Point(1,-1))

    for max_diff in range(1, degree):
        poly = generate_polynomial(degree, max_diff)

    t1 = time()
    polytope_integrate(square, poly)
    times[max_diff] += time() - t1

    t2 = time()
    polytope_integrate_simple(square, poly)
    times_simple[max_diff] += time() - t2

    return times

for i in range(1, MAX_DEGREE + 2):
    test_timings(i)

plt.plot(list(times.keys()), list(times.values()), 'b-', label=&amp;quot;Best origin&amp;quot;)
plt.plot(list(times_simple.keys()), list(times_simple.values()), 'r-', label=&amp;quot;First point&amp;quot;)
plt.show()

&lt;/pre&gt;
&lt;p&gt;The following figures are that of computation time vs. maximum difference in exponents of x and y. Blue line is when best_origin() is used. Red line is when simply the first vertex of the facet(line-segment) is selected.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Hexagon&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="figure_hexagon" class="alignnone  wp-image-482" height="181" src="https://arif7blog.files.wordpress.com/2017/06/figure_hexagon.png?w=242&amp;#038;h=181" width="242" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="hexagon" class="alignnone size-full wp-image-485" src="https://arif7blog.files.wordpress.com/2017/06/hexagon.png?w=730" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;Square&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="figure_square.png" class="alignnone  wp-image-488" height="213" src="https://arif7blog.files.wordpress.com/2017/06/figure_square.png?w=283&amp;#038;h=213" width="283" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Square" class="alignnone size-full wp-image-491" src="https://arif7blog.files.wordpress.com/2017/06/square.png?w=730" /&gt;&lt;/p&gt;
&lt;p&gt;When the polygon has a lot of facets which intersect axes thereby making it an obvious choice to select that intersection point as best origin, then the current best origin technique works better as in the case with the square where all four sides intersected the axes.&lt;br /&gt;
However, in case of the hexagon the best_origin technique would result in a better point than the first vertex only for one facet. The added computation time makes it more expensive than just selecting the first vertex. Of course, as the difference between exponents increase then the time taken by best_origin is overshadowed by another processes in the algorithm. I&amp;#8217;ll need to look at the method again and see if there are preliminary checks which can be performed making computing intersections a last resort.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/arif7blog.wordpress.com/400/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/arif7blog.wordpress.com/400/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=arif7blog.wordpress.com&amp;#038;blog=126429718&amp;#038;post=400&amp;#038;subd=arif7blog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/06/16/GSoC17-Week2-Report</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): GSoC17 Week 2 Report</title>
      <pubDate>Fri, 16 Jun 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/06/16/GSoC17-Week2-Report.html</link>
      <description>&lt;p&gt;Our plan was to implement all Algebraic rules and complete the Rubi test suit for algebraic integration. However, there was a setback in our work because of a &lt;a href="https://github.com/HPAC/matchpy/issues/9"&gt;bug&lt;/a&gt; I found in &lt;code class="highlighter-rouge"&gt;ManyToOneReplacer&lt;/code&gt; of MatchPy. This bug prevents matching of expressions having many nested commutative expressions. Hence, we were not able to match all expressions in the test suit. &lt;a href="https://github.com/wheerd"&gt;Manuel Krebber&lt;/a&gt; have helped us a lot in adding features and giving suggestions to make MatchPy work for Rubi. He have fixed the bug today. I will resume my testing of algebraic rules asap.&lt;/p&gt;

&lt;h3 id="utility-functions"&gt;Utility functions&lt;/h3&gt;

&lt;p&gt;Previously, our strategy was to implement only those functions which were used by algebraic rules. However, we found that those functions have dependencies on many other functions. So, we decided to implement the functions from the beginning itself, to avoid problems in the long run.&lt;/p&gt;

&lt;p&gt;Mathematica has functionality of implementing function arguments as patterns:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Mathematica"&gt;SqrtNumberQ[m_^n_] :=
  IntegerQ[n] &amp;amp;&amp;amp; SqrtNumberQ[m] || IntegerQ[n-1/2] &amp;amp;&amp;amp; RationalQ[m]


SqrtNumberQ[u_*v_] :=
  SqrtNumberQ[u] &amp;amp;&amp;amp; SqrtNumberQ[v]


SqrtNumberQ[u_] :=
  RationalQ[u] || u===I
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code &lt;code class="highlighter-rouge"&gt;SqrtNumberQ&lt;/code&gt; is defined multiple times for different function arguments. To implement these functions in Python, Francesco suggested that we test the type of argument using conditionals:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Python"&gt;def SqrtNumberQ(expr):
    # SqrtNumberQ[u] returns True if u^2 is a rational number; else it returns False.
    if expr.is_Pow:
        m = expr.base
        n = expr.exp
        return IntegerQ(n) &amp;amp; SqrtNumberQ(m) | IntegerQ(n-1/2) &amp;amp; RationalQ(m)
    elif expr.is_Mul:
        return all(SqrtNumberQ(i) for i in expr.args)
    else:
        return RationalQ(expr) or expr == I
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was some problem while implementing &lt;code class="highlighter-rouge"&gt;Catch&lt;/code&gt; since SymPy doesn&amp;#8217;t currently has &lt;code class="highlighter-rouge"&gt;Throw&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Mathematica"&gt;MapAnd[f_,lst_] :=
  Catch[Scan[Function[If[f[#],Null,Throw[False]]],lst];True]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used the following code to implement &lt;code class="highlighter-rouge"&gt;ManAnd&lt;/code&gt; in Python:&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MapAnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# MapAnd[f,l] applies f to the elements of list l until False is returned; else returns True&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id="todo"&gt;TODO&lt;/h2&gt;

&lt;p&gt;I and Abdullah have implemented ~40 utility functions so far. There are around ~40 more functions which needs to be implemented in order to support all algebraic rules. We should be able to complete those functions by tomorrow.&lt;/p&gt;

&lt;p&gt;I will also resume adding tests to Rubi test suit for algebraic functions.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/blogs/Gsoc2017-week-2</guid>
      <author>Gaurav Dhingra (gxyd)</author>
      <title>Gaurav Dhingra (gxyd): GSoC Week 2</title>
      <pubDate>Wed, 14 Jun 2017 00:00:00 GMT</pubDate>
      <link>https://gxyd.github.io/blogs/Gsoc2017-week-2/</link>
      <description>&lt;p&gt;After the Kalevi&amp;#8217;s comment&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The param-rde branch is getting inconveniently big for hunting down and reviewing small changes. I think we should create another branch that would contain my original PR plus the added limited_integrate code (and optionally something else). Then that should be merged. Thereafter it would be easier to review new additions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I decided to remove a few commits from top of &lt;code class="highlighter-rouge"&gt;param-rde&lt;/code&gt; branch and made the branch &lt;code class="highlighter-rouge"&gt;param-rde&lt;/code&gt; mergeable.&lt;/p&gt;

&lt;p&gt;Yesterday Kalevi merged the pull request &lt;a href="https://github.com/sympy/sympy/pull/11761"&gt;#11761, Parametric Risch differentia equation&lt;/a&gt;, there were quite a few problems(unrelated to my work) with travis but finally it passes the tests.&lt;/p&gt;

&lt;p&gt;So till now these are pull requests that have been completed/started for my project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;font color="green"&gt;Merged:&lt;/font&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/11761"&gt;param-rde #11761&lt;/a&gt;: This is the pull request that Kalevi made back in september 2016. I further made commits for &lt;code class="highlighter-rouge"&gt;limited_integration&lt;/code&gt; function, implementation of parametric risch differential equation, though not many tests were added in this, which should definitely be done. I haven&amp;#8217;t been able to find tests that lead to non-cancellation cases (Kalevi mentions that we should be able to find them), so for the time being we decided to start the implementation of cancellation routines, particularly liouvillian cases (others being non-linear and hypertangent cases), there isn&amp;#8217;t a good reason to implement the hypertangent cases right now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color="red"&gt;Unmerged:&lt;/font&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12734"&gt;param-rde_polymatrix&lt;/a&gt; this pull request is intended to use &lt;code class="highlighter-rouge"&gt;PolyMatrix&lt;/code&gt; instead of &lt;code class="highlighter-rouge"&gt;Matrix&lt;/code&gt; (it is &lt;code class="highlighter-rouge"&gt;MutableDenseMatrix&lt;/code&gt;), here is Kalevi&amp;#8217;s comment regarding it: &amp;#8220;It would also be possible to use from &amp;#8230; import PolyMatrix as Matrix. That would hint that there might be a single matrix in the future.&amp;#8221;. The reason for making is &lt;code class="highlighter-rouge"&gt;Matrix&lt;/code&gt; doesn&amp;#8217;t play well with &lt;code class="highlighter-rouge"&gt;Poly&lt;/code&gt;(or related) elements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color="green"&gt;Merged:&lt;/font&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12727"&gt;Change printing of DifferentialExtension object&lt;/a&gt;, it wasn&amp;#8217;t necessary to make this pull request, but it does help me in debugging the problems a little easier.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was hoping that I would write a bit of mathematics in my blog posts, but unfortunately things I have dealt with till now required me to focus on programming API, introducing &lt;code class="highlighter-rouge"&gt;PolyMatrix&lt;/code&gt; so it deals well with the elements of &lt;code class="highlighter-rouge"&gt;Poly&lt;/code&gt;&amp;#8217;s, but I am thinking this week I am going to deal with more of mathematics.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id="todo-for-this-week"&gt;TODO for this week&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Complete the cancellation liouvillian cases. I just sent the pull request for it &lt;a href="https://github.com/sympy/sympy/pull/12743"&gt;Liouvillian cases for Parametric Risch differential equation #12743&lt;/a&gt;. I really need to catch with the core of things, do it a little quick.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope the next blog post is going to be a good mathematical one :)&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/week-2/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): Week 2</title>
      <pubDate>Tue, 13 Jun 2017 18:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/week-2/</link>
      <description>&lt;p&gt;My second week I spent on introducing Lame coefficients into CoordSysCartesian. Unfortunately, our work is restricted by SymPy structure so, we don&amp;rsquo;t have too much freedom in our implementation. Hopefully, with my mentor, Francesco, we found some solution how to achieve our goals without destroying vector module. This week shows that I have lack in my knowledge about object-oriented programming and SymPy.
Having access to Lame coefficient I was able to modified Del operator (in mathematics nabla operators) to handle spherical and cylindrical coordinate system.</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/06/13/Improve Sets Module Part II</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Improve Sets Module Part II</title>
      <pubDate>Tue, 13 Jun 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/06/13/Improve-Sets-Module-Part-II/</link>
      <description>&lt;p&gt;Last week&amp;#8217;s PR &lt;a href="https://github.com/symengine/symengine/pull/1281"&gt;#1281&lt;/a&gt; on &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;set_intersection&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;set_complement&lt;/code&gt; got merged in. This week, I implemented &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt;. This work is done in &lt;a href="https://github.com/symengine/symengine/pull/1291"&gt;#1291&lt;/a&gt; for &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; and &lt;a href="https://github.com/symengine/symengine/pull/1293"&gt;#1293&lt;/a&gt; for &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; : &lt;br /&gt;
It is useful to represent unsolved equations or a partially solved equation.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class ConditionSet : public Set
{
private:
    vec_sym syms_;
    RCP&amp;lt;const Boolean&amp;gt; condition_;
...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Earlier, I used another data member for storing the base set. Thanks to &lt;a href="https://github.com/isuruf"&gt;isuruf&lt;/a&gt;, I was able to merge it within &lt;code class="highlighter-rouge"&gt;condition_&lt;/code&gt;. &lt;br /&gt;
For implementing &lt;code class="highlighter-rouge"&gt;contains&lt;/code&gt; method for &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;, I added Subs Visitor for &lt;code class="highlighter-rouge"&gt;Contains&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;And&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; : &lt;br /&gt;
It is a Set representation of a mathematical function defined on symbols over some set.
For example, &lt;code class="highlighter-rouge"&gt;x**2 for all x in [0,2]&lt;/code&gt; is represented as &lt;code class="highlighter-rouge"&gt;imageset({x},x**2,[0,2])&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When is ImageSet useful ? &lt;br /&gt;
Say, I need to solve a trignometric equation &lt;code class="highlighter-rouge"&gt;sin(x) = 1&lt;/code&gt;. Solution is &lt;code class="highlighter-rouge"&gt;2*n*pi+pi/2, n belongs to [0,oo)&lt;/code&gt;. for such solutions imageset is a useful representation to have.&lt;/p&gt;

&lt;p&gt;I will try to get these two PRs merged in ASAP. &lt;br /&gt;
Next week, I will be working on implementing solvers for lower degree(&amp;lt;=4) polynomials.&lt;/p&gt;

&lt;p&gt;See you next time. Bye for now !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/06/12/GSoC-Progress-Week-2</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): GSoC Progress - Week 2</title>
      <pubDate>Mon, 12 Jun 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/06/12/GSoC-Progress-Week-2/</link>
      <description>&lt;p&gt;Hello, this post contains the second report of my GSoC progress.&lt;/p&gt;

&lt;h2 id="report"&gt;Report&lt;/h2&gt;

&lt;h3 id="symengine"&gt;SymEngine&lt;/h3&gt;
&lt;p&gt;This week I mostly worked on implementing specific classes in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;, namely &lt;code class="highlighter-rouge"&gt;Sign&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Float&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Ceiling&lt;/code&gt;, through PRs &lt;a href="https://github.com/symengine/symengine/pull/1287"&gt;#1287&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine/pull/1290"&gt;#1290&lt;/a&gt;. The work is currently under review, but again, mostly complete.&lt;/p&gt;

&lt;p&gt;Though I had originally planned to implement more classes in my proposal, after a thorough look, I realised that a number of the mentioned classes could easily be implemented in &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; side only. As such, there was no hard requirement for them to be implemented in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;.
Also, a number of them had been pre-implemented, but rather as &lt;code class="highlighter-rouge"&gt;virtual&lt;/code&gt; methods, and not standalone classes. There are still a couple of classes that I&amp;#8217;d be working on in the coming week, which would effectively finish up a huge part of the planned Phase I of my proposal.&lt;/p&gt;

&lt;h3 id="symenginepy"&gt;SymEngine.py&lt;/h3&gt;
&lt;p&gt;Isuru and I conversed a bit on whether I&amp;#8217;d be interested in working on providing &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; support for &lt;a href="https://github.com/pydy/pydy"&gt;PyDy&lt;/a&gt; (a multi-body dynamics toolkit), as a part of GSoC. I agreed happily, and Isuru opened a couple of issues in &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; for me to work on, as I was completely new to &lt;code class="highlighter-rouge"&gt;PyDy&lt;/code&gt;.
I started off wrapping up &lt;code class="highlighter-rouge"&gt;Infinity&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;NegInfinity&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;ComplexInfinity&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;NaN&lt;/code&gt; classes through PR &lt;a href="https://github.com/symengine/symengine.py/pull/151"&gt;#151&lt;/a&gt;. I also worked on finishing Isuru&amp;#8217;s code, wrapping &lt;code class="highlighter-rouge"&gt;ccode&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;CodePrinter&lt;/code&gt; class with an improvised &lt;code class="highlighter-rouge"&gt;doprint&lt;/code&gt; function through PR &lt;a href="https://github.com/symengine/symengine.py/pull/152"&gt;#152&lt;/a&gt;.
I also opened &lt;a href="https://github.com/symengine/symengine.py/pull/153"&gt;#153&lt;/a&gt;, working on acquisition and release of &lt;code class="highlighter-rouge"&gt;Global Interpreter Lock&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;GIL&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;pywrapper.cpp&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;See you again!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Au Revoir&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://bjodah.github.io/blog/posts/gsoc-week2.html</guid>
      <author>Bj&#xF6;rn Dahlgren (bjodah)</author>
      <title>Bj&#xF6;rn Dahlgren (bjodah): Status update week 2 GSoC</title>
      <pubDate>Sun, 11 Jun 2017 21:37:00 GMT</pubDate>
      <link>http://bjodah.github.io/blog/posts/gsoc-week2.html</link>
      <description>&lt;div&gt;&lt;p&gt;I have spent the second week of Google Summer of Code on essentially two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Continued work on type awareness in the code printers (&lt;tt class="docutils literal"&gt;CCodePrinter&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;FCodePrinter&lt;/tt&gt;). The work is ongoing in &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12693"&gt;gh-12693&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Writing tutorial &lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial"&gt;code&lt;/a&gt; on code-generation in the form of jupyter notebooks for the
upcoming SciPy 2017 &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493418/"&gt;conference&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="precision-aware-code-printers"&gt;
&lt;h2&gt;Precision aware code printers&lt;/h2&gt;
&lt;p&gt;After my weekly mentor meeting, we decided to take another approach to
how we are going to represent &lt;tt class="docutils literal"&gt;Variable&lt;/tt&gt; instances in the
&lt;tt class="docutils literal"&gt;.codegen.ast&lt;/tt&gt; module. Previously I had proposed to use quite a
number of arguments (stored in &lt;tt class="docutils literal"&gt;.args&lt;/tt&gt; since it inherits
&lt;tt class="docutils literal"&gt;Basic&lt;/tt&gt;). Aaron suggested we might want to represent that underlying
information differently. After some discussion we came to the
conclusion that we could introduce a &lt;tt class="docutils literal"&gt;Attribute&lt;/tt&gt; class (inhereting
from &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt;) to describe things such as value const-ness, and
pointer const-ness (those two are available as &lt;tt class="docutils literal"&gt;value_const&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;pointer_const&lt;/tt&gt;). Attributes will be stored in a &lt;tt class="docutils literal"&gt;FiniteSet&lt;/tt&gt;
(essentially SymPy version of &lt;tt class="docutils literal"&gt;set&lt;/tt&gt;) and the instances we provide as
"pre-made" in the &lt;tt class="docutils literal"&gt;.codegen.ast&lt;/tt&gt; module will be supported by the
printers by default. Here is some example code showing what the
current proposed API looks like (for C99):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; u = symbols('u', real=True)
&amp;gt;&amp;gt;&amp;gt; ptr = Pointer.deduced(u, {pointer_const, restrict})
&amp;gt;&amp;gt;&amp;gt; ccode(Declaration(ptr))
'double * const restrict u;'
&lt;/pre&gt;
&lt;p&gt;and for Fortran:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; vx = Variable(Symbol('x'), {value_const}, float32)
&amp;gt;&amp;gt;&amp;gt; fcode(Declaration(vx, 42))
'real(4), parameter :: x = 42'
&lt;/pre&gt;
&lt;p&gt;The C code printer can now also print code using different math functions depending
on the targeted precision (functions guaranteed to be present in the C99 stanard):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; ccode(x**3.7, standard='c99', precision=float32)
'powf(x, 3.7F)'
&amp;gt;&amp;gt;&amp;gt; ccode(exp(x/2), standard='c99', precision=float80)
'expl((1.0L/2.0L)*x)'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="tutorial-material-for-code-generation"&gt;
&lt;h2&gt;Tutorial material for code generation&lt;/h2&gt;
&lt;p&gt;Aaron, Jason and I have been discussing what examples to use for the
tutorial on code generation with SymPy. Right now we are aiming to use
quite a few examples from chemistry actually, and more specifically
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Chemical_kinetics"&gt;chemical kinetics&lt;/a&gt;. This is the
precise application which got me started using SymPy for
code-generation, so it lies close to my heart (I do extensive modeling
of chemical kinetics in my PhD studies).&lt;/p&gt;
&lt;p&gt;Working on the tutorial material has already been really helpful for
getting insight in development needs for the exisiting classes and
functions used for code-generation. I was hoping to use &lt;tt class="docutils literal"&gt;autowrap&lt;/tt&gt;
from the &lt;tt class="docutils literal"&gt;.utilities&lt;/tt&gt; module. Unfortunately I found that it was not
flexible enough to be useful for integration of systems of ODEs (where
we need to evaluate a vector-valued function taking a vector as
input). I did attempt to subclass the &lt;tt class="docutils literal"&gt;CodeWrapper&lt;/tt&gt; class to allow
me to do this. But personally I found those classes to be quite hard to
extend (much unlike the printers which I've often found to be
intuitive).&lt;/p&gt;
&lt;p&gt;My current plan for the chemical kinetics case is to first solve it
using &lt;tt class="docutils literal"&gt;sympy.lambdify&lt;/tt&gt;.  That allows for quick prototyping, and
unless one has very high demands with respect to performance, it is
usually good enough.&lt;/p&gt;
&lt;p&gt;The next step is to generate a native callback (it was here I was
hoping to use &lt;tt class="docutils literal"&gt;autowrap&lt;/tt&gt; with the Cython backend). The current
approach is to write the expressions as Cython code using a template.
Cython conveniently follows Python syntax, and hence the string
printer can be used for the code generation. Doing this speeds up the
integration considerably. At this point the bottleneck is going back and
forth through the Python layer.&lt;/p&gt;
&lt;p&gt;So in order to speed up the integration further, we need to bypass
Python during integration (and let the solver call the user
provided callbacks without going through the interpreter). I did
this by providing a C-code template which relies on &lt;tt class="docutils literal"&gt;CVode&lt;/tt&gt; from the
&lt;a class="reference external" href="https://computation.llnl.gov/projects/sundials"&gt;Sundials&lt;/a&gt; suite of
non-linear solvers. It is a well established solver and is already
available for Linux, Mac &amp;amp; Windows under conda from the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;conda-forge&lt;/span&gt;&lt;/tt&gt; channel. I then provide a thin Cython wrapper, calling
into the C-function, which:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;sets up the CVode solver&lt;/li&gt;
&lt;li&gt;runs the integration&lt;/li&gt;
&lt;li&gt;records some statistics&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using native code does come at a cost. One of the strengths of Python
is that it is cross-platform. It (usually) does not matter if your
Python application runs on Linux, OSX or Windows (or any other
supported operating system). However, since we are doing
code-generation, we are relying on compilers provided by the
respective platform. Since we want to support both Python 2 &amp;amp; Python 3
on said three platforms, there are quite a few combinations to cover.
That meant quite a few surprises (I now know for example that MS
Visual C++ 2008 does not support C99), but thanks to the kind &lt;a class="reference external" href="https://github.com/sympy/scipy-2017-codegen-tutorial/issues/2#issuecomment-307538308"&gt;help&lt;/a&gt; of
&lt;a class="reference external" href="https://github.com/isuruf"&gt;Isuru Fernando&lt;/a&gt; I think I will manage to
have all platform/version combinations working during next week.&lt;/p&gt;
&lt;p&gt;Also planned for next week:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;numba&lt;/tt&gt; together with &lt;tt class="docutils literal"&gt;lambdify&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;Lambdify&lt;/tt&gt; from &lt;a class="reference external" href="https://github.com/symengine"&gt;SymEngine&lt;/a&gt;
(preferably with the LLVM backend).&lt;/li&gt;
&lt;li&gt;Make the notebooks more tutorial like (right now they are more of a
show-case).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and of course: continued work on the code printers. That's all for now
feel free to get in touch with any feedback or questions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://arif7blog.wordpress.com/?p=247</guid>
      <author>Arif Ahmed (ArifAhmed1995)</author>
      <title>Arif Ahmed (ArifAhmed1995): Week 2 Report(June 3 &#x2013; June 10) : Working Prototype, Improving functionality.</title>
      <pubDate>Sun, 11 Jun 2017 10:16:52 GMT</pubDate>
      <link>https://arif7blog.wordpress.com/2017/06/11/week-2-reportjune-3-june-10-working-prototype-improving-functionality/</link>
      <description>&lt;p&gt;Note : If you&amp;#8217;re viewing this on Planet SymPy and Latex looks weird, go to the &lt;a href="https://arif7blog.wordpress.com/" rel="noopener" target="_blank"&gt;&lt;span style="color: #00ff00;"&gt;WordPress site&lt;/span&gt;&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;The 2D use case works perfectly although there are limitations. The current API and method-wise limitations are discussed &lt;a href="https://github.com/ArifAhmed1995/sympy/blob/857463fac558702def0af27d08a1afa01a14aff0/IntegrationOverPolytopes.ipynb" rel="noopener" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That lone failing test was caused due to typecasting a Python set object to a list. Sets in Python do not support indexing, so when they are coerced to list, indexing of the resulting object is arbitrary. Therefore, I had to change to an axes list of [x, y].&lt;/p&gt;
&lt;p&gt;Some other coding improvements were suggested by Gaurav Dhingra (another GSoC student). One can view them as comments to the &lt;span style="color: #00ccff;"&gt;&lt;a href="https://github.com/sympy/sympy/pull/12673" rel="noopener" target="_blank"&gt;pull request&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Clockwise Sort&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
I wanted to overcome some of the method-wise limitations. So, the first improvement I did was to implement a clockwise sorting algorithm for the points of the input polygon.&lt;br /&gt;
Come to think of it, for the 3D use case the points belonging to a particular facet will have to be sorted anti-clockwise for the algorithm to work. Therefore, it would be better to include an extra argument &amp;#8220;&lt;span style="color: #00ff00;"&gt;&lt;span style="color: #808000;"&gt;orient&lt;/span&gt;&lt;/span&gt;&amp;#8221; with default value 1 (clockwise sort) and -1 when anti-clockwise sort.&lt;/p&gt;
&lt;p&gt;First I tried to think of it myself, and naturally the first thing that came to my mind was sorting the points depending on their &lt;img alt="&amp;#92;arctan { &amp;#92;theta }" class="latex" src="https://s0.wp.com/latex.php?latex=%5Carctan+%7B+%5Ctheta+%7D&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="&amp;#92;arctan { &amp;#92;theta }" /&gt; value where &lt;img alt="&amp;#92;theta" class="latex" src="https://s0.wp.com/latex.php?latex=%5Ctheta&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="&amp;#92;theta" /&gt; is the angle that the line from that point to an arbitrary reference point (center) makes with the x-axis (more correctly, the independent variable axis). But obviously this is not efficient, because calculating the&amp;#160;&lt;img alt="&amp;#92;arctan { &amp;#92;theta }" class="latex" src="https://s0.wp.com/latex.php?latex=%5Carctan+%7B+%5Ctheta+%7D&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="&amp;#92;arctan { &amp;#92;theta }" /&gt; value is expensive.&lt;/p&gt;
&lt;p&gt;Then I came across &lt;span style="color: #00ccff;"&gt;&lt;a href="https://stackoverflow.com/a/6989383" rel="noopener" target="_blank"&gt;&lt;span style="color: #00ccff;"&gt;this answer&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; on StackOverflow. It was a much better technique because it did not use&amp;#160;&lt;img alt="&amp;#92;arctan { &amp;#92;theta }" class="latex" src="https://s0.wp.com/latex.php?latex=%5Carctan+%7B+%5Ctheta+%7D&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="&amp;#92;arctan { &amp;#92;theta }" /&gt; , no division operations and no distance computing using square root (as pointed out in the comments). Let us understand the reasoning.&lt;/p&gt;
&lt;p&gt;Firstly, I&amp;#8217;m sure we all know that the distance of a point &lt;img alt="({ x }_{ 1 },{ y }_{ 1 })" class="latex" src="https://s0.wp.com/latex.php?latex=%28%7B+x+%7D_%7B+1+%7D%2C%7B+y+%7D_%7B+1+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="({ x }_{ 1 },{ y }_{ 1 })" /&gt; from the line &lt;img alt="(ax+by+c=0)" class="latex" src="https://s0.wp.com/latex.php?latex=%28ax%2Bby%2Bc%3D0%29&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="(ax+by+c=0)" /&gt; is &lt;img alt="(&amp;#92;frac { a{ x }_{ 1 }+b{ y }_{ 1 }+c }{ &amp;#92;sqrt { { a }^{ 2 }+{ b }^{ 2 } } })" class="latex" src="https://s0.wp.com/latex.php?latex=%28%5Cfrac+%7B+a%7B+x+%7D_%7B+1+%7D%2Bb%7B+y+%7D_%7B+1+%7D%2Bc+%7D%7B+%5Csqrt+%7B+%7B+a+%7D%5E%7B+2+%7D%2B%7B+b+%7D%5E%7B+2+%7D+%7D+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="(&amp;#92;frac { a{ x }_{ 1 }+b{ y }_{ 1 }+c }{ &amp;#92;sqrt { { a }^{ 2 }+{ b }^{ 2 } } })" /&gt;. Now, for clockwise sorting we need to decide the left or right orientation of a point given the other point and a constant reference(in this case, the center). Therefore, it is required to define a custom compare function.&lt;/p&gt;
&lt;p&gt;Given three points : &lt;img alt="a, b, center" class="latex" src="https://s0.wp.com/latex.php?latex=a%2C+b%2C+center&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="a, b, center" /&gt;, consider the line made by points&amp;#160;&lt;img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="b" /&gt; and &lt;img alt="center" class="latex" src="https://s0.wp.com/latex.php?latex=center&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="center" /&gt;. The point &lt;img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="a" /&gt; will be on the left if numerator of of above formula is negative and right if positive. The cases where we need not consider this formula is when we are sure of :&lt;/p&gt;
&lt;p&gt;Case 1 &amp;gt; The center lies in between &lt;img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="a" /&gt; and &lt;img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="b" /&gt;(Firstly check this by comparing x-coordinates).&lt;/p&gt;
&lt;p&gt;Case 2 &amp;gt; If all the points are on a line parallel to y-axis :&lt;br /&gt;
Sub-Case 1 &amp;gt; If any point is above center, that point is &amp;#8220;lesser&amp;#8221; than other one.&lt;br /&gt;
Sub-Case 2 &amp;gt; If both below center, the point closer to center is &amp;#8220;lesser&amp;#8221; than&lt;br /&gt;
other one.&lt;/p&gt;
&lt;p&gt;Case 3 &amp;gt; This is when Case 1, 2 and the standard check fails.&lt;br /&gt;
This can only happen if &lt;img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="a" /&gt;, &lt;img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="b" /&gt; and&amp;#160;&lt;img alt="center" class="latex" src="https://s0.wp.com/latex.php?latex=center&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="center" /&gt; are all collinear points and &lt;img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="a" /&gt;, &lt;img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=444444&amp;#038;s=-1" title="b" /&gt; both lie on the same side of the line with respect to center. Then, the one farthest&amp;#160; from center is &amp;#8220;lesser&amp;#8221; than the other one.&lt;/p&gt;
&lt;p&gt;Ondrej and Prof.Sukumar have looked at the notebook but will discuss in detail further and then inform me about the final 2D API.&lt;/p&gt;
&lt;p&gt;Till then, I&amp;#8217;ll work on the existing limitations.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/arif7blog.wordpress.com/247/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/arif7blog.wordpress.com/247/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=arif7blog.wordpress.com&amp;#038;blog=126429718&amp;#038;post=247&amp;#038;subd=arif7blog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/06/09/Week1-Report</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): GSoC Week1 Report</title>
      <pubDate>Fri, 09 Jun 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/06/09/Week1-Report.html</link>
      <description>&lt;p&gt;Francesco was skeptical if MatchPy could support all Rubi rules. Hence we (I and Abdullah) are trying to implement first set of rules (Algebraic) into MatchPy as soon as possible. Major things involved in accomplishing this are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[Completed]&lt;/strong&gt; Complete writing parser for Rubi rules form &lt;code class="highlighter-rouge"&gt;DownValues[]&lt;/code&gt; generated from Mathematica.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[Partially Completed]&lt;/strong&gt; Complete basic framework for MatchPy to support Rubi rules.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[Completed]&lt;/strong&gt; Parse Rubi tests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[Incomplete]&lt;/strong&gt; Add utility functions for Rubi into SymPy syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="generation-of-new-patterns-from-optional-arguments"&gt;Generation of new patterns from Optional Arguments&lt;/h4&gt;
&lt;p&gt;Mathematica supports &lt;a href="https://reference.wolfram.com/language/tutorial/OptionalAndDefaultArguments.html"&gt;optional arguments&lt;/a&gt; for Wild symbols. Some common functions (such as &lt;code class="highlighter-rouge"&gt;Mul&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Add&lt;/code&gt;, and &lt;code class="highlighter-rouge"&gt;Pow&lt;/code&gt;) of Mathematica have built&amp;#8208;in default values for their arguments.&lt;/p&gt;

&lt;p&gt;MatchPy does not support optional arguments to its &lt;code class="highlighter-rouge"&gt;Wildcards&lt;/code&gt;. So, Manuel Krebber suggested to add two more rules for each optional argument that exist in the pattern. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Mathematica"&gt;Int[x_^m_.,x_Symbol] :=
  x^(m+1)/(m+1) /;
FreeQ[m,x] &amp;amp;&amp;amp; NonzeroQ[m+1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above rule, the default value of &lt;code class="highlighter-rouge"&gt;m_&lt;/code&gt; is &lt;code class="highlighter-rouge"&gt;1&lt;/code&gt;. So I implemented these rules in MatchPy:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Mathematica"&gt;Int[x_^m_.,x_Symbol] :=
  x^(m+1)/(m+1) /;
FreeQ[m,x] &amp;amp;&amp;amp; NonzeroQ[m+1]

(* substituting m = 1*)
Int[x_,x_Symbol] :=
  x^(2)/(2) /;
FreeQ[2,x] &amp;amp;&amp;amp; NonzeroQ[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have used &lt;a href="https://stackoverflow.com/questions/18035595/powersets-in-python-using-itertools"&gt;powerset&lt;/a&gt; to generate all combinations of default values to generate patterns. Code for parser can be found &lt;a href="https://github.com/parsoyaarihant/Rubi-Parse"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id="utility-functions"&gt;Utility functions&lt;/h4&gt;
&lt;p&gt;There are many utility functions for Rubi written in Mathematica. We are currently focusing on implementing the functions which are being used in Algebraic rules. As soon we we complete our implementation (hopefully by this weekend), we can start running the test suit for Rubi.&lt;/p&gt;

&lt;p&gt;I will work on implementing utility functions along with Abdullah in coming days. I will keep testing the module as we implement utility functions and add more rules into our matcher.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=49</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): Week 2 Begins</title>
      <pubDate>Thu, 08 Jun 2017 18:40:20 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/06/08/week-2-begins/</link>
      <description>&lt;p&gt;Hello all!&lt;/p&gt;
&lt;p&gt;The first week comes to an end and we (Arihant and me) have partially implemented Algebraic functions\ Linear products.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THE PROGRESS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most of my task was to translate Algebraic Integration tests from &lt;a href="http://www.apmaths.uwo.ca/~arich/IntegrationProblems/MapleSyntaxFiles/MapleSyntaxFiles.html"&gt;Maple Syntax&lt;/a&gt; to Python, write Utility Functions and writing tests for Utility Functions. I have already implemented &lt;a href="http://www.apmaths.uwo.ca/~arich/IntegrationProblems/MapleSyntaxFiles/1%20Algebraic%20functions/1%20Linear%20products/1.2%20(a+b%20x)%5Em%20(c+d%20x)%5En.txt"&gt;1 Algebraic functions\1 Linear products\1.2 (a+b x)**m (c+d x)**n&lt;/a&gt;,&amp;#160;&lt;a href="https://github.com/parsoyaarihant/sympy/blob/rubi4/sympy/rubi/tests/test_all_algebriac.py"&gt;here&lt;/a&gt;. And test sets for&amp;#160;&lt;a href="http://www.apmaths.uwo.ca/~arich/IntegrationProblems/MapleSyntaxFiles/1%20Algebraic%20functions/1%20Linear%20products/1.3%20(a+b%20x)%5Em%20(c+d%20x)%5En%20(e+f%20x)%5Ep.txt"&gt;1 Algebraic functions\1 Linear products\1.3 (a+b x)**m (c+d x)**n (e+f x)**p&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="http://www.apmaths.uwo.ca/~arich/IntegrationProblems/MapleSyntaxFiles/1%20Algebraic%20functions/1%20Linear%20products/1.4%20(a+b%20x)%5Em%20(c+d%20x)%5En%20(e+f%20x)%5Ep%20(g+h%20x)%5Eq.txt"&gt;1 Algebraic functions\1 Linear products\1.4 (a+b x)^m (c+d x)^n (e+f x)^p (g+h x)^q&lt;/a&gt; are almost ready&amp;#160;&lt;a href="https://github.com/parsoyaarihant/sympy/pulls"&gt;here&lt;/a&gt;&amp;#160;along with most of the Utility Functions we require till now, after this we will be successfully covering the &lt;span style="color: #808080;"&gt;Algebraic\ Linear products &lt;/span&gt;portion.&lt;/p&gt;
&lt;p&gt;Next what&amp;#8217;s delaying our progress is Utility Functions, I &amp;#160;have been taking help from &lt;a href="http://www.apmaths.uwo.ca/~arich/IntegrationRules/PortableDocumentFiles/Integration%20utility%20functions.pdf"&gt;this pdf&lt;/a&gt;&amp;#160;on Integration Utility Functions and looking for their definitions in Mathematica website but the major problem is the definitions provided are not very clear or no definition at all. Meanwhile Arihant was implementing RUBI rules, default values for variables and working on constraints .&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/nesar2017.wordpress.com/49/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nesar2017.wordpress.com/49/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=nesar2017.wordpress.com&amp;#038;blog=126779945&amp;#038;post=49&amp;#038;subd=nesar2017&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/06/05/GSoC-Progress-Week-1</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): GSoC Progress - Week 1</title>
      <pubDate>Mon, 05 Jun 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/06/05/GSoC-Progress-Week-1/</link>
      <description>&lt;p&gt;Ahoy there! This post contains my first GSoC progress report.&lt;/p&gt;

&lt;h2 id="report"&gt;Report&lt;/h2&gt;

&lt;h3 id="symengine"&gt;SymEngine&lt;/h3&gt;
&lt;p&gt;My previous PR(&lt;a href="https://github.com/symengine/symengine/pull/1276"&gt;#1276&lt;/a&gt;) on &lt;code class="highlighter-rouge"&gt;Relationals&lt;/code&gt; is reviewed and merged in. I also worked on introducing additional support for them. The PRs, &lt;a href="https://github.com/symengine/symengine/pull/1279"&gt;#1279&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine/pull/1280"&gt;#1280&lt;/a&gt; are also reviewed and merged, leaving only &lt;a href="https://github.com/symengine/symengine/pull/1282"&gt;LLVM support&lt;/a&gt; as a work in progress.&lt;/p&gt;

&lt;p&gt;I also noticed, that one of the pending requests for &lt;code class="highlighter-rouge"&gt;0.3.0&lt;/code&gt; milestone for &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; was the implementation of vector-specific methods such as &lt;code class="highlighter-rouge"&gt;dot()&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;cross()&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;. The work is done &lt;a href="https://github.com/symengine/symengine/pull/1286"&gt;here&lt;/a&gt; and is mostly complete.&lt;/p&gt;

&lt;p&gt;Apart from this, I started the planned implementation of &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt; classes by implementing the &lt;code class="highlighter-rouge"&gt;Dummy&lt;/code&gt; class in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; &lt;a href="https://github.com/symengine/symengine/pull/1284"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of the above mentioned pending work should be ready to merge within a couple of days.&lt;/p&gt;

&lt;h3 id="sympy"&gt;SymPy&lt;/h3&gt;
&lt;p&gt;Continuing my work on &lt;code class="highlighter-rouge"&gt;sympy/physics&lt;/code&gt;, I pushed in &lt;a href="https://github.com/sympy/sympy/pull/12703"&gt;#12703&lt;/a&gt; covering the stand-alone files in &lt;code class="highlighter-rouge"&gt;physics&lt;/code&gt; module and &lt;a href="https://github.com/symengine/symengine/pull/12700"&gt;#12700&lt;/a&gt; which is a minor addition to the work done in &lt;code class="highlighter-rouge"&gt;physics/mechanics&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="symenginepy"&gt;SymEngine.py&lt;/h3&gt;
&lt;p&gt;Isuru pointed out some inconsistencies in the existing code for &lt;code class="highlighter-rouge"&gt;ImmutableMatrix&lt;/code&gt; class, which needed to be fixed for &lt;code class="highlighter-rouge"&gt;0.3.0&lt;/code&gt; milestone. The code was fixed through the PR &lt;a href="https://github.com/symengine/symengine.py/pull/148"&gt;#148&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll probably have a &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; release next week, after which I plan to port over pre-existing functionalities in &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;&amp;#8217;s left-over modules.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all for now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adi&amp;#243;s&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/06/05/Improve Sets Module - The Beginning</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Improve Sets Module - The Beginning</title>
      <pubDate>Mon, 05 Jun 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/06/05/Improve-Sets-Module-The-Beginning/</link>
      <description>&lt;p&gt;As discussed in the previous blog, this and the next week&amp;#8217;s task for me is to improve the Sets module.
I started off by implementing the class for &lt;code class="highlighter-rouge"&gt;Complemsent&lt;/code&gt; and the functions &lt;code class="highlighter-rouge"&gt;set_complement&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;set_intersection&lt;/code&gt;.
This work is done in &lt;a href="https://github.com/symengine/symengine/pull/1281"&gt;#1281&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;set_intersection&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;RCP&amp;lt;const Set&amp;gt; set_intersection(const set_set &amp;amp;in);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="highlighter-rouge"&gt;set_intersection&lt;/code&gt; tries to simplify the set of sets input by applying various rules.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;trivial rules like if one of the input is &lt;code class="highlighter-rouge"&gt;emptyset()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;handles finitesets by checking all other sets in the input for all elements in finitesets.&lt;/li&gt;
  &lt;li&gt;If any of the sets is union, then it tries to return a Union of Intersections&lt;/li&gt;
  &lt;li&gt;If any of the sets is Complement, then this returns a simplified &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;pair-wise rules checks every pair of sets and tries to merge them into one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;set_complement&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;RCP&amp;lt;const Set&amp;gt; set_complement(const RCP&amp;lt;const Set&amp;gt; &amp;amp;universe, const RCP&amp;lt;const Set&amp;gt; &amp;amp;container);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For this function, i had to implement virtual functions &lt;code class="highlighter-rouge"&gt;set_complement&lt;/code&gt; for all the existing child classes of &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt;.
and this function simply calls the container&amp;#8217;s &lt;code class="highlighter-rouge"&gt;set_complement()&lt;/code&gt; with the given universe.&lt;/p&gt;

&lt;p&gt;Details of &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt; class :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;similar to other classes in sets module, the class prototype for &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt; is
    &lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class Complement : public Set
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;It stores two Sets. Universe and container, and Complement(a, b) represents a-b where a is universe and b is the container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this, I started maintaining a &lt;a href="https://github.com/symengine/symengine/wiki/GSoC-2017-Solvers-Progress-report"&gt;wiki page&lt;/a&gt; for GSoC&amp;#8217;s progress report as suggested by &lt;a href="https://github.com/aktech/"&gt;Amit Kumar&lt;/a&gt; in the first weekly meeting. I will post minutes of all meetings in this wiki page.&lt;/p&gt;

&lt;p&gt;Next week, I will be working on &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it for now. See you next time. Until then, Goodbye !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/06/05/smith</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): The Smith Normal Form</title>
      <pubDate>Mon, 05 Jun 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/06/05/smith/</link>
      <description>&lt;p&gt;Last week I was working on implementing the Smith Normal Form for matrices over principal ideal domains. I&amp;#8217;m still making corrections as the &lt;a href="https://github.com/sympy/sympy/pull/12705"&gt;PR&lt;/a&gt; is being reviewed. I used the standard algorithm: use invertable (in the ring) row and column operations to make the matrix diagonal and make sure the diagonal entries have the property that an entry divides all of the entries that come after it (this is described in more detail on &lt;a href="https://en.wikipedia.org/wiki/Smith_normal_form#Algorithm"&gt;wikipedia&lt;/a&gt; for example). I ran into trouble when trying to determine the domain of the matrix entries if the user hadn&amp;#8217;t explicitly specified one. Matrices in SymPy don&amp;#8217;t have a &lt;code class="highlighter-rouge"&gt;.domain&lt;/code&gt; attribute or anything similar, and can contain objects of different types. So, if I did attempt to find some suitable principal ideal domain over which to consider all of them, the only way would be to try a few of the ones that are currently implemented until something fits, and that would have to be extended every time a new domain is implemented and generally sounds tedious to do. I&amp;#8217;ve asked on the &lt;a href="https://gitter.im/sympy/GroupTheory"&gt;Group Theory channel&lt;/a&gt; if there was a better way and that started a discussion about changing the &lt;code class="highlighter-rouge"&gt;Matrix&lt;/code&gt; class to have a &lt;code class="highlighter-rouge"&gt;.domain&lt;/code&gt; or a &lt;code class="highlighter-rouge"&gt;.ring&lt;/code&gt; attribute and have the entries checked at construction. In fact, this has been brought up by other people before as well. Unfortunately, adding this attribute would require going over the matrix methods implemented so far and making sure they don&amp;#8217;t assume anything that might not hold for general rings (especially non-commutative ones: like the determinant in its traditional form wouldn&amp;#8217;t even make sense; however, it turns out there are several generalisations of determinants to non-commutative rings like &lt;a href="https://en.wikipedia.org/wiki/Quasideterminant"&gt;quasideterminants&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Dieudonn%C3%A9_determinant"&gt;Dieudonn&amp;#233; determinant&lt;/a&gt;). And this would probably take quite a while and is not directly related to my project. So in the end we decided to have the function work only for matrices for which a &lt;code class="highlighter-rouge"&gt;.ring&lt;/code&gt; attribute has been added manually by the user. For example,&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.polys.solvers import RawMatrix as Matrix
&amp;gt;&amp;gt;&amp;gt; from sympy.polys.domains import ZZ
&amp;gt;&amp;gt;&amp;gt; m = Matrix([0,1,3],[2,4,1])
&amp;gt;&amp;gt;&amp;gt; setattr(m, "ring", ZZ)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hopefully, at some point in the future matrices will have this attribute by default.&lt;/p&gt;

&lt;p&gt;The Smith Normal Form was necessary to analyse the structure of the abelianisation of a group: abelian groups are modules over integers which is a PID and so the Smith Normal form is applicable if the relators of the abelianisation are written in the form of a matrix. If 0 is one of the abelian invariants (the diagonal entries of the Smith Normal form), then the abelianisation is infinite and so must be the whole group. I&amp;#8217;ve added this test to the &lt;code class="highlighter-rouge"&gt;.order()&lt;/code&gt; method for &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;s and now it is able to terminate with the answer &lt;code class="highlighter-rouge"&gt;oo&lt;/code&gt; (infinity) for certain groups for which it wouldn&amp;#8217;t terminate previously. I hope to extend this further with another way to evaluate the order: trying to find a finite index cyclic subgroup (this can be achieved by generating a random word in the group and considering the coset table corresponging to it), and obtain the order of the group by multiplying the index with the order of the cyclic subgroup. The latter could be infinite, in which case the whole group is. Of course, this might not always terminate, but it will terminate in more cases than coset enumeration applied directly to the whole group. This is also what&amp;#8217;s done in &lt;a href="https://www.gap-system.org"&gt;GAP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have begun working on it but this week is the last before my exams, and I feel that I should spend more time revising. For this reason, I probably wouldn&amp;#8217;t be able to send a PR with this new test by the end of the week. However, it would most likely be ready by the end of the next one, and considering that the only other thing I planned to do until the first evaluation period was to write (the main parts of) the &lt;code class="highlighter-rouge"&gt;GroupHomomorphism&lt;/code&gt; class assuming that the things it depends on (e.g. rewriting systems) are already implemented, I believe I am going to stay on schedule.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://bjodah.github.io/blog/posts/gsoc-week1.html</guid>
      <author>Bj&#xF6;rn Dahlgren (bjodah)</author>
      <title>Bj&#xF6;rn Dahlgren (bjodah): A summer of code and mathematics</title>
      <pubDate>Sat, 03 Jun 2017 13:10:00 GMT</pubDate>
      <link>http://bjodah.github.io/blog/posts/gsoc-week1.html</link>
      <description>&lt;div&gt;&lt;p&gt;Google are generously funding work on selected &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open-source_software"&gt;open source&lt;/a&gt; projects each
year through the &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt; project. The project allows
under- and post-graduate students around the world to apply to
mentoring organizations for a scholarship to work on a project during
the summer. This spring I made the leap, I wrote a &lt;a class="reference external" href="https://github.com/sympy/sympy/wiki/GSoC-2017-Application-Bj%C3%B6rn-Dahlgren:-Improved-code-generation-facilities"&gt;proposal&lt;/a&gt; which
got accepted, and I am now working full time for the duration of this
summer on one of these projects. In this blog post I'll give some
background and tell you about the first project week.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Since a few years I've been contributing code to the open-source project
&lt;a class="reference external" href="http://www.sympy.org"&gt;SymPy&lt;/a&gt;. SymPy is a so-called "computer algebra system",
which lets you manipulate mathematical expressions symbolically. I've used this
software package extensively in my own doctoral studies and it has been really useful.&lt;/p&gt;
&lt;p&gt;My research involves formulating mathematical models to: rationalize experimental observations,
fit parameters or aid in design of experiments. Traditionally one sits down and derive equations,
often using pen &amp;amp; paper, then one writes computer code which implements said model, and finally
one writes a paper with the same formulas as LaTeX code (or something similar).
Note how this procedure involves writing the same equations essentially three times,
during derivation, coding and finally the article.&lt;/p&gt;
&lt;p&gt;By using SymPy I can, from a single source:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Do the derivations (fewer hard-to-find mistakes)&lt;/li&gt;
&lt;li&gt;Generate the numerical code (a blazing fast computer program)&lt;/li&gt;
&lt;li&gt;Output LaTeX formatted equations (pretty formulas for the report)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A very attractive side-effect of this is that one truly get reproducible research
(reproducibility is one of the pillars in science). Every step of the process is
self-documented, and because SymPy is free software: &lt;em&gt;anyone&lt;/em&gt; can redo them. I
can't stress enough how big this truly is. It is also the main
motivation why I haven't used proprietary software in place of SymPy,
even though that software may be considerably more feature complete
than SymPy, any code I wrote for it would be inaccessible to people
without a license (possibly even including myself if I leave academia).&lt;/p&gt;
&lt;p&gt;For this work-flow to work in practice the capabilities of the computer algebra system
need to be quite extensive, and it is here my current project with SymPy comes in.
I have had several ideas on how to improve capability number two
listed above: generating the numerical code, and now I get the chance
to realize some of them and work with the community to improve SymPy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-week"&gt;
&lt;h2&gt;First week&lt;/h2&gt;
&lt;p&gt;The majority of the first week has been spent on introducing type-awareness into
the code-printers. SymPy has printer-classes which specialize printing of e.g.
strings, C code, Fortran code etc. Up to now there has been no way to indicate
what precision the generated code should be for. The default floating point type
in python is for example "double precision" (i.e. 64-bit binary IEEE 754 floating
point). This is also the default precision targeted by the code
printers.&lt;/p&gt;
&lt;p&gt;However, there are occasions where one want to use another
precision. For example, consumer class graphics cards which are
ubiquitous often have excellent single precision performance, but are
intentionally capped with respect to double precision arithmetic (due
to marketing reasons). At other times, one want just a bit of extra
precision and extended precision (80-bit floating point, usually the
data type of C's &lt;tt class="docutils literal"&gt;long double&lt;/tt&gt;) is just what's needed to compute
some values with the required precision. In C, the &lt;a class="reference external" href="http://en.cppreference.com/w/c/numeric/math"&gt;corresponding math functions&lt;/a&gt; are standardized since
C99.&lt;/p&gt;
&lt;p&gt;I have started the work to enable the code printers to print this in a
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/12693"&gt;pull-request&lt;/a&gt; to the
SymPy source repository. I have also started experimenting with a
class representing arrays. Arrays&lt;/p&gt;
&lt;p&gt;The first weekly meeting with &lt;a class="reference external" href="http://asmeurer.com"&gt;Aaron Meurer&lt;/a&gt; went well and we also briefly
discussed how to reach out to the SymPy community for wishes on what
code-generation functions to provide, I've set up a wiki-page for it
under the SymPy projects wiki:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/wiki/codegen-gsoc17"&gt;https://github.com/sympy/sympy/wiki/codegen-gsoc17&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'll be sending out an email to the &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/sympy"&gt;mailing list for SymPy&lt;/a&gt; asking for feedback.&lt;/p&gt;
&lt;p&gt;We also discussed the upcoming SciPy 2017 conference where Aaron
Meurer and &lt;a class="reference external" href="http://www.moorepants.info/"&gt;Jason Moore&lt;/a&gt; will be giving
a tutorial on code-generation with SymPy. They've asked me to join
forces with them and I've happily accepted that offer and am looking
forward to working on the tutorial material and teaching fellow
developers and researchers in the scientific python community about
how to leverage SymPy for code generation.&lt;/p&gt;
&lt;p&gt;Next blog post will most likely be a bit more technical, but I thought
it was important to give some background on what motivates this effort
and what the goal is.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://arif7blog.wordpress.com/?p=62</guid>
      <author>Arif Ahmed (ArifAhmed1995)</author>
      <title>Arif Ahmed (ArifAhmed1995): Week 1 Report(May 24 &#x2013; June 2) : The 2D prototype</title>
      <pubDate>Sat, 03 Jun 2017 00:39:01 GMT</pubDate>
      <link>https://arif7blog.wordpress.com/2017/06/03/week-1-reportmay-24-june-2-the-2d-prototype/</link>
      <description>&lt;p&gt;&lt;span style="color: #000000;"&gt;As per the timeline, I spent the week writing a prototype for the 2D use case.&lt;/span&gt; &lt;a href="https://github.com/sympy/sympy/pull/12673/files" rel="noopener noreferrer" target="_blank"&gt;Here&lt;/a&gt; &lt;span style="color: #000000;"&gt;is the current status of the implementation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;At the time of writing this blog post, the prototype mostly works but fails for one of the test cases. I haven&amp;#8217;t used a debugger on it yet but will get around to fixing it today. The main agenda for the next week should be to improve this prototype and make it more robust and scalable. &lt;/span&gt;&lt;span style="color: #000000;"&gt;Making it robust would mean that the implementation need not require a naming convention for the axes and can handle more boundary cases.&lt;br /&gt;
Scalability would refer to implementing in a way which works reasonably fast for large input data. It would also mean designing the functions in a use case independent way so that they could be re-used for the 3-Polytopes. The simplest example would be the &lt;span style="color: #3366ff;"&gt;&lt;a href="https://github.com/ArifAhmed1995/sympy/blob/daa69f291fb0cd5b7ba0e26ed81aa9be05b46150/sympy/integrals/intpoly.py#L374" rel="noopener noreferrer" target="_blank"&gt;norm&lt;/a&gt; &lt;span style="color: #000000;"&gt;function. It works for both 2D and 3D points. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: #000000;"&gt;Currently, some parts of the implementation are hacky and depend upon denoting the axes by specific symbols namely&lt;/span&gt; &lt;span style="color: #993366;"&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/span&gt; &lt;span style="color: #000000;"&gt;and&lt;/span&gt; &lt;span style="color: #993366;"&gt;&lt;strong&gt;y&lt;span style="color: #000000;"&gt;. &lt;/span&gt;&lt;/strong&gt;&lt;span style="color: #000000;"&gt;That would be the main focus for the beginning of Week 2. Let&amp;#8217;s take a look at the methods implemented and their respective shortcomings. &lt;/span&gt;&lt;span style="color: #000000;"&gt;The methods currently implemented are :&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;1. &lt;span style="color: #003366;"&gt;polytope_integrate&lt;/span&gt; :&amp;#160;This is the main function which calls integration_reduction which further calls almost everything else. Mathematically, this function is the first application of the Generalized Stokes Theorem. Integration over the 2-Polytope surface is related to integration over it&amp;#8217;s facets (lines in this use case). Nothing much to change here.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;2.&lt;span style="color: #000080;"&gt; integration_reduction&lt;/span&gt; : This one is the second application of the Stokes Theorem. Integration over facets (lines) is related to evaluation of the function at the vertices. The implementation can be made more robust by avoiding accessing the values of the best_origin by the index and instead accessing it by key. One workaround would be to assign the Symbol &amp;#8216;&lt;span style="color: #993300;"&gt;x&lt;/span&gt;&amp;#8216; to the independent variable and &amp;#8216;&lt;span style="color: #993300;"&gt;y&lt;/span&gt;&amp;#8216; to the dependent one. In the code, all dictionary accesses will be done with these symbols. This offers scalability as well. An extra Symbol &amp;#8216;&lt;span style="color: #993300;"&gt;z&lt;/span&gt;&amp;#8216; will suffice to denote the third axis variable for the 3D use case.&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;3. &lt;span style="color: #000080;"&gt;hyperplane_parameters&lt;/span&gt; :&amp;#160; This function returns the values of the hyperplane parameters of which the facets are a part of. I can&amp;#8217;t see improvements to be made with respect to the 2D use case, but that may change with the new API.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;4. &lt;span style="color: #000080;"&gt;best_origin&lt;/span&gt; : This function returns a point on the line for which the vector inner product between the divergence of the homogeneous polynomial and that point yields a polynomial of least degree.&lt;/span&gt; &lt;span style="color: #000000;"&gt;This function is very much dependent on the naming scheme of the axes but this issue can be circumvented by &lt;/span&gt;&lt;span style="color: #000000;"&gt;assigning symbols as explained above.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;5. &lt;span style="color: #000080;"&gt;decompose&lt;/span&gt; : This function works perfectly for all test data. However, I&amp;#8217;ll see if it can be made faster. Will be important for scaling up-to polynomials containing large number of terms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;6. &lt;span style="color: #000080;"&gt;norm&lt;/span&gt; : This is a really simple function. The only reason to change it&amp;#8217;s code would be adding support for different representations of points.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;7. &lt;span style="color: #000080;"&gt;intersection, is_vertex&lt;/span&gt; : Both of these methods are simple to write and don&amp;#8217;t require any further changes for the 2D case (at least as far as I can see).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;9. &lt;span style="color: #000080;"&gt;plot_polytope, plot_polynomial&lt;/span&gt; : These are simple plotting functions to help visualize the polytope and polynomial respectively. If extra features for the plots are required then suitable changes to code can be made.&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;After I get all the tests for the 2D prototype to pass, I&amp;#8217;ll write a Jupyter notebook and add it to the examples/notebooks folder of SymPy. As recommended by Ondrej, it should contain examples along with some plots and description of whatever basic API exists now.&lt;br /&gt;
The main focus for Week 2 should be : &lt;/span&gt;&lt;br /&gt;
1 &amp;gt; Get the prototype to pass all test cases (should be completed really soon).&lt;br /&gt;
2 &amp;gt; Make the notebook and discuss a better API for the 2D use case.&lt;br /&gt;
3 &amp;gt; Implement the final 2D API and write any tests for it.&lt;br /&gt;
3 &amp;gt; Discuss how to extend to the 3D use case (Implementation and API).&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/arif7blog.wordpress.com/62/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/arif7blog.wordpress.com/62/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=arif7blog.wordpress.com&amp;#038;blog=126429718&amp;#038;post=62&amp;#038;subd=arif7blog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/week-1/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): Week 1</title>
      <pubDate>Fri, 02 Jun 2017 22:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/week-1/</link>
      <description>&lt;p&gt;My first task, which corresponds to GSoC was create three classes, Curl, Divergence, Gradient. They create object which are unevaluated mathematical expression. Sometimes it&amp;rsquo;s better working on such expression, for example when we wants to check some identity. We have to check if it&amp;rsquo;s true for every possible vector. We have still some work here, because in next step we want to create abstract vector expression. There is one open PR corresponding to described task:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/06/02/Coding-period-starts</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): Coding period starts</title>
      <pubDate>Fri, 02 Jun 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/06/02/Coding-period-starts.html</link>
      <description>&lt;p&gt;Community bonding period is completed and coding period started on 31st May.&lt;/p&gt;

&lt;p&gt;Our original plan was to rewrite the pattern matcher for SymPy and generate decision tree for Rubi rules from &lt;code class="highlighter-rouge"&gt;Downvalues[]&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/Upabjojr/RUBI_integration_rules/master/RUBI_DownValues_FullForm.txt"&gt;generated&lt;/a&gt; by Francesco.&lt;/p&gt;

&lt;p&gt;Aaron gave us a link to &lt;a href="https://arxiv.org/pdf/1705.00907.pdf"&gt;this&lt;/a&gt; paper by Manuel Krebber. Pattern matching algorithms discussed in the paper are implemented in &lt;a href="https://github.com/HPAC/matchpy"&gt;MatchPy&lt;/a&gt; library.&lt;/p&gt;

&lt;h4 id="matchpy"&gt;MatchPy&lt;/h4&gt;

&lt;p&gt;MatchPy uses &lt;code class="highlighter-rouge"&gt;discrimination net&lt;/code&gt;&amp;#8217;s to do many-to-one matching(i.e. matching one subject to multiple patterns). MatchPy generates its own discrimination net as we add patterns to its &lt;code class="highlighter-rouge"&gt;ManyToOneReplacer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Discrimination nets can be more efficient than a decision tree hence we decided to use MatchPy as the pattern matcher for Rubi. I wrote basic matching programs which implements few Rubi rules MatchPy.&lt;/p&gt;

&lt;p&gt;I found the following issues with MatchPy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MatchPy cannot be directly added to SymPy because it is written in Python3.6(whereas SymPy supports Python2 also).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It lacked mathematical operations on its &lt;code class="highlighter-rouge"&gt;Symbols&lt;/code&gt; due to which it becomes difficult to implement Rubi constrains. A workaround this issue is to &lt;code class="highlighter-rouge"&gt;sympify&lt;/code&gt; the expression and do calculations in SymPy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MatchPy uses external libraries such as &lt;code class="highlighter-rouge"&gt;Multiset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;enum&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;typing&lt;/code&gt;. SymPy does not encourage using external libraries in its code. Those modules need to be reimplemented into SymPy if we are going to directly import MatchPy code into SymPy.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Re-implementing MatchPy algorithms in SymPy can be very challenging and time consuming task as I am not very familiar with the algorithms used in MatchPy.&lt;/p&gt;

&lt;p&gt;I used &lt;code class="highlighter-rouge"&gt;3to2&lt;/code&gt; to convert MatchPy code to Python2 syntax. Majority tests are passing in Python2 Syntax. I am currently trying to get the code working in Python2.&lt;/p&gt;

&lt;p&gt;In coming week I will import MatchPy code to SymPy directly. If there are some setbacks in this approach, I will reimplement MatchPy algorithms in SymPy.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=44</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): Week 1: time to start</title>
      <pubDate>Thu, 01 Jun 2017 17:45:56 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/06/01/week-1/</link>
      <description>&lt;p&gt;Greetings!&lt;/p&gt;
&lt;p&gt;Community bonding period is officially over, I have been taking help from my mentors and ex-gsocer friends. This would be my first experience on working on parsing so I am very excited. &amp;#160;I have taken help from Francesco to get a better idea about my work and we have even discussed it with Ondrej. &amp;#8204;The work is divided between us (me and Arihant) .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#8204;1st person: translates the code of MatchPy.&lt;/li&gt;
&lt;li&gt;2nd person: creates a translator for the RUBI rules (first to MatchPy, then to the new code that person 1 will develop).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#8204;I have taken second persons work preparing a translator to transform downvalues of the RUBI rules to MatchPy.&lt;br /&gt;
&amp;#8204;I have been reading more on regular expressions in python and now I have sufficient knowledge to head start.&amp;#160;Francesco had provided a basic parser I will be trying to extend that and translate rules in small bits.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/nesar2017.wordpress.com/44/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nesar2017.wordpress.com/44/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=nesar2017.wordpress.com&amp;#038;blog=126779945&amp;#038;post=44&amp;#038;subd=nesar2017&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/05/30/Community-Bonding-End-Report</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): Community Bonding - End Report</title>
      <pubDate>Tue, 30 May 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/05/30/Community-Bonding-End-Report/</link>
      <description>&lt;p&gt;Greetings!&lt;/p&gt;

&lt;p&gt;The Community Bonding period is officially closed and its time for the official coding period to begin. I had a great time reaching out to other fellow GSoCers in the community as well as conversing with my mentors over the project plans.&lt;/p&gt;

&lt;h3 id="the-tasks"&gt;The Tasks&lt;/h3&gt;
&lt;p&gt;Last week, I had mentioned that I&amp;#8217;d be working on porting over &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;Parsing&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Physics&lt;/code&gt; modules. However, as pointed out by &lt;a href="https://ShikharJ.github.io/github.com/isuruf"&gt;Isuru&lt;/a&gt;, there was no real gain in working on &lt;code class="highlighter-rouge"&gt;Parsing&lt;/code&gt;, as we already had a parser in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;. Hence, my focus shifted on &lt;code class="highlighter-rouge"&gt;Physics&lt;/code&gt; and its sub-modules. As such, I&amp;#8217;ve pushed in two PRs, covering &lt;code class="highlighter-rouge"&gt;ContinuumMechanics&lt;/code&gt;(&lt;a href="https://github.com/sympy/sympy/pull/12660"&gt;#12660&lt;/a&gt;) and &lt;code class="highlighter-rouge"&gt;Hep&lt;/code&gt;(&lt;a href="https://github.com/sympy/sympy/pull/12655"&gt;#12655&lt;/a&gt;) sub-modules to keep a track of the work. I&amp;#8217;ve also been able to weed out most of the compatibility issues in the standalone files of &lt;code class="highlighter-rouge"&gt;Physics&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Though I had planned on finishing these tasks within the Community Bonding period itself, I realised that the &lt;code class="highlighter-rouge"&gt;Quantum&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Optics&lt;/code&gt; sub-modules require a bit more work than what I had originally planned for the time. Nevertheless, I started off implementing &lt;code class="highlighter-rouge"&gt;Relationals&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;, which was a task originally planned for the first week of the coding period. The PR(&lt;a href="https://github.com/symengine/symengine/pull/1276"&gt;#1276&lt;/a&gt;) is currently under review, and would be ready to merge within a day or two. The time gained thus will be devoted to the previously mentioned work, apart from what was originally planned in my proposal.&lt;/p&gt;

&lt;p&gt;Besides, I also sent a PR(&lt;a href="https://github.com/symengine/symengine/pull/1277"&gt;#1277&lt;/a&gt;) fixing some minor grammatical errors which I stumbled upon in the codebase.&lt;/p&gt;

&lt;p&gt;See you next week! Goodbye!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/05/29/start</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): The start</title>
      <pubDate>Mon, 29 May 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/05/29/start/</link>
      <description>&lt;p&gt;GSoC officially starts tomorrow but I&amp;#8217;ve already begun working on my project because of exams later in June. So far everything is going according to plan. I&amp;#8217;ve implemented the &lt;code class="highlighter-rouge"&gt;subgroup()&lt;/code&gt; method for &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt;s and &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;s as well as &lt;code class="highlighter-rouge"&gt;is_subgroup()&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;s. That was straight-forward except this one moment where I wanted to avoid creating a new instance of &lt;code class="highlighter-rouge"&gt;FreeGroup&lt;/code&gt; and rewriting the relators returned by &lt;code class="highlighter-rouge"&gt;reidemeister_presentation()&lt;/code&gt; in terms of this new instance because it seemed inelegant. I spend quite a while trying to come up with a better way and even started thinking of reimplementing the &lt;code class="highlighter-rouge"&gt;FreeGroup&lt;/code&gt; class but after a discussion with one of my mentors on SymPy&amp;#8217;s &lt;a href="https://gitter.im/sympy/GroupTheory"&gt;Group Theory channel&lt;/a&gt; decided to create a new instance after all. It shouldn&amp;#8217;t affect the performance too much anyway and reimplementing a whole class would be quite extreme.&lt;/p&gt;

&lt;p&gt;Then I looked into improving the techniques for simplifying the presentation of subgroups. I hadn&amp;#8217;t been sure about whether there would be much to do but actually I found that the code had quite a few redundant bits and there were some more serious potential problems with it, like a loop that deleted elements of the list over which it iterated. I ended up rewriting it to be more readable and making sure the list of relators is traversed properly. Additionally, the &lt;code class="highlighter-rouge"&gt;reidemeister_presentation()&lt;/code&gt; code used to apply the simplification techniques 20 times in a for loop which in some cases would be excessive and in others not enough - I replaced it with a while loop so that the representaion is simplified until no further improvement is achieved.&lt;/p&gt;

&lt;p&gt;While I was at it, I found myself modifying some of the &lt;code class="highlighter-rouge"&gt;FreeGroupElement&lt;/code&gt; methods either to extend their functionality or because I noticed that their implementation would lead to bugs in some special cases. I also added a couple of new methods for manipulation of group words. Intuitively, &lt;code class="highlighter-rouge"&gt;FreeGroupElement&lt;/code&gt; words are just symbolic expressions on non-commutative (in the general case) symbols that only admit integer powers. But their implementation in SymPy is different from the regular symbolic expressions which are instances of the &lt;code class="highlighter-rouge"&gt;Expr&lt;/code&gt; class. As a result, the &lt;code class="highlighter-rouge"&gt;Expr&lt;/code&gt; methods, e.g. &lt;code class="highlighter-rouge"&gt;subs()&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;simplify()&lt;/code&gt; can&amp;#8217;t be used with them directly (though of course, theoretically, one could build an equivalent symbolic expression out of a &lt;code class="highlighter-rouge"&gt;FreeGroupElement&lt;/code&gt;, apply the desired &lt;code class="highlighter-rouge"&gt;Expr&lt;/code&gt; method, make sure no fractional powers appear and go back) so equivalent methods have to be written separately. I have extended the group word substitution to probably all (or at least most) cases one might need. Simplification, on the other hand, is still missing. That said, the &lt;code class="highlighter-rouge"&gt;simplify()&lt;/code&gt; method of the &lt;code class="highlighter-rouge"&gt;Exrp&lt;/code&gt; class doesn&amp;#8217;t currently do much in terms of simplification of non-commutative expressions so it couldn&amp;#8217;t be used anyway (perhaps, some other method would be appropriate but I&amp;#8217;m not sure which). However, unlike instances of &lt;code class="highlighter-rouge"&gt;Expr&lt;/code&gt;, group elements only involve one binary operation so the problem is somewhat easier (conceptually). The only real simplification one can make is finding powers of subwords and collecting them into one thing. Say, if we have the word &lt;code class="highlighter-rouge"&gt;x*y*x*y*x*y&lt;/code&gt;, a simpler way to write it would be &lt;code class="highlighter-rouge"&gt;(x*y)**3&lt;/code&gt; and it would be good to have that done automatically. I might work on implementing that sort of thing somewhere along the way because then simplifications for &lt;code class="highlighter-rouge"&gt;reidemeister_presentation()&lt;/code&gt; can be improved even further, and the output relators will be more readable. Plus it&amp;#8217;s just a nice feature to have, though at present I&amp;#8217;m not sure about how exactly I would go about that efficiently and how to best store the simplification so that it doesn&amp;#8217;t need to be done again.&lt;/p&gt;

&lt;p&gt;The PRs I&amp;#8217;ve sent so far are &lt;a href="https://github.com/sympy/sympy/pull/12658"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/12681"&gt;here&lt;/a&gt; and are currently still being reviewed.&lt;/p&gt;

&lt;p&gt;The next thing I&amp;#8217;m going to work on are a couple of methods that could be used to determine if a given &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; is infinite. The one I plan to do first is considering the abelianisation of the group, writing the relators in the form of an integer matrix and essentially finding its Smith Normal form. This will probably occupy me for the next week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://arif7blog.wordpress.com/?p=30</guid>
      <author>Arif Ahmed (ArifAhmed1995)</author>
      <title>Arif Ahmed (ArifAhmed1995): Week 1 : The Beginning</title>
      <pubDate>Thu, 25 May 2017 21:10:32 GMT</pubDate>
      <link>https://arif7blog.wordpress.com/2017/05/25/week-1-the-beginning/</link>
      <description>&lt;p style="text-align: justify;"&gt;After reaching home on May 18, I decided not to waste any more time and contacted my mentor(&lt;span style="color: #99cc00;"&gt;&lt;a href="http://www.lanl.gov/expertise/profiles/view/ondrej-certik" rel="noopener noreferrer" style="color: #99cc00;" target="_blank"&gt;Ondrej Certik&lt;/a&gt;&lt;/span&gt;). He suggested that we should have a discussion with &lt;span style="color: #3366ff;"&gt;&lt;a href="http://dilbert.engr.ucdavis.edu/~suku/" style="color: #3366ff;"&gt;Prof.N.Sukumar&lt;/a&gt;&lt;/span&gt; about the project and develop a plan for the summer.&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;After the Skype call, a basic timeline was made by Ondrej. It was decided that firstly a basic working prototype to handle the 2D use case (i.e. the capability to integrate a bivariate polynomial over a 2-Polytope) should be written. It would be fine to make some assumptions about the input data initially so as to have some working code as soon as possible. Eventually the implementation for the 2D case should be made robust before moving onto the 3D case.&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;I began by implementing some of the helper functions required for the main algorithm. You can see the current status of the implementation &lt;span style="color: #ffcc00;"&gt;&lt;a href="https://github.com/sympy/sympy/pull/12673/files" rel="noopener noreferrer" style="color: #ffcc00;" target="_blank"&gt;here.&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;It&amp;#8217;s been 2 days since the discussion and I feel that I should pick up the pace now and get the basic 2D prototype working soon.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/arif7blog.wordpress.com/30/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/arif7blog.wordpress.com/30/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=arif7blog.wordpress.com&amp;#038;blog=126429718&amp;#038;post=30&amp;#038;subd=arif7blog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/05/25/Community-Bonding-Period</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Community Bonding Period</title>
      <pubDate>Thu, 25 May 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/05/25/Community-Bonding-Period/</link>
      <description>&lt;p&gt;I am selected for GSoC&amp;#8217;17 with SymPy. I have been alotted &lt;a href="https://github.com/sumith1896"&gt;Sumith Kulal&lt;/a&gt;, &lt;a href="https://github.com/srajangarg"&gt;Srajan Garg&lt;/a&gt;, &lt;a href="https://github.com/shivamvats"&gt;Shivam Vats&lt;/a&gt;, &lt;a href="https://github.com/nishnik"&gt;Nishant Nikhil&lt;/a&gt; and &lt;a href="https://github.com/aktech"&gt;Amit Kumar&lt;/a&gt; as my official mentors. My &lt;a href="https://ranjithkumar007.github.io/docs.google.com/document/d/1yCicYJ0hfS8APcXIqoBOacx8n2HnjfSfR7q4OshLGYI/"&gt;Project&lt;/a&gt; is to implement Solvers for SymEngine.&lt;/p&gt;

&lt;p&gt;Time-line as mentioned in the proposal upto First Evaluations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Week-1 : Flint wrappers for factorisation.&lt;/li&gt;
  &lt;li&gt;Week-2 and 3: Improve Sets Module.&lt;/li&gt;
  &lt;li&gt;Week-4: Implement lower degree polynomial solvers and helper function for cyclotomic polynomials.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After my summer vacation ends, progress of the project might get slow; So, I will try to be ahead of the proposed timeline by atleast one week.&lt;/p&gt;

&lt;p&gt;During the Community Bonding period, I went through the &lt;a href="http://www.flintlib.org/flint-2.5.pdf"&gt;documentation&lt;/a&gt; of FLINT library, precisely the required functions for wrapping factorisation of polynomials. The Major Problem I came across is the lack of &lt;a href="https://github.com/wbhart/flint2/blob/trunk/fmpz_poly_factor.h#L86"&gt;fmpz_poly_factor()&lt;/a&gt; function in FLINT&amp;#8217;s latest release 2.5.2. Going by the Suggestion made by &lt;a href="https://github.com/isuruf"&gt;isuruf&lt;/a&gt;, I updated Travis to use the development branch of FLINT along with its latest release. This work is done in &lt;a href="https://github.com/symengine/symengine/pull/1275"&gt;#1275&lt;/a&gt;. This &lt;a href="https://github.com/symengine/symengine/pull/1274"&gt;#1274&lt;/a&gt; PR wraps up the FLINT factorisation. Before 31st May, I will try to get this &lt;a href="https://github.com/symengine/symengine/pull/1274"&gt;PR&lt;/a&gt; merged in.&lt;/p&gt;

&lt;p&gt;Apart from the this, I worked on this &lt;a href="https://github.com/symengine/symengine/pull/1258"&gt;PR&lt;/a&gt; to implement JuliaStrPrinter for nan and infs.&lt;/p&gt;

&lt;p&gt;After Coding period starts(from 31st May), I will start working on Improving Sets module.&lt;/p&gt;

&lt;p&gt;See you soon .&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/blogs/Gsoc2017-with-sympy</guid>
      <author>Gaurav Dhingra (gxyd)</author>
      <title>Gaurav Dhingra (gxyd): GSoC 2017: Symbolic Integration</title>
      <pubDate>Wed, 24 May 2017 00:00:00 GMT</pubDate>
      <link>https://gxyd.github.io/blogs/Gsoc2017-with-sympy/</link>
      <description>&lt;p&gt;GSoC 2017: Symbolic Integration&lt;/p&gt;

&lt;p&gt;I applied for Google Summer of Code again this year, and my project on symbolic integration has been accepted. Like last year, my mentors are &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt;(SymPy lead developer) and &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt;. The proposal I submitted can be found here &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2017-Application-Gaurav-Dhingra:-Risch-algorithm-for-symbolic-integration"&gt;GSoC 2017 proposal: Symbolic Integration&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Aaron himself worked on Symbolic Integration in GSoC 2010, and he started the implementation of transcendental functions integration and a good part of transcendental function integration was done (main resource being &lt;em&gt;Symbolic Integration I: Transcendental Function by Manuel Bronstein&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then in the year 2013, Chetna Gupta continued work on transcendental function integration as a part of her GSoC project. And still some part of transcendental function integration remains.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I have liked to mention one of &amp;#8216;things&amp;#8217; with the current integration module is sometime people get deceived with the results. Consider the integration of function &lt;em&gt;1/(x&lt;strong&gt;2 + a&lt;/strong&gt;2)&lt;/em&gt;. Most of would expect the output to be &lt;em&gt;atan(x/a)/a&lt;/em&gt;. But with SymPy we get:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In [11]: integrate(1/(x**2 + a**2), x)
Out[11]: (-I*log(-I*a + x)/2 + I*log(I*a + x)/2)/a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which for a moment looks wrong, but actually the answer returned by SymPy is
not wrong (or is actually right mathematically). Since the answer returned by
SymPy is logarithmic form of &lt;em&gt;atan&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;$atan(x) = I*log((-I*x + 1)/(I*x + 1))/2$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the comes the main part, what would I be working on? The first main thing on
which I will be working on is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Completing the work on transcendental function integration: which includes&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;writing a lot of tests for functions present in prde.py (Parametric Risch
 Differential Equation), rde.py (Risch differential equation).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;working on trigonometric extensions.
 example:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.integrals.risch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;risch_integrate&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;risch_integrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"/home/gxyd/foss/sympy/sympy/integrals/risch.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1677&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;risch_integrate&lt;/span&gt;
    &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rewrite_complex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rewrite_complex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"/home/gxyd/foss/sympy/sympy/integrals/risch.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Trigonometric extensions are not "&lt;/span&gt;
&lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Trigonometric&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;supported&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yet&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;as you can see it raises the &lt;strong&gt;NotImplementedError&lt;/strong&gt;. It doesn&amp;#8217;t mean
that SymPy can&amp;#8217;t evaluate the integral of simple function like &lt;em&gt;sin(x)&lt;/em&gt;.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt; ```
 In 1: from sympy import *
 In [2]: integrate(sin(x), x)
 Out[2]: -cos(x)
 ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since I have started using PDb as a debugger (thanks to Kalevi) instead
of the primitive &lt;strong&gt;print&lt;/strong&gt; command. I will now explain how a function like
 &lt;em&gt;sin(x)&lt;/em&gt; is currently integrated.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="pdb-working-with-integration"&gt;Pdb working with integration&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;First go into SymPy&amp;#8217;s root directory and start the IPython or bin/isympy session.&lt;/li&gt;
  &lt;li&gt;Then import pdb module into your session with &lt;em&gt;import pdb&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Import the function from the tests file which you want to debug/analyse with
command for example in my I will be importing test case from the integral module&amp;#8217;s
test directory with &lt;em&gt;from sympy.integrals.tests.test_integrals import test_halo&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PDb important commands: You can use as command the word outside the bracket or
including the one outside bracket with word inside it.&lt;/p&gt;

&lt;p&gt;s(tep): You can either type &lt;em&gt;s&lt;/em&gt; or &lt;em&gt;step&lt;/em&gt; on PDb command prompt (i.e. (Pdb)),
        this command is often used to look into its execution. Whenever you find
        something interesting (function or class) use this command.&lt;/p&gt;

&lt;p&gt;b(reak): setting a break point. Often executed in conjunction with &lt;em&gt;continue&lt;/em&gt;, it
          sets a breakpoint (see wiki article for it). An example would be its usage
          in seeing the execution of &lt;i&gt;DifferentialExtension&lt;/i&gt; object.
          Example: (Pdb) b sympy/integrals/risch.py:196
                   Breakpoint 1 at /home/gxyd/foss/sympy/sympy/integrals/risch.py:19&lt;/p&gt;

&lt;p&gt;c(ont(inue)): Often used in conjunction with &lt;i&gt;break&lt;/i&gt; command. It continues the
              execution i.e. doesn&amp;#8217;t show any command(or code) on Pdb until the Pdb
              hits the set breakpoint or the function returns something to the main
              IPython session as output.&lt;/p&gt;

&lt;p&gt;n(ext): continue to the next line.
l(ist): shows a limited source code of current line execution.
p: prints the object. Used in printing of variable/object value.&lt;/p&gt;

&lt;p&gt;There are many more commands like &lt;i&gt;j&lt;/i&gt;, &lt;i&gt;w&lt;/i&gt;, which I haven&amp;#8217;t used often.
(For broader and good understanding of these commands use the trivial ?x where &lt;i&gt;x&lt;/i&gt;
is the command under consideration).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id="an-example-session"&gt;An example session:&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;gxyd@stallman:~/foss/sympy$ bin/isympy
IPython console for SymPy 1.0.1.dev (Python 3.6.0-64-bit) (ground types: python)

These commands were executed:
&amp;gt;&amp;gt;&amp;gt; from __future__ import division
&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; x, y, z, t = symbols('x y z t')
&amp;gt;&amp;gt;&amp;gt; k, m, n = symbols('k m n', integer=True)
&amp;gt;&amp;gt;&amp;gt; f, g, h = symbols('f g h', cls=Function)
&amp;gt;&amp;gt;&amp;gt; init_printing()

Documentation can be found at http://docs.sympy.org/dev

In [1]: import pdb

In [2]: from sympy.integrals.tests.test_integrals import test_halo

In [3]: pdb.run('test_halo()')
&amp;gt; &amp;lt;string&amp;gt;(1)&amp;lt;module&amp;gt;()
(Pdb) s
--Call--
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/tests/test_integrals.py(1182)test_halo()
-&amp;gt; def test_halo():
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/tests/test_integrals.py(1183)test_halo()
-&amp;gt; from sympy.abc import x
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/tests/test_integrals.py(1184)test_halo()
-&amp;gt; assert integrate(sin(x), x) == -cos(x)
(Pdb) s
--Call--
&amp;gt; /home/gxyd/foss/sympy/sympy/core/basic.py(105)__hash__()
-&amp;gt; def __hash__(self):
(Pdb) b sympy/integrals/integrals.py:1287
Breakpoint 1 at /home/gxyd/foss/sympy/sympy/integrals/integrals.py:1287
(Pdb) c
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1287)integrate()
-&amp;gt; meijerg = kwargs.pop('meijerg', None)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1288)integrate()
-&amp;gt; conds = kwargs.pop('conds', 'piecewise')
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1289)integrate()
-&amp;gt; risch = kwargs.pop('risch', None)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1290)integrate()
-&amp;gt; manual = kwargs.pop('manual', None)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1291)integrate()
-&amp;gt; integral = Integral(*args, **kwargs)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1293)integrate()
-&amp;gt; if isinstance(integral, Integral):
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1294)integrate()
-&amp;gt; return integral.doit(deep=False, meijerg=meijerg, conds=conds,
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(1295)integrate()
-&amp;gt; risch=risch, manual=manual)
(Pdb) s
--Call--
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(354)doit()
-&amp;gt; def doit(self, **hints):
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(374)doit()
-&amp;gt; if not hints.get('integrals', True):
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(377)doit()
-&amp;gt; deep = hints.get('deep', True)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(378)doit()
-&amp;gt; meijerg = hints.get('meijerg', None)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(379)doit()
-&amp;gt; conds = hints.get('conds', 'piecewise')
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(380)doit()
-&amp;gt; risch = hints.get('risch', None)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(381)doit()
-&amp;gt; manual = hints.get('manual', None)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(383)doit()
-&amp;gt; if conds not in ['separate', 'piecewise', 'none']:
(Pdb) p conds
'piecewise'
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(387)doit()
-&amp;gt; if risch and any(len(xab) &amp;gt; 1 for xab in self.limits):
(Pdb) p risch
None
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(391)doit()
-&amp;gt; if self.is_zero:
(Pdb) p self
Integral(sin(x), x)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(395)doit()
-&amp;gt; function = self.function
(Pdb) p self.function
sin(x)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(396)doit()
-&amp;gt; if deep:
(Pdb) p deep
False
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(398)doit()
-&amp;gt; if function.is_zero:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(401)doit()
-&amp;gt; if isinstance(function, MatrixBase):
(Pdb) p function
sin(x)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(406)doit()
-&amp;gt; undone_limits = []
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(408)doit()
-&amp;gt; ulj = set()
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(409)doit()
-&amp;gt; for xab in self.limits:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(412)doit()
-&amp;gt; if len(xab) == 1:
(Pdb) p self.limits
((x,),)
(Pdb) p xab
(x,)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(413)doit()
-&amp;gt; uli = set(xab[:1])
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(422)doit()
-&amp;gt; if xab[0] in ulj or any(v[0] in uli for v in undone_limits):
(Pdb) p uli
{x}
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(438)doit()
-&amp;gt; def try_meijerg(function, xab):
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(462)doit()
-&amp;gt; meijerg1 = meijerg
(Pdb) p meijerg
None
(Pdb) p xab
(x,)
(Pdb) l
457  	                            ret = f, cond
458  	                        else:
459  	                            ret = f
460  	                return ret
461  	
462  -&amp;gt;	            meijerg1 = meijerg
463  	            if len(xab) == 3 and xab[1].is_real and xab[2].is_real \
464  	                and not function.is_Poly and \
465  	                    (xab[1].has(oo, -oo) or xab[2].has(oo, -oo)):
466  	                ret = try_meijerg(function, xab)
467  	                if ret is not None:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(463)doit()
-&amp;gt; if len(xab) == 3 and xab[1].is_real and xab[2].is_real \
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(480)doit()
-&amp;gt; if meijerg1 is False and meijerg is True:
(Pdb) p meijerg1
None
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(483)doit()
-&amp;gt; antideriv = self._eval_integral(
(Pdb) p self.
*** SyntaxError: unexpected EOF while parsing
(Pdb) p self
Integral(sin(x), x)
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(484)doit()
-&amp;gt; function, xab[0],
(Pdb) s
--Call--
&amp;gt; /home/gxyd/foss/sympy/sympy/core/containers.py(40)__getitem__()
-&amp;gt; def __getitem__(self, i):
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/core/containers.py(41)__getitem__()
-&amp;gt; if isinstance(i, slice):
(Pdb) r
--Return--
&amp;gt; /home/gxyd/foss/sympy/sympy/core/containers.py(44)__getitem__()-&amp;gt;x
-&amp;gt; return self.args[i]
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(485)doit()
-&amp;gt; meijerg=meijerg1, risch=risch, manual=manual,
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(486)doit()
-&amp;gt; conds=conds)
(Pdb) s
--Call--
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(651)_eval_integral()
-&amp;gt; def _eval_integral(self, f, x, meijerg=None, risch=None, manual=None,
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(735)_eval_integral()
-&amp;gt; from sympy.integrals.deltafunctions import deltaintegrate
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(736)_eval_integral()
-&amp;gt; from sympy.integrals.singularityfunctions import singularityintegrate
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(737)_eval_integral()
-&amp;gt; from sympy.integrals.heurisch import heurisch, heurisch_wrapper
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(738)_eval_integral()
-&amp;gt; from sympy.integrals.rationaltools import ratint
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(739)_eval_integral()
-&amp;gt; from sympy.integrals.risch import risch_integrate
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(741)_eval_integral()
-&amp;gt; if risch:
(Pdb) p risch
None
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(747)_eval_integral()
-&amp;gt; if manual:
(Pdb) p manual
None
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(762)_eval_integral()
-&amp;gt; if isinstance(f, Poly) and not meijerg:
(Pdb) p f
sin(x)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(766)_eval_integral()
-&amp;gt; if f.func is Piecewise:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(770)_eval_integral()
-&amp;gt; if not f.has(x):
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(774)_eval_integral()
-&amp;gt; poly = f.as_poly(x)
(Pdb) p sin(x).as_poly(x)
*** NameError: name 'sin' is not defined
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(775)_eval_integral()
-&amp;gt; if poly is not None and not meijerg:
(Pdb) p poly
None
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(778)_eval_integral()
-&amp;gt; if risch is not False:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(779)_eval_integral()
-&amp;gt; try:
(Pdb) p risch
None
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(780)_eval_integral()
-&amp;gt; result, i = risch_integrate(f, x, separate_integral=True, conds=conds)
(Pdb) s
--Call--
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(1569)risch_integrate()
-&amp;gt; def risch_integrate(f, x, extension=None, handle_first='log',
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(1674)risch_integrate()
-&amp;gt; f = S(f)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(1676)risch_integrate()
-&amp;gt; DE = extension or DifferentialExtension(f, x, handle_first=handle_first,
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(1677)risch_integrate()
-&amp;gt; dummy=True, rewrite_complex=rewrite_complex)
(Pdb) s
--Call--
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(165)__init__()
-&amp;gt; def __init__(self, f=None, x=None, handle_first='log', dummy=False, extension=None, rewrite_complex=False):
(Pdb) s
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(196)__init__()
-&amp;gt; if extension:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(206)__init__()
-&amp;gt; elif f is None or x is None:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(210)__init__()
-&amp;gt; from sympy.integrals.prde import is_deriv_k
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(212)__init__()
-&amp;gt; if handle_first not in ['log', 'exp']:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(218)__init__()
-&amp;gt; self.f = f
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(219)__init__()
-&amp;gt; self.x = x
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(221)__init__()
-&amp;gt; self.dummy = dummy
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(222)__init__()
-&amp;gt; self.reset()
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(223)__init__()
-&amp;gt; exp_new_extension, log_new_extension = True, True
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(224)__init__()
-&amp;gt; if rewrite_complex:
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(233)__init__()
-&amp;gt; if any(i.has(x) for i in self.f.atoms(sin, cos, tan, atan, asin, acos)):
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(234)__init__()
-&amp;gt; raise NotImplementedError("Trigonometric extensions are not "
(Pdb) n
NotImplementedError: Trigonometric extensions are not supported (yet!)
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(234)__init__()
-&amp;gt; raise NotImplementedError("Trigonometric extensions are not "
(Pdb) n
--Return--
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(234)__init__()-&amp;gt;None
-&amp;gt; raise NotImplementedError("Trigonometric extensions are not "
(Pdb) n
NotImplementedError: Trigonometric extensions are not supported (yet!)
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(1677)risch_integrate()
-&amp;gt; dummy=True, rewrite_complex=rewrite_complex)
(Pdb) n
--Return--
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/risch.py(1677)risch_integrate()-&amp;gt;None
-&amp;gt; dummy=True, rewrite_complex=rewrite_complex)
(Pdb) n
NotImplementedError: Trigonometric extensions are not supported (yet!)
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(780)_eval_integral()
-&amp;gt; result, i = risch_integrate(f, x, separate_integral=True, conds=conds)
(Pdb) n
&amp;gt; /home/gxyd/foss/sympy/sympy/integrals/integrals.py(781)_eval_integral()
-&amp;gt; except NotImplementedError:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;  As you can see it raise *NotImplemenedError* for forming the *DifferentialExtension*
  object for function f = *sin(x)*.

  I will leave it here, I think it wouldn't be an issue to continue from here.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id="todo"&gt;TODO&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am still trying to make a call to &lt;em&gt;param_rischDE&lt;/em&gt; in the function &lt;em&gt;limited_integration&lt;/em&gt;. I will write more about this in my next blog, hopefully(a big hope here from me, I have been stuck here for quite sometime and frustrated about it) will have completed this task by then.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
