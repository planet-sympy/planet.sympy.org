<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//final-report/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): GSoC 2018 Final Report</title>
      <pubDate>Tue, 14 Aug 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//final-report/</link>
      <description>&lt;p&gt;This post summarizes the work done on the Group Theory part of the combinatorics module during 2018 summers as a part of the GSoC programme</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=17</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): GSoC 2018: Autolev Parser (using ANTLRv4): Final Report</title>
      <pubDate>Sat, 11 Aug 2018 21:28:45 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/08/11/gsoc-2018-autolev-parser-using-antlrv4-final-report/</link>
      <description>&lt;h2&gt;About Me:&lt;/h2&gt;
&lt;p&gt;I am Nikhil Pappu, an undergraduate Computer Science student at the International Institute of Information Technology, Bangalore.&lt;/p&gt;
&lt;h2&gt;About the Project:&lt;/h2&gt;
&lt;p&gt;Autolev (now superseded by MotionGenesis) is a domain specific language used for symbolic multibody dynamics. The SymPy mechanics module now has enough power and functionality to be a fully featured symbolic dynamics module. The parser parses Autolev (version 4.1) code to SymPy code by making use of SymPy&amp;#8217;s math libraries and the mechanics module.&lt;/p&gt;
&lt;p&gt;The parser has been built using the &lt;a href="http://www.antlr.org/"&gt;ANTLR&lt;/a&gt; framework and its main purpose is to help former users of Autolev to get familiarized with multibody dynamics in SymPy.&lt;/p&gt;
&lt;h2&gt;The Plan:&lt;/h2&gt;
&lt;p&gt;The plan was to build a parser using ANTLR that could parse Autolev code to SymPy code.&amp;#160; Overall,&amp;#160; I think I was able to achieve most of what I had hoped for. I had faced some difficulties in some areas of the parser due to the very different nature of Autolev and Python. The parser has some issues as a result. I have specified all the details in the documentation I have written.&lt;/p&gt;
&lt;h2&gt;Work Done:&lt;/h2&gt;
&lt;p&gt;I made a parser for the Autolev language which is now a part of SymPy in the parsing module. I have written the code for the parser using the ANTLR framework. I have also included a bunch of tests for testing the rules of the parser code.&lt;/p&gt;
&lt;p&gt;The majority of the work was a part of PR &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;. I made a second PR &lt;a href="https://github.com/sympy/sympy/pull/15006"&gt;#15006&lt;/a&gt; for the changes I had made after the main PR.&lt;/p&gt;
&lt;p&gt;I have written documentation for the parser which is a part of these PRs: &lt;a href="https://github.com/sympy/sympy/pull/15046"&gt;#15046&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/15066"&gt;#15066&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/15067"&gt;#15067&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also written a PyDy for Autolev Users guide which is a part of PR &lt;a href="https://github.com/sympy/sympy/pull/15077"&gt;#15077&lt;/a&gt;. This guide is meant to be a quick reference for looking up Autolev-PyDy equivalents.&lt;/p&gt;
&lt;h2&gt;Future Work:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The parser has been built by referring to and parsing codes from the &lt;a class="reference external" href="http://web.mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf"&gt;Autolev Tutorial&lt;/a&gt; and the book &lt;em&gt;Dynamics Online: Theory and Implementation Using Autolev&lt;/em&gt;. Basically, the process involved going through each of these codes, validating the parser results and improving the rules if required to make sure the codes parsed well.
&lt;p&gt;As of now, a large number of codes of &lt;em&gt;Dynamics Online&lt;/em&gt; have been parsed. Completing all the remaining codes of the book would make the parser more complete.&lt;/li&gt;
&lt;li&gt;There are some limitations and issues with the parser and these have been discussed in the documentation. The plan is to fix these in order of priority.&lt;/li&gt;
&lt;li&gt;The parser is currently built using a kind of Concrete Syntax Tree (CST) using the &lt;a class="reference external" href="http://www.antlr.org/"&gt;ANTLR&lt;/a&gt; framework. It would be ideal to switch from a CST to an Abstract Syntax Tree (AST). This way, the parser code will be independent of the ANTLR grammar which makes it a lot more flexible. It would also be easier to make changes to the grammar and the rules of the parser.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would like to keep contributing to SymPy. I would be doing a lot of math in college especially related to data science so I would love to contribute in areas like Probability and Algebra among others. I would also like to help newcomers feel comfortable with the environment.&lt;/p&gt;
&lt;h2&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;I would like to thank my mentors &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt; and &lt;a href="https://github.com/moorepants"&gt;Jason Moore&lt;/a&gt; for believing in me and taking time out from their busy schedules to guide me throughout the project. I would also like to thank &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt; for looking over GSoC as the org admin and making sure that we all had a great experience working with SymPy.&lt;/p&gt;
&lt;h2&gt;Links:&lt;/h2&gt;
&lt;p&gt;Main PR: &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Updated parser code PR: &lt;a href="https://github.com/sympy/sympy/pull/15006"&gt;#15006&lt;/a&gt; and&lt;a href="https://github.com/sympy/sympy/pull/15013"&gt; #15013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Documentation PRs: &lt;a href="https://github.com/sympy/sympy/pull/15046"&gt;#15046&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/15066"&gt;#15066&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/15067"&gt;#15067&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyDy for Autolev Users guide PR: &lt;a href="https://github.com/sympy/sympy/pull/15077"&gt;#15077&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Weekly Blog link: &lt;a href="https://nkhlpappu.wordpress.com/"&gt;https://nkhlpappu.wordpress.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=15</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 03 Aug 2018 20:36:26 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/08/03/autolev-parser-status-update-4/</link>
      <description>&lt;p&gt;I have made some changes to the parser code to parse more files since &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt; has been merged. I have also made the changes suggested in that PR after it had been merged. I have opened a new PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/15006/"&gt;#15006&lt;/a&gt;&amp;#160;for the updated parser code. I have also opened &lt;a href="https://github.com/sympy/sympy/pull/15013"&gt;#15013&lt;/a&gt;&amp;#160;to include tests for physics functions which I didn&amp;#8217;t do in the initial PR. The GitLab repo autolev-test-examples is in good shape now and is part of the sympy user.&lt;/p&gt;
&lt;p&gt;I am currently writing the documentation in which I shall include how to use the parser, gotchas, limitations, issues and future improvements. I shall also include a rewritten version of the PyDy for Autolev Users guide in it.&lt;/p&gt;
&lt;p&gt;I shall then write the output tests (Tests to compare the outputs of Autolev against those of SymPy) for most of the test examples in the GitLab repo (I shall include these in a directory called output-tests in the GitLab repo). I think its good to put them here as I don&amp;#8217;t see the need to test these on Travis as changing the parser code won&amp;#8217;t affect these. Plus, they will be in a place where the test examples are which are what they will be based on. We could still test these on Travis if required even from here I suppose.&lt;/p&gt;
&lt;p&gt;Finally, I shall wrap things up with the Final Report and Submission.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=95</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 11: unset_show bug and documentation</title>
      <pubDate>Mon, 30 Jul 2018 17:45:07 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/30/week-11-unset_show-bug-and-documentation/</link>
      <description>&lt;p&gt;Last week, I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;for implementation of plotting methods.&amp;#160;Soon after pushing my commits, many of the jobs failed on Travis. It was strange as I was not able to reciprocate the errors locally.&lt;/p&gt;
&lt;p&gt;After discussing it on Gitter, I got to know that it was due to the printing of plots using TextBackend in the doctest in absence of matplotlib. As matplotlib was present in my system,&amp;#160; doctest used matplotlib backend instead of TextBackend locally, hence passing all tests.&amp;#160;&lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;&amp;#160;suggested using&amp;#160;&lt;em&gt;unset_show &lt;/em&gt;to stop the printing of plots during doctest but apparently,&amp;#160;&lt;em&gt;unset_show&amp;#160;&lt;/em&gt;didn&amp;#8217;t work for TextBackend. This was fixed by&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14984"&gt;#14984&lt;/a&gt;&amp;#160;later that day and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;passed all the tests after former one was merged.&lt;/p&gt;
&lt;p&gt;This week, I also started editing&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14453"&gt;#14453&lt;/a&gt;&amp;#160;for documentation. It included a few beam problems along with their ascii diagrams.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;and&lt;a href="https://github.com/sympy/sympy/pull/14453"&gt;#14453&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;&amp;#160;Add more beam problems for documentation.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5320864463564984752</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 11</title>
      <pubDate>Sun, 29 Jul 2018 14:47:17 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-11.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief progress of Rubi&amp;nbsp;module in the 11th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;The main PR, which contains the major changes of this GSoC period was merged this week. I had not run pyflakes on it. I ran pyflakes on the main PR and fixed undefined issues.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;This week was mainly spent to test code generation. Initially, there was some error in generating the code. An &lt;a href="https://github.com/HPAC/matchpy/issues/33"&gt;issue&lt;/a&gt; was opened in this regard. I tried various other structure of Rubi to get it working.&amp;nbsp; Currently, patterns are not matched correctly. I have opened a &lt;a href="https://github.com/sympy/sympy/pull/14988"&gt;PR&lt;/a&gt; for this. We are still trying to get the code generator working so that we can reduce the loading time of rules. Now, the loading time of all rules is around 10 minutes.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=13</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 27 Jul 2018 20:24:12 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/27/autolev-parser-status-update-3/</link>
      <description>&lt;p&gt;Hello Everyone. I have been working on getting the PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;&amp;#160;into shape and now it is finally merged. I have written my own tests for the PR so as to not include copyrighted files that belong to the creators of Autolev.&lt;/p&gt;
&lt;p&gt;I am now working on a &lt;a href="https://gitlab.com/NikhilPappu/test-examples/"&gt;test-examples repo&lt;/a&gt; which serves as a showcase of the parser and also as a source of additional tests. The repo is private on GitLab as it contains copyrighted files. You can request access at the repo link above. Files from this repo can be copied over to the test_examples folder of parsing/autolev to use them as tests. From now, I will be working on adding more examples from the PyDy example repo, Autolev Tutorial, and Dynamics Online to this repo while improving the code of the parser to parse all these codes. I am also making note of things like errors, inaccuracies etc to include them in the Documentation.&lt;/p&gt;
&lt;p&gt;I will open another PR once I have made enough number of changes to the parser code.&lt;/p&gt;
&lt;p&gt;Here is my plan for the future of this project:&lt;/p&gt;
&lt;p&gt;Till the end of GSoC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work on getting the test-examples repo in good shape.&lt;/li&gt;
&lt;li&gt;Write extensive Documentation (explaining what the parser can do, how to use it,&amp;#160; limitations, issues, future improvements etc).&lt;/li&gt;
&lt;li&gt;Work on as many Dynamics Online codes (which I shall include in the repo) as possible (Wrap up Ch4 and hoping to get half of Ch5 done (as it is quite big)).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Post GSoC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Finish the rest of the Dynamics Online Book (Whatever is left of Ch5 and also Ch6 which I think is less important).&lt;/li&gt;
&lt;li&gt;Work on the issues that I will be listing down in the documentation one by one after discussing the possible fixes (Some of these might require changes in the parser while some others require changes in the SymPy code while I do not have much of an idea about the fixes of some other ones).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Nikhil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=93</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 10: Implementing plotting methods</title>
      <pubDate>Tue, 24 Jul 2018 18:12:09 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/24/week-10-implementing-plotting-methods/</link>
      <description>&lt;p&gt;This week I started working on implementing methods to plot Shear force, bending moment, slope and deflection diagrams.&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;was created for it.&lt;/p&gt;
&lt;p&gt;Mainly four methods were added to the Beam class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot_shear_force: This method returns a plot for Shear force present in the Beam object.&lt;/li&gt;
&lt;li&gt;plot_bending_moment: This method returns a plot for Bending moment present in the Beam object.&lt;/li&gt;
&lt;li&gt;plot_slope: This method returns a plot for slope of the elastic curve of the Beam.&lt;/li&gt;
&lt;li&gt;plot_delfection: This method returns a plot for the deflection curve of the Beam object.&lt;/li&gt;
&lt;li&gt;plot_loading_results: This method returns&amp;#160;fig object containing subplots of Shear Force, Bending Moment,&amp;#160;Slope and Deflection of the Beam object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/jashan498/beam_examples/blob/master/beam_plots.ipynb"&gt;Here&lt;/a&gt;&amp;#160;is a sample notebook demonstrating how to use these plotting methods.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;Add more beam problems to the documentation.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//misc/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Subgroup quotients, Polycyclic groups and misc</title>
      <pubDate>Tue, 24 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//misc/</link>
      <description>&lt;p&gt;GSoC'18 Week 9 &amp; 10</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-4503634706614858581</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 10</title>
      <pubDate>Sun, 22 Jul 2018 15:35:32 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-10.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief progress of Rubi&amp;nbsp;module in the 10th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Last week, we were able to load all rules. Rubi has now come in a very stable and working condition. One Missing thing in the main &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt; was missing instructions and documentation. This week I tried my best to write instructions, so that a new user can easily get familiar with it. I have kept it really simple.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Initially, I wrote a script in Mathematica to generate downvalues&amp;nbsp;in separate files. This was done till now manually, but now it's automated. Then I wrote a sympy&amp;nbsp;script to generate all rules and constraints in proper files directly just by running a function.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;For a more easier understanding of steps, I created&amp;nbsp;`rubi_parsing_guide.md` explaining all steps.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Next thing I realised that it would be good if we create a parsing script for the tests too. Till now I used maple format. But a lot of manual things were required. So I wrote a script which directly parses tests into sympy&amp;nbsp;format. All this are added properly in `rubi_parsing_guide.md`.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;`init` in Rubi&amp;nbsp;too was updated with proper explanation of basic structure of rules and constraints. I also updated docs of few important utility_functions.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Now a new user can easily get familiar with Rubi and working with it will be simple.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;I have also opened a new &lt;a href="https://github.com/sympy/sympy/pull/14956"&gt;PR&lt;/a&gt; for new utility_functions. Once the old &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt; gets merged, we can merge this.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=9</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 20 Jul 2018 22:31:06 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/20/autolev-parser-status-update-2/</link>
      <description>&lt;p&gt;I have been working on improving the parser by parsing Dynamics online codes, planning out how to go about writing tests and other aspects of the project and getting the PR into shape.&lt;/p&gt;
&lt;p&gt;I am currently working on writing tests to cover all the rules of the parser. I should be done with this in 2 days.&lt;/p&gt;
&lt;p&gt;This is the plan I have for the third phase:&lt;/p&gt;
&lt;ol&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Make the PR merge ready:&lt;/span&gt;
&lt;ol&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Finish the tests for the parser rules and get the PR merged.&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;open a new PR to work on further improvements.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;additional_tests (will be added in a private BitBucket repo). Here I shall go through many codes from these sources and improve the parser to parse most of these. I shall take notes on little details and errors so that I can include them in the documentation.&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;PyDy example repo (mass spring damper, double pendulum, chaos pendulum examples)&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Dynamics Online Chapters 1 &amp;#8211; 4&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Autolev Tutorial Examples (5.1 &amp;#8211; 5.7)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Documentation (What the parser can do, How it should be used, Limitations, Future improvements etc)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Make the parser parse Dynamics Online Chapter 5 codes and the Bicycle Model.&lt;/li&gt;
&lt;li&gt;&lt;span style="font-weight: 400;"&gt;Final Report&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=71</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 8 &amp; 9: Beam_3d class</title>
      <pubDate>Tue, 17 Jul 2018 16:42:54 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/17/week-8-9-07-july-20-july/</link>
      <description>&lt;p&gt;I started implementing Beam_3d class which can be used to find Shear force, Bending moment, Slope, Deflection and other few things for the Beam object.&amp;#160; PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14883"&gt;#14883&lt;/a&gt;&amp;#160;was created for this.&lt;/p&gt;
&lt;p&gt;I implemented Beam_3d class using&amp;#160;&amp;#160;&lt;a href="http://homes.civil.aau.dk/jc/FemteSemester/Beams3D.pdf" rel="nofollow"&gt;this paper&lt;/a&gt;&amp;#160;as a reference. Actually, like Beam class, it uses a few sets of equations to find certain quantities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To find&amp;#160;&lt;em&gt;Shear force&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;Bending moment&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560335-0c45e50e-8514-11e8-9fb1-f9d27040b4d8.png" rel="noopener"&gt;&lt;img alt="shear" src="https://user-images.githubusercontent.com/31389737/42560335-0c45e50e-8514-11e8-9fb1-f9d27040b4d8.png" /&gt;&lt;/a&gt;&lt;br /&gt;
where&amp;#160;&lt;em&gt;[N, Q&lt;sub&gt;y&lt;/sub&gt;, Q&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;[M&lt;sub&gt;x&lt;/sub&gt;, M&lt;sub&gt;y&lt;/sub&gt;, M&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;are the shear force and bending moment along x-y-z-axes respectively (&lt;em&gt;q&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;m&lt;/em&gt;&amp;#160;are applied load and moment).&lt;/li&gt;
&lt;li&gt;To find&amp;#160;&lt;em&gt;Slope&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;Deflection&lt;/em&gt;:&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560803-2e2ea592-8515-11e8-81cc-b511e1286ff5.png" rel="noopener"&gt;&lt;img alt="def_1" src="https://user-images.githubusercontent.com/31389737/42560803-2e2ea592-8515-11e8-81cc-b511e1286ff5.png" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560832-466c2986-8515-11e8-9ac7-4a0939a41a52.png" rel="noopener"&gt;&lt;img alt="def_2" src="https://user-images.githubusercontent.com/31389737/42560832-466c2986-8515-11e8-9ac7-4a0939a41a52.png" /&gt;&lt;/a&gt;&lt;br /&gt;
where&amp;#160;&lt;em&gt;[w&lt;sub&gt;x&lt;/sub&gt;, w&lt;sub&gt;y&lt;/sub&gt;, w&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;[&amp;#952;&lt;sub&gt;x&lt;/sub&gt;, &amp;#952;&lt;sub&gt;y&lt;/sub&gt;, &amp;#952;&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;are deflection and slope along three axes respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example for the API:&lt;/p&gt;
&lt;p&gt;There is a beam of l meters long. A constant distributed load of magnitude q&lt;br /&gt;
is applied along the y-axis from start till the end of the beam. A constant distributed&lt;br /&gt;
moment of magnitude m is also applied along the z-axis from start till the end of the beam. Beam is fixed at both of its end. So, deflection of the beam at the both ends&lt;br /&gt;
is restricted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam_3d
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; l, E, G, I, A = symbols('l, E, G, I, A')
&amp;gt;&amp;gt;&amp;gt; b = Beam_3d(l, E, G, I, A)
&amp;gt;&amp;gt;&amp;gt; b.apply_support(0, "fixed")
&amp;gt;&amp;gt;&amp;gt; b.apply_support(l, "fixed")
&amp;gt;&amp;gt;&amp;gt; q, m = symbols('q, m')
&amp;gt;&amp;gt;&amp;gt; b.apply_load(q, dir="y")
&amp;gt;&amp;gt;&amp;gt; b.apply_moment_load(m, dir="z")
&amp;gt;&amp;gt;&amp;gt; b.shear_force()
[0, -q*x, 0]
&amp;gt;&amp;gt;&amp;gt; b.bending_moment()
[0, 0, -m*x + q*x**2/2]
&amp;gt;&amp;gt;&amp;gt; b.solve_slope_deflection()
&amp;gt;&amp;gt;&amp;gt; b.slope()
[0, 0, l*x*(-l*q + 3*l*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*(A*G*l**2 + 12*E*I)) + 3*m)/(6*E*I)
+ q*x**3/(6*E*I) + x**2*(-l*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*(A*G*l**2 + 12*E*I))
- m)/(2*E*I)]
&amp;gt;&amp;gt;&amp;gt; b.deflection()
[0, -l**2*q*x**2/(12*E*I) + l**2*x**2*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(8*E*I*(A*G*l**2 + 12*E*I))
+ l*m*x**2/(4*E*I) - l*x**3*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(12*E*I*(A*G*l**2 + 12*E*I)) - m*x**3/(6*E*I)
+ q*x**4/(24*E*I) + l*x*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*A*G*(A*G*l**2 + 12*E*I)) - q*x**2/(2*A*G), 0]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;As this class is relatively new, it would require a few improvements in the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As&amp;#160;&lt;code&gt;Beam_3d&lt;/code&gt;&amp;#160;doesn&amp;#8217;t use&amp;#160;&lt;code&gt;SingularityFunction&lt;/code&gt;, I was unable to find a way to represent point load/moments. So for now&amp;#160;&lt;code&gt;Beam_3d&lt;/code&gt;&amp;#160; only supports continous load (applied over the whole span length of beam).&lt;/li&gt;
&lt;li&gt;Also,&amp;#160;This class assumes that any kind of distributed load/moment is&lt;br /&gt;
applied throughout the span of a beam.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, after discussing it with Arihant, we decided to raise NotImplementedError in such cases.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14883"&gt;#14883&lt;/a&gt;&amp;#160;gets merge by the end of next week.&lt;/li&gt;
&lt;li&gt;Start implementing plotting methods for Beam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5913583019178491882</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 9</title>
      <pubDate>Sun, 15 Jul 2018 15:13:26 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-9.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the progress of &lt;/span&gt;rubi&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt; module in the 9th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;In the very beginning of the week, the PR for appelf1 was merged. My aim for this week was to load all rules and test at least&amp;nbsp;a small part for each type of rule. Due to the time factor, its not possible to test all. Moreover, rubi needs to be updated to the latest version, so the test suite too will be updated.&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I started with trigo rules. They are huge in number. They were never tested before, so some utility_functions like `&lt;i&gt;TrigReduce&lt;/i&gt;`, `&lt;i&gt;KnownTrigIntegrandQ&lt;/i&gt;`, `&lt;i&gt;FunctionOfTrig&lt;/i&gt;` etc were wrong. They were corrected. Soon I realised a difference between sympy and Mathematica. In mathematica, `&lt;i&gt;1/Cot[x]`&lt;/i&gt; is automatically transformed to `&lt;i&gt;Tan[x]&lt;/i&gt;` and `&lt;i&gt;1/Tan[x]&lt;/i&gt;` too was transformed to `&lt;i&gt;Cot[x]`&lt;/i&gt;. But in sympy, these are different. So, `&lt;i&gt;tan(x)&lt;/i&gt;` didn't match to `&lt;i&gt;cot(x)&lt;/i&gt;` . Francesco suggested to replace all `&lt;i&gt;cot&lt;/i&gt;` with `&lt;i&gt;1/tan&lt;/i&gt;`&amp;nbsp; and similarly for `&lt;i&gt;sec&lt;/i&gt;` and `&lt;i&gt;csc`&lt;/i&gt; (in the code generator too).&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Next, I moved to `&lt;i&gt;inverse_trigo&lt;/i&gt;`, `&lt;i&gt;hyperbolic&lt;/i&gt;` and `&lt;i&gt;inverse_hyperbolic&lt;/i&gt;`. I tested some test cases for all these rules. I also tested `&lt;i&gt;error_functions&lt;/i&gt;` completely to make sure `&lt;i&gt;special_functions&lt;/i&gt;` are working properly.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;After all this, I feel rubi is in a stable and working condition. The loading time is around `&lt;i&gt;10 minutes`&lt;/i&gt;. Except for the loading time, the performance of rubi is good.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I have left `&lt;i&gt;DerivativeIntegration&lt;/i&gt;` and `&lt;i&gt;Piecewise&lt;/i&gt;` rules. We will be discussing it.&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//polycylic-groups-part1/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Polycyclic groups - Part1</title>
      <pubDate>Wed, 11 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//polycylic-groups-part1/</link>
      <description>&lt;p&gt;GSoC'18 Week 7 &amp; 8</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-7572262454034848939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 8</title>
      <pubDate>Sun, 08 Jul 2018 15:20:15 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-8.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;Hello everyone. Here is the brief summary of the progress of rubi integration module in the 8th week of GSoC period.&lt;br /&gt;&lt;br /&gt;We completed the testing of logarithmic test cases. Some of the tests are failing as they depend on trigonometric rules. The rules and tests have been updated in this &lt;a href="https://github.com/sympy/sympy/pull/14756/"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Next, I loaded all trigonometric rules. They are huge in number. So the loading time increased from &lt;i&gt;1 min 30 sec&lt;/i&gt; to around&amp;nbsp;&lt;i&gt;6 min&lt;/i&gt;. For now, I have not loaded them. I also updated the test cases for &lt;i&gt;parsetools&lt;/i&gt; and fixed code quality issues. Currently, the travis is failing due to a bug, which has been fixed in branch &lt;i&gt;1.2.&lt;/i&gt; In the upcoming week, &lt;i&gt;1.2&lt;/i&gt;&amp;nbsp;probably will get merged in master.&lt;br /&gt;&lt;br /&gt;Then I moved on to implementing &lt;i&gt;appellf1&lt;/i&gt; in sympy. Progress can be seen in this &lt;a href="https://github.com/sympy/sympy/pull/14882"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;We will be updating our &lt;i&gt;utility_functions&lt;/i&gt; to the latest version of RUBI.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=65</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 7: Using continuum_mechanics with units</title>
      <pubDate>Sat, 07 Jul 2018 07:59:05 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/07/week-7-30-june-06-july/</link>
      <description>&lt;p&gt;This week I mainly focused on finding and solving a bug due to which continuum_mechanics gave&amp;#160;&lt;em&gt;ValueError&lt;/em&gt; on using units with the quantities passed. Initially, I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14856"&gt;#14856&lt;/a&gt;, which included a workaround in the Beam class itself to handle that error. But&amp;#160;&lt;a href="https://github.com/parsoyaarihant"&gt;Arihant&lt;/a&gt;&amp;#160;suggested opening a separate PR as the error was occurring due to a bug in the separate module.&lt;/p&gt;
&lt;p&gt;So,&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14865"&gt;#14865&lt;/a&gt;&amp;#160;was created. &lt;em&gt;is_commutative&amp;#160;&lt;/em&gt;attribute was added in the&amp;#160;&lt;em&gt;Prefix&lt;/em&gt; class&amp;#160; (setting &lt;em&gt;Prefix&lt;/em&gt;.&lt;em&gt;is_commutative &lt;/em&gt;to&lt;em&gt; True&amp;#160;&lt;/em&gt;removed&amp;#160;&lt;em&gt;PolynomialError&lt;/em&gt;). While doing changes in the PR, another bug appeared:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.units import meter, newton, kilo
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.units.util import quantity_simplify
&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; quantity_simplify(x*(8*newton + y))
x*(8*newton + y, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This bug was solved with few changes. After&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14865"&gt;#14865&lt;/a&gt;&amp;#160;gets merged, continuum_mechanics should work with quantities involving units.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14865"&gt;#14865&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;Open a Pull Request and start working on 3dbeam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=7</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Thu, 05 Jul 2018 20:36:54 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/05/autolev-parser-status-update/</link>
      <description>&lt;p&gt;I have a PR for a working parser now with some test cases. The Travis errors I had previously have been fixed.&lt;/p&gt;
&lt;p&gt;I am currently going through the chapters of the book &lt;em&gt;Dynamics Online: Theory and Implementation with Autolev&amp;#160;&lt;/em&gt;and parsing most of the Autolev codes I come across. I feel this would help to make the parser more complete. After getting the desired parsed code I am also running the code and checking that the results are same/similar to the Autolev responses in the .ALL files.&lt;/p&gt;
&lt;p&gt;I have parsed the codes of Chapter 1 and 2 of the book and am currently working on Chapter 3. There are 6 Chapters overall and the bulk of the stuff is concentrated in Chapters 4 and 5.&lt;/p&gt;
&lt;p&gt;After parsing the codes of this book, I shall update the parser code and the tests in the PR. I will add more test cases as well. I will also send in a file containing all the parsed codes of&amp;#160;&lt;em&gt;Dynamics Online&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A lot of the codes are parsing completely fine. A few I feel are quite difficult to parse to SymPy code using a parser and they wouldn&amp;#8217;t even be in the spirit of SymPy/Python if parsed exactly. I have marked these for later. A few of them are producing slightly altered expressions or in some cases errors in SymPy. I am classifying all the codes appropriately based on criteria like this.&lt;/p&gt;
&lt;p&gt;After parsing the book I plan on finishing up the leftover parts of the &lt;a href="http://web.mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf"&gt;Autolev Tutorial&lt;/a&gt; examples and making sure the Bicycle Model Autolev code is parsed.&lt;/p&gt;
&lt;p&gt;I will then go on to do a complete code cleanup (general cleanup, using standard conventions and better variable names, adding more comments etc).&lt;/p&gt;
&lt;p&gt;Finally, I will wrap things up by writing the Documentation and a Final Report. In these I shall discuss: what the parser can do, how it should be used (there are some minor things in some cases that the user should note to get a proper SymPy parse), limitations and future improvements.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-9120952001144543939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 7</title>
      <pubDate>Sun, 01 Jul 2018 15:19:06 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-7.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief summary of my work in the seventh week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Last week, we found a solution for matching `exp` as `Pow`. This week major part was spent in testing exponential rules. Here are some problem faced.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;1. UnevaluatedExpr is quite untested and results in recursion errors in many places.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;like `u = UnevaluatedExpr(E)` now when we want to find imaginary and real part of `u`, using `im(u)`. It causes recursion error. There were other instances too. So in those functions, I replaced them back to `exp`.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;2. There was a lot of index error because length of args of a `Pow` object is 2. Whereas for `exp` it's 1. Utility functions used in lot of places `.args[1]`. I found all possible places where arguments of a `Pow` object was accessed using `.args[0] and .args[1]` . I replaced them with `.base` and `.exp`.&amp;nbsp;This solved the problem&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;There were more minor changes in many utility functions. Currently, I have finished the exponential testing and almost all are passing. I have pushed all changes in this &lt;/span&gt;&lt;a href="https://github.com/sympy/sympy/pull/14756" style="font-family: Arial, Helvetica, sans-serif;"&gt;PR&lt;/a&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I have tested a small part of logarithmic tests. I will try to finish them in 2 days and next move on to either special functions on trigonometric rules.&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=63</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 6: Max Bending moment and Shear Force</title>
      <pubDate>Fri, 29 Jun 2018 06:32:05 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/29/week-6-23-june-29-june/</link>
      <description>&lt;p&gt;Last week I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;&amp;#160;to solve statically indeterminate beam systems using boundary conditions (bc_slope and bc_deflection). This week I mainly focussed on implementing a logic to find the maximum bending moment and maximum shear force in a beam.&lt;/p&gt;
&lt;p&gt;Initially, I thought it would be as simple as differentiating the bending_moment and shear force and then solving those using solve. But solve couldn&amp;#8217;t represent Interval solutions and hence gave a NonImplemented error, as both of these quantities can occur in Intervals.&lt;/p&gt;
&lt;p&gt;So instead of using solve over whole spam length, I found out points of discontinuity in the respective equations using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for term in terms:
    if isinstance(term, Mul):
         term = term.args[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where terms are all the Muls extracted from Add. and&amp;#160;&lt;code&gt;term.args[-1]&lt;/code&gt;&amp;#160;gives us the point of singularity.&lt;/p&gt;
&lt;p&gt;Now between two singularity points, our function can be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A continuous and differentiable function (hence no Interval solution)&lt;/li&gt;
&lt;li&gt;or a constant value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;for the first scenario, you just use solve over that interval and see values at the endpoint. The higher one of both gives you maxima in that interval. For the second, the constant value is indeed maximum by itself. Then compare maxims of all intervals and return location and its value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')
&amp;gt;&amp;gt;&amp;gt; l, P = symbols('l, P', positive=True)
&amp;gt;&amp;gt;&amp;gt; b = Beam(l, E, I)
&amp;gt;&amp;gt;&amp;gt; R1, R2 = symbols('R1, R2')
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(P, 0, 0, end=l)
&amp;gt;&amp;gt;&amp;gt; b.solve_for_reaction_loads(R1, R2)
&amp;gt;&amp;gt;&amp;gt; b.max_bmoment()
(l/2, P*l**2/8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beam class gives ValueError if passed value contains unit. So I would focus on fixing it.&lt;/li&gt;
&lt;li&gt;Read relevant theory for implementation of 3dBeam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-6731843843505254405</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 6</title>
      <pubDate>Sun, 24 Jun 2018 15:53:19 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-6.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Here is the brief work done for rubi in the 6th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt; &lt;div style="text-align: justify;"&gt;Last week almost 70 % of the miscellaneous algebra was tested. In the start of the week, the miscellaneous algebra testing was completed. The miscellaneous algebra test cases have been pushed in this &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;After this, I moved on to load exponential rules and test them. While loading the exponential rules, there were some parsing issues. Those were fixed. On start of the testing, it was found that some integrals depend upon the logarithmic and special_function rules. Those too needed to be loaded. There were some undefined or wrongly defined utility_functions like `CancelCommonFactors`, `Gamma (gammainc)`, `PolyGamma`, `ProductLog` and few more small functions. These didn't take much time. I fixed all these.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Soon I realised a major issue of `exp` and `Pow`. Sympy doesn't identify exp as Pow. The rubi rules are defined in such a way that exp needs to be realised as Pow. I tried to process an expression to replace exp with Pow. These are the major methods I tried :&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(E, z, evaluate=False) . This does not&amp;nbsp;work well, an expression containing Mul is evaluated to exp. I tried to fix it. I found that `flatten` of Mul causes the evaluation. I found the code messy. These can be solved but requires more time.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(Dummy('E', z, evaluate=False) .This was suggested by Aaron. The matching part has no issues in this. But functions which use&amp;nbsp;the property of `E` does not work properly. Like `Log(E)` should evaluate to 1.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(UnevaluatedExpr(E), z) . In this the matching was as expected. I modified `Log` as `return log(z).doit()` . But then also there were some issues. I made a new subclass `rubi_unevaluated_expr`. To solve the commutative issue, I defined a property in this new subclass.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;I think the last one is the best solution for now. Another issue was some rules which caused recursion errors like one in the image&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;a href="https://4.bp.blogspot.com/-umUEO5F9ppw/Wy-7A03ET5I/AAAAAAAAHbM/FQNRIGwO4koCTc_Lb1aoJYCq3ZYYAcOeQCLcBGAs/s1600/blogrubi.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;span&gt;&lt;img border="0" height="56" src="https://4.bp.blogspot.com/-umUEO5F9ppw/Wy-7A03ET5I/AAAAAAAAHbM/FQNRIGwO4koCTc_Lb1aoJYCq3ZYYAcOeQCLcBGAs/s640/blogrubi.png" width="640" /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;To solve it I checked that if last 5 rules applied are same then return a Function `Integrate` and replace it at last while returning. This works fine.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt; &lt;div style="text-align: justify;"&gt;In this week, I was unable to do much testing. But I am sure the upcoming week will be better in this respect. I have tested a small part of exponential rules. In the upcoming week, I will try to finish exponential rules within 2-3 days and soon move to logarithmic rules.&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=61</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 5: Solving&#xA0;statically indeterminate beams</title>
      <pubDate>Sat, 23 Jun 2018 11:54:25 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/23/week-5-16-june-22-june/</link>
      <description>&lt;p&gt;This week I worked on solving&amp;#160;statically indeterminate beam systems and created &lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;&amp;#160;for that. Some work was already done in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14681"&gt;#14681&lt;/a&gt;, which me and Jason reviewed during community bonding period.&lt;/p&gt;
&lt;p&gt;Now Beam class uses boundary conditions (bc_deflection and bc_slope) to solve for unknown reactions, hence making statically indeterminate systems solvable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')
&amp;gt;&amp;gt;&amp;gt; F = Symbol('F')
&amp;gt;&amp;gt;&amp;gt; l = Symbol('l', positive=True)
&amp;gt;&amp;gt;&amp;gt; b5 = Beam(l, E, I)
&amp;gt;&amp;gt;&amp;gt; b5.bc_deflection = [(0, 0),(l, 0)]
&amp;gt;&amp;gt;&amp;gt; b5.bc_slope = [(0, 0),(l, 0)]
&amp;gt;&amp;gt;&amp;gt; R1, R2, M1, M2 = symbols('R1, R2, M1, M2')
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(M1, 0, -2)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(M2, l, -2)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(-F, l/2, -1)
&amp;gt;&amp;gt;&amp;gt; b5.solve_for_reaction_loads(R1, R2, M1, M2)
&amp;gt;&amp;gt;&amp;gt; b5.reaction_loads
{R1: F/2, R2: F/2, M1: -F*l/8, M2: F*l/8}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add max_bmoment and mx_shear_force methods to&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//modif-todd-coxeter/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Modifeid todd Coxeter methods</title>
      <pubDate>Thu, 21 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//modif-todd-coxeter/</link>
      <description>&lt;p&gt;GSoC'18 Week 5</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5483137592484274057</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 5</title>
      <pubDate>Sun, 17 Jun 2018 17:12:20 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-5.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief summary of my work in the 5th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I started this week with testing miscellaneous algebraic test cases. Soon it was found that most test cases depend on rules of `Miscellaneous integration`. So I loaded those rules. There were few new structure in constraints. So parser too was updated for incorporating those.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;While testing, `ExpandIntegrand` did not function well. Matcher used in ExpandIntegrand was of sympy. I changed ExpandIntegrand using replace_all of matchpy. In few more functions I changed the structure using matchpy. In this week, a major part of the time was spent in utility functions. There are many changes. Also some of the test cases of last year was wrong. It gave different result in mathematica. The test cases which I have updated matches with Mathematica's output. I have pushed all changes of utility function in this &lt;a href="https://github.com/sympy/sympy/pull/14756/files"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Parallely I have also tested around 70 % of miscellaneous algebraic. I will complete the testing within one or two days. After this I will move on to exponential rules and exponential test cases.&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=56</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 4: Solving hinged beams</title>
      <pubDate>Fri, 15 Jun 2018 11:00:25 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/15/week-4-9-june-15-june/</link>
      <description>&lt;p&gt;This week I worked on adding support for beams connected via hinge in &lt;a href="https://github.com/sympy/sympy/pull/14773"&gt;#14773&lt;/a&gt;. Support for axially fixed beams and its API was implemented last week.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_solve_hinge_beams&lt;/code&gt;&amp;#160;was added as a helper function to solve such Beams.&amp;#160;&lt;span class="pl-s"&gt;This method resolves the composite Beam into its sub-beams and then&amp;#160;equations of shear force, bending moment, slope and deflection are&amp;#160;evaluated for both of them separately. These equations are then solved&amp;#160;for unknown reactions and integration constants using the boundary&amp;#160;conditions applied on the Beam. Equal deflection of both sub-beams&amp;#160;at the hinge joint gives us another equation to solve the system.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So the final API looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="hinge_hinge_blog" class=" size-full wp-image-57 aligncenter" src="https://singhjashan.files.wordpress.com/2018/06/hinge_hinge_blog.png?w=730" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; l = symbols('l', positive=True)
&amp;gt;&amp;gt;&amp;gt; R1, M1, R2, R3, P = symbols('R1 M1 R2 R3 P')
&amp;gt;&amp;gt;&amp;gt; b1 = Beam(2*l, E, I)
&amp;gt;&amp;gt;&amp;gt; b2 = Beam(2*l, E, I)
&amp;gt;&amp;gt;&amp;gt; b = b1.join(b2,"hinge")
&amp;gt;&amp;gt;&amp;gt; b.apply_load(M1, 0, -2)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R3, 4*l, -1
&amp;gt;&amp;gt;&amp;gt; b.apply_load(P, 3*l, -1)
&amp;gt;&amp;gt;&amp;gt; b.bc_slope = [(0, 0)]
&amp;gt;&amp;gt;&amp;gt; b.bc_deflection = [(0, 0), (l, 0), (4*l, 0)]
&amp;gt;&amp;gt;&amp;gt; b.solve_for_reaction_loads(M1, R1, R2, R3)
&amp;gt;&amp;gt;&amp;gt; b.reaction_loads
{R3: -P/2, R2: -5*P/4, M1: -P*l/4, R1: 3*P/4}
&amp;gt;&amp;gt;&amp;gt; b.slope().subs(x, 3*l)
-7*P*l**2/(48*E*I)
&amp;gt;&amp;gt;&amp;gt; b.deflection().subs(x, 2*l)
7*P*l**3/(24*E*I)&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See for changes in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14786"&gt;#14786&lt;/a&gt;&amp;#160;to get it merged.&lt;/li&gt;
&lt;li&gt;Add support for non-horizontal beams.&lt;/li&gt;
&lt;li&gt;See for any remaining implementation from first two stages of my proposal.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//Isomorphism/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Computation of Isomorpism between 2 groups</title>
      <pubDate>Mon, 11 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//Isomorphism/</link>
      <description>&lt;p&gt;Week 3-4 and Week 6</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-2004986996788736575</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 4</title>
      <pubDate>Sun, 10 Jun 2018 16:47:19 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-4.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;Hello everyone. Here is the brief work done in the 4th week.&lt;br /&gt;&lt;br /&gt;In this week I have completed the testing of &lt;i&gt;trinomial products. &lt;/i&gt;There are around 2700 test cases. I have tested them all in sympy. I have updated the &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&amp;nbsp;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Currently, a few tests are failing because of 2 major issues :&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Apart - Some features are unimplemented in apart of sympy. So expressions are not simplified.&lt;/li&gt;&lt;li&gt;appellf1 - There is a missing implementation of appellf1 in sympy.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;If the above two issues are solved, almost all tests will pass.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Utility functions have been improved a lot this week. The &lt;i&gt;is_polynomial &lt;/i&gt;of sympy&amp;nbsp;has certain issues and so the constraints were affected. I have re-written PolynomialQ. It&amp;nbsp;is not full proof, but it handles most of the cases. There are many small changes in utility functions. They can be seen in the &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I am lagging behind my proposed timeline. But the work in rubi is time-consuming. When a test fails, finding the same rule in Mathematica, finding whether all constraints return the same result in Mathematica and sympy and finding whether utility functions are working in a different way takes time. I apologise for the same. I will try to speed up my work as much as possible.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this week, I will be testing Miscellaneous algebra and Exponential tests.&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=53</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 3: Composite beams</title>
      <pubDate>Sat, 09 Jun 2018 23:40:11 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/09/week-3-2-june-8-june/</link>
      <description>&lt;p&gt;This week me, Arihant and Jason discussed the API for creating composite Beam objects. Initially, we used &lt;code&gt;Piecewise&lt;/code&gt;&amp;#160;and&amp;#160;&lt;code&gt;SingularityFunction&lt;/code&gt;&amp;#160;to represent our changing second_moment but then we agreed upon&amp;#160;&lt;code&gt;.join&lt;/code&gt; method to represent such beams. So the final API was like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b1 = Beam(2, E, 1.5*I)
&amp;gt;&amp;gt;&amp;gt; b2 = Beam(2, E, I)
&amp;gt;&amp;gt;&amp;gt; b = b1.join(b2, "fixed")
&amp;gt;&amp;gt;&amp;gt; b.length
&lt;span class="pl-c1"&gt;4&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; b.second_moment
Piecewise((&lt;span class="pl-c1"&gt;1.5&lt;/span&gt;&lt;span class="pl-k"&gt;*&lt;/span&gt;I, x &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;), (I, x &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#160;&lt;code&gt;b1.join(b2, "fixed")&lt;/code&gt;&amp;#160;joins b2 at the right end of b1 via a fixed connection.All this was implemented in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14773"&gt;#14773&lt;/a&gt;&amp;#160;and hopefully it would be merged in coming few days.&lt;/p&gt;
&lt;p&gt;I also created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14786"&gt;#14786&lt;/a&gt;&amp;#160;at the end of this week implementing&amp;#160;&lt;code&gt;apply_support&lt;/code&gt;&amp;#160;and&amp;#160;&lt;code&gt;max_deflection&lt;/code&gt;&amp;#160;methods.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apply_support&lt;/code&gt;&amp;#160;is an easier way to apply support structures on our Beam object rather than adding all the reaction loads and moments and constraints on it by yourself. Its API is not finalised yet but for now it is something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;b.apply_support(position, type='hinge')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;position&lt;/code&gt;&amp;#160;represents the position at which support was applied&lt;/p&gt;
&lt;p&gt;and type is type of support structure. It can be either&amp;#160;&lt;code&gt;hinge&lt;/code&gt;, &lt;code&gt;roller&lt;/code&gt;&amp;#160;or &lt;code&gt;cantilever&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add support for composite beams connected via hinge.&lt;/li&gt;
&lt;li&gt;Add support for non-horizontal beams.&lt;/li&gt;
&lt;li&gt;See for any remaining implementation from first two stages of my proposal.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-6327049288703125321</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 3</title>
      <pubDate>Sun, 03 Jun 2018 12:02:48 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-3.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hello everyone. Here is the update of my work in the third week of GSoC.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Unlike last week, this week clarified some of the real problems of our implementation of rubi.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;I began to freshly test trinomial products after getting the older test-suite.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Initially, I came across the problem of &lt;i&gt;Coeff &lt;/i&gt;and &lt;i&gt;Sum&lt;/i&gt;. I solved this by redefining &lt;i&gt;Coeff&lt;/i&gt; and introducing a function &lt;i&gt;Sum_doit&lt;/i&gt;. After this, I realised &lt;i&gt;With&lt;/i&gt; statement was not being parsed correctly for many cases. Parsetools was improved to take care of the &lt;i&gt;with&lt;/i&gt; statements.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;After this, I encountered with some utility functions where the output was not as expected. This is the major cause of the failing tests. Constraints too are affected by this. I tried to find and solve as much as possible. I have to trace all functions in cases of failing tests and compare the output with Mathematica. I improved few utility functions and updated in the &lt;/span&gt;&lt;a href="https://github.com/sympy/sympy/pull/14756" style="font-family: arial, helvetica, sans-serif;"&gt;PR&lt;/a&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;. Also, there were some exceptions in &lt;/span&gt;Matchpy&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;, where constraints were being checked taking x as a numerical value. It resulted in TypeErrors. So I updated the constraints in such a way that it avoids such exceptions.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;After all this and some small changes, I almost have tested half of the trinomial products in the test-suite. Some issues are not solved yet, like :&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Sorting of variables.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Not implemented error in apart of sympy.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;And few rules, which are not well defined.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;Here is the brief work of this week:&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Solved the issue of Sum and Coeff.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;improved parsetools for with statements.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;little modification to constraints definition.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;improved utility functions&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;minor changes in parsetools.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;I was supposed to completely test trinomial products within this week. I tried hard, but the debugging part is time taking. Finding the real issue for failing &lt;/span&gt;test&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;, takes time. Also, it needs to be compared with Mathematica. But the good thing is that, after finding the issue and fixing it, tests are&amp;nbsp;passing. So after this week, I can say that if we are good with our utility functions, we will be able to test more than 90% of the original &lt;/span&gt;rubi&lt;span style="font-family: arial, helvetica, sans-serif;"&gt; test suite.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;In the upcoming week, I will do more testing and complete trinomial products.&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=45</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 2: point_cflexure and remove_load methods</title>
      <pubDate>Mon, 28 May 2018 18:53:34 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/05/28/week-3-25-may-1-june/</link>
      <description>&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Exams kept me occupied for previous 11 days so I wasn&amp;#8217;t able to contribute much. Coming to this week&amp;#8217;s work, I created two pull request:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14751"&gt;#14751&lt;/a&gt; :This PR implemented&amp;#160;&lt;code&gt;remove_load&lt;/code&gt;&amp;#160;method to remove previously applied loads on the beam object.&amp;#160;This method is&amp;#160; little different from adding a negative load to make net equal to zero and would work only if that particular load exists on beam.&lt;/li&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14753"&gt;#14753&lt;/a&gt;&amp;#160; : This PR implemented&amp;#160;&lt;code&gt;point_cflexure&lt;/code&gt;&amp;#160;method to find &lt;a href="https://en.wikipedia.org/wiki/Contraflexure"&gt;point of contraflexure&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/14751"&gt;#14751&lt;/a&gt; also included&amp;#160;&lt;code&gt;applied_loads&lt;/code&gt;&amp;#160;method which keeps a track of all load applied on beam.&lt;/p&gt;
&lt;p&gt;It is different from&amp;#160;&lt;code&gt;b.load&lt;/code&gt;&amp;#160;as it treat each load as a separate entity.&amp;#160;&lt;code&gt;load&lt;/code&gt;&amp;#160;property would sum up all the loads at a particular point but&amp;#160;&lt;code&gt;applied_loads&lt;/code&gt;&amp;#160;will still show them as separate loads. For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b.apply_load(4, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(2, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.load
6*SingularityFunction(x, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.applied_loads
[(4, 2, -1, None), (2, 2, -1, None)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only difficulty with &lt;a href="https://github.com/sympy/sympy/pull/14753"&gt;#14753&lt;/a&gt;&amp;#160; occured in finding solution of&amp;#160;&lt;code&gt;moment_curve&lt;/code&gt;&amp;#160;.&amp;#160; Actually moment is zero outside the spam length too, which made&amp;#160;&lt;code&gt;solve&lt;/code&gt;&amp;#160;to return a solution in form of&amp;#160;&lt;code&gt;Interval&lt;/code&gt;&amp;#160;which is not a compatible return type for&amp;#160;&lt;code&gt;solve&lt;/code&gt;.&amp;#160;&lt;code&gt;solveset&lt;/code&gt;&amp;#160;was of no help too as it can&amp;#8217;t be used with multivariate expressions. The problem, however, was solved by wrapping&amp;#160;&lt;code&gt;bending_moment&lt;/code&gt;&amp;#160; with a&amp;#160;&lt;code&gt;Piecewise&lt;/code&gt;&amp;#160;function with its value equal to&amp;#160;&lt;code&gt;float("nan")&lt;/code&gt;&amp;#160;outside the spam length.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make&amp;#160;&lt;code&gt;beam.py&lt;/code&gt;&amp;#160;compatible to solve non-prismatic beams.&lt;/li&gt;
&lt;li&gt;Try to find a way around for the issue occurring in PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14681"&gt;#14681&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for non-horizontal beams.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//Word-Reduction/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Using automaton for word reduction in Rewriting Systems</title>
      <pubDate>Mon, 28 May 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//Word-Reduction/</link>
      <description>&lt;p&gt;GSoC'18 Week 1 and 2</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-2627530986362511513</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 2</title>
      <pubDate>Sat, 26 May 2018 20:39:44 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/05/gsoc-2018-week-2.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hello everyone. Here is the brief work done and progress in my project (Rubi) in the second week.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;This week was quite frustrating for me. I gave a lot of time but the outcome was little less. Initially my aim was to solve the problem of the order in which rule was matched. But I have to revert back to my initial structure as the new structure was extremely time consuming. Next I thought to keep track of the rules applied to an expression. This could be a great help in debugging too. So I implemented it.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Next I moved on to testing &lt;i&gt;trinomial_products . &lt;/i&gt;But here also results were not good. Our rules are of older version (4.10.8) , but we did not have the test-suite of that version. So I tried extremely hard to test those tests with rubi 4.10.8 . For 3 - 4 days , I put a great effort. At last I realised, things will not work this way. So, I then mailed to Albert, the maintainer of original Rubi, asking him for the test-suite of older version. And the good part is that he has provided me the test-suite today. So now I will move to test our rubi with this test-suite.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;In between all this, I found some errors in utility function . I corrected them and updated the &lt;a href="https://github.com/sympy/sympy/pull/14724"&gt;PR&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Here are the works done by me this week :&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Made necessary changes in the &lt;i&gt;parsetools&lt;/i&gt; and &lt;i&gt;rubi , &lt;/i&gt;so that it keeps track of the rules applied to an expression.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;&lt;i&gt;test_1_2 &lt;/i&gt;of algebraic rules completely passes without any failure. (Removed all &lt;i&gt;@XFAIL &lt;/i&gt;from &lt;i&gt;test_1_2 &lt;/i&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Corrected &lt;i&gt;AppellF1, NegQ, PositiveQ, BinomialMatchQ, TrinomialMatchQ &lt;/i&gt;in the utility functions.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;For the upcoming week I plan to make test suits of &lt;i&gt;trinomial&lt;/i&gt; and &lt;i&gt;miscellaneous algebra &lt;/i&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
