<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=232</guid>
      <title>GSoC Week 1 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sun, 29 May 2016 08:14:24 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/05/29/gsoc-week-1-progress/</link>
      <description>&lt;p&gt;The GSoC coding period started earlier this week. I have been coding for 6 days untils now, and am taking a break on Sunday!&lt;/p&gt;
&lt;p&gt;For this week, according to&amp;#160;GSoC proposal I started with wrapping the Complex Numbers class into Ruby. This week and the next are supposed to be for Complex numbers and Doubles.&lt;/p&gt;
&lt;p&gt;Straight from my proposal :&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Complex Numbers in the SymEngine can be of three different types.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex Double&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex Int&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex mpc&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Apart from wrapping these three different types into Ruby, this part will also include converting between the SymEngine Complex types and the &lt;/span&gt;&lt;a href="http://ruby-doc.org/core-1.9.3/Complex.html"&gt;&lt;span style="font-weight: 400;"&gt;Ruby Complex types&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Like wise, for floating point representation there are two types:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Real Double&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Real mpfr&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;These classes will be wrapped during this week of the project, as well as converting between these types and Ruby&amp;#8217;s Float and BigDecimal data types.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The Complex Numbers (excluding Complex Double and &amp;#160;Complex mpc) was wrapped successfully with &lt;a href="https://github.com/symengine/symengine.rb/pull/39" target="_blank"&gt;PR #39&lt;/a&gt;, while also fixing a couple of issues (&lt;a href="https://github.com/symengine/symengine.rb/issues/19" target="_blank"&gt;Issue #19&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine.rb/issues/21" target="_blank"&gt;Issue #21&lt;/a&gt;). Interestingly, the Ruby Spec was updated by @zverok during this week and I had the opportunity to learn a lot about Specs as I had to re-write the specs in the new style.&lt;/p&gt;
&lt;p&gt;On the other side, in the symengine/symengine repo, the CWrappers were updated to accommodate both Complex and Double numbers and successfully merged with &lt;a href="https://github.com/symengine/symengine/pull/954" target="_blank"&gt;PR #954&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The work on Doubles and Complex Doubles have already started in &lt;a href="https://github.com/symengine/symengine/pull/954" target="_blank"&gt;PR #46&lt;/a&gt;, and is almost completed. This should be ready to merge by mid next week, and by the end of next week I am hoping to complete mpc and mpfr for Complex and Doubles, and move on to the actual 3rd week work. Being ahead of the schedule is always great as it reduces pressure on my self!&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/232/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/232/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=232&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/05/29/Wrap-a-Lot</guid>
      <title>Wrap a lot</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sun, 29 May 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/05/29/Wrap-a-Lot/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;As I pointed out in last week&amp;#8217;s post, I have begun my work on wrapping aspects my project. The final aim of wrapping the polynomial class is to provide users with the option of using specialized polynomial libraries like Flint and Piranha.&lt;/p&gt;

&lt;p&gt;Right at the beginning of the project, I was lacking the basic idea of how the wrapping will work. Mostly I was confused by the fact that we have to right common code for all the libraries (SymEngine, Flint &amp;amp; Piranha) with the problem being, each of the these libraries have different internal representation and methods. By the end of the week, thanks to Isuru, I have much more understanding of the structure of the code is supposed to be. Here&amp;#8217;s a short summary on how it will work.&lt;/p&gt;

&lt;h3 id="polynomial-base"&gt;Polynomial Base&lt;/h3&gt;
&lt;p&gt;There will be four end (derived) classes. &lt;code class="highlighter-rouge"&gt;UIntPoly&lt;/code&gt; &amp;amp; &lt;code class="highlighter-rouge"&gt;UExprPoly&lt;/code&gt; (the SymEngine) polynomials, &lt;code class="highlighter-rouge"&gt;UIntPolyFlint&lt;/code&gt; and also &lt;code class="highlighter-rouge"&gt;UIntPolyPiranha&lt;/code&gt;. Each of these classes derive from the base class called &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt;. Now the base class must have methods and members which can be used commonly by each of the derived classes. Thus, the base class should have two members, the &lt;code class="highlighter-rouge"&gt;var&lt;/code&gt; which depicts the variable of the polynomial and a &lt;code class="highlighter-rouge"&gt;container&lt;/code&gt; which contains the data about the polynomial (basically the coefficients corresponding to each degree).&lt;/p&gt;

&lt;p&gt;This is skeleton of how the classes should look like :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UPolyBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;Symbol&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="n"&gt;Container&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyPiranha&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;piranha&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;polynomail&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyFlint&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;flint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmpz_polyxx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="symengines-container"&gt;SymEngine&amp;#8217;s Container&lt;/h3&gt;

&lt;p&gt;The containers of the Flint and Piranha will be discussed in detail in the upcoming weeks. We now had to think about what the container must be for SymEngine. Also we have to merge as much functionality as possible. I saw that both the external libraries had operators overloaded for addition, subtraction, multiplication and division. So, methods like &lt;code class="highlighter-rouge"&gt;add_poly&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;sub_poly&lt;/code&gt; etc. could be made common in the base class itself if I implemented a container for holding SymEngine polynomials which also has it&amp;#8217;s operators overloaded.&lt;/p&gt;

&lt;p&gt;I was not familiar with the symbolic side of the polynomials, and found out that a container had already been made for &lt;code class="highlighter-rouge"&gt;UExprPoly&lt;/code&gt; called &lt;code class="highlighter-rouge"&gt;UExprDict&lt;/code&gt;. The class was nothing but a wrapper around &lt;code class="highlighter-rouge"&gt;map&amp;lt;int, Expression&amp;gt;&lt;/code&gt;. It had overloaded methods for addition, subtraction etc. So, technically this dictionary was storing all the information about the polynomials. I just had to create another similar wrapper for &lt;code class="highlighter-rouge"&gt;map&amp;lt;uint, integer_class&amp;gt;&lt;/code&gt; for the integer counterpart of the polynomial class. This resulted in &lt;a href="https://github.com/symengine/symengine/pull/946"&gt;#946&lt;/a&gt; and Isuru mentioned that most of the code for both these dictionary wrappers is about the same! So, I decided to make a base class for polynomial dictionary wrappers and both of these can inherit from that.&lt;/p&gt;

&lt;p&gt;The ordered map wrapper looks like :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ODictWrapper&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;friend&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ODictWrapper&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntDict&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ODictWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIntDict&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UExprDict&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ODictWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UExprDict&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="finishing-the-class"&gt;Finishing the class&lt;/h3&gt;

&lt;p&gt;After the containers for SymEngine were complete, I started implementing the polynomial base class, from which the two current polynomial classes will inherit. The class turned out to be very similar to the prototype described above. Accessor methods were added and basic polynomial functions were added &lt;a href="https://github.com/symengine/symengine/pull/951"&gt;#951&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All we have to do now for functions like &lt;code class="highlighter-rouge"&gt;add_poly&lt;/code&gt; is use the overloaded operators on the containers. Also, template argument deduction will automatically allow us to call the functions directly on two same polynomial types.&lt;/p&gt;

&lt;p&gt;An example of a common template function for basic polynomial manipulation :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;RCP&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;add_upoly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_poly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_poly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_var&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h3&gt;

&lt;p&gt;This work was done before the polynomial base class was implemented. Also, the names of the classes I refer to here are the new names. The old names were a little unintuitive, so decided to change them, along with introducing a new subfolder in the repository to hold all code related to polynomials (and their tests). Some code was also shifted to places more apt, all changes can be seen here &lt;a href="https://github.com/symengine/symengine/pull/960"&gt;#960&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a small number of miscellaneous changes that need to be worked out in the overall structure, here they are &lt;a href="https://github.com/symengine/symengine/pull/962"&gt;#962&lt;/a&gt;. More on this and Flint next week! Goodbye!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC Week 1</guid>
      <title>GSoC Week 1</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sat, 28 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc_week_1.html</link>
      <description>&lt;p&gt;
Hi everyone.
&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;
Here is a brief summary of what we have been doing for the first week of GSoC.
&lt;/p&gt;
&lt;p&gt;
In last week we opened the &lt;a href="https://github.com/sympy/sympy/pull/11140"&gt;PR #11140&lt;/a&gt; for working on implementing the Finitely Presented Groups and Coset Enumeration. Implementing the Coset Enumeration first understanding how the routine mentioned in [1] interact with each other. Since The different routines being: &lt;code&gt;define&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;coincidence&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;rep&lt;/code&gt;. Most of these methods have different versions as well, which can be made to be suitable for a particular class of groups.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;Coset Table&lt;/code&gt;: We represented it using list of lists data structure, inner lists are of fixed length, twice the number of generators, the outer list can grow as much as needed. We started with writing code for the &lt;code&gt;define&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt; routines. There was one typo in [1] for &lt;code&gt;scan&lt;/code&gt; routine, which I somehow intuitively passed initially while writing code from pseudo-code, but came across it when reading the pseudo-code again. (I didn't expected the book to contain such a type in pseudo-code). Intially we started with &lt;code&gt;-1&lt;/code&gt; as an entry for undefined slots but since &lt;code&gt;-1&lt;/code&gt; may lead to problems as Python will accept it as an index with no error indications, allowing the bugs to pass silently. So we chose &lt;code&gt;None&lt;/code&gt; as a better option to opt for.
&lt;/p&gt;
&lt;p&gt;
We wanted to make sure, these implemeted methods work as expected, so I wrote extensive tests (currently in doctests), 4 of which have been taken from [1] while one from the original Todd Coxeter paper [2].
&lt;/p&gt;
&lt;p&gt;
Just yesterday we decided to make &lt;code&gt;Coset Table&lt;/code&gt; a &lt;code&gt;class&lt;/code&gt;, since every &lt;code&gt;Coset Table&lt;/code&gt; in itself has certain attributes which are changed along the execution of the Enumeration, which can be better represented by a &lt;code&gt;class&lt;/code&gt;. It's struture is be something like&lt;br /&gt;&lt;br /&gt;
&lt;code&gt;
&lt;pre&gt;
class CosetTable(list):
    def __init__(self, fp_grp, subgroup):
        self.fp_group = fp_grp
        self.subgroup = subgroup
        self._A = list(chain.from_iterable((gen, gen**-1)
                  for gen in self.fp_group.generators))
        self.append([None]*len(self.A))

    @property
    def is_complete(self):
        for coset in self:
            for res in coset:
                if res is None:
                    return False
        return True

    # other methods
&lt;/pre&gt;
&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
On the other side we are working on &lt;a href="https://github.com/sympy/sympy/pull/11150"&gt;PR#11150&lt;/a&gt;, which deals with implementation of &lt;code&gt;FreeAbelianGroup&lt;/code&gt;, it wouldn't be tough to get along with this PR, since it is just similar to the previously implemented &lt;code&gt;FreeGroup&lt;/code&gt;, with &lt;code&gt;dict&lt;/code&gt; as its data structure.
&lt;/p&gt;
&lt;p&gt;
&lt;h4&gt;For next week&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Complete the &lt;code&gt;Coset Table&lt;/code&gt; PR, i.e implement the different strategies of Felsch, HLT. I am pretty sure, this task would take more than 1 week, since there are whole lot of other strategies which if we decide to implement would take up a lot of time, even the &lt;code&gt;Lookahead&lt;/code&gt; version of Todd Coxeter is there, which specifies a whole new data-structure for different compoents involved in Enumeration.&lt;/li&gt;
    &lt;li&gt;Later, implement different methods for &lt;code&gt;FpGroup&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Anyway, I'm really enthusiastic about my project and hope that we'll have some nice and reasonably fast algorithms in CGT by the end of the summer!
&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;i&gt;
&lt;ul&gt;
  &lt;li&gt;1. Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O'Brien, "Handbook of computational group theory";, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-5848-372-3 .&lt;/li&gt;
  &lt;li&gt;2. A practical method for enumerating cosets of a finite abstract group by J. A. TODD (University of Manchester), and H.S.M. Coxeter (University of Cambridge)&lt;/li&gt;
&lt;/i&gt;
&lt;br /&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/article&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/05/27/GSoC-week-1.html</guid>
      <title>GSoC Week 1</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 27 May 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/05/27/GSoC-week-1.html</link>
      <description>&lt;p&gt;The first week of the Google Summer of Code is now coming to an end and I feel
like I&amp;#8217;ve hit the ground running and made a great head start. Most of the week
revolved around work with creating a way to benchmark &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and
&lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; classes so that activities aimed at enchancing the speed
performance of these classes can be tracked. I also worked on moving some code
from the pydy repository to the sympy repository and made my first attempt at
reviewing a pull request. Lastly I continued researching Featherstones Method
of equation of motion generation and started digging into the structure of
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; as I work towards making a base equations
of motion class.&lt;/p&gt;

&lt;p&gt;The week started off by finishing the tkinter GUI and benchmarking code that I
had started making from scratch during the community bonding period. I added
the ability to filter the graphed results by test, python version and platform.
This code was submitted to the SymPy repository in &lt;a href="https://github.com/sympy/sympy/pull/11154"&gt;PR
#11154&lt;/a&gt;. This PR has since been
closed as Jason Moore pointed out that SymPy already has a benchmarking
repository that is able to do basically what I was achieving with my code and a
better solution would be to simply move my tests there. First I had to learn
the airspeed velocity (ASV) package which is what the benchmarking repository
uses to run it&amp;#8217;s tests. After reading through the documentation of ASV&amp;#8217;s
homepage I altered my &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; tests to fit ASV&amp;#8217;s
formatting. This code was submitted to the sympy_benchmarks repository in &lt;a href="https://github.com/sympy/sympy_benchmarks/pull/27"&gt;PR
#27&lt;/a&gt;. This code has since
been merged though during the submission process Jason brought up that it would
be a good idea to broaden the scope of testing for the equations of motion
generators and mentioned a few example scripts to look through. My summary of
reviewing those scripts can be found on the PR but basically some of the
examples did not use additional methods but simply provided different inputs
for testing equations of motion formation which is still useful.&lt;/p&gt;

&lt;p&gt;Among the scripts to review was pydy.models.py which Jason pointed out would be
useful if added to the SymPy repository as it would give additional code to
benchmark and test. Some tasks that would need to be completed to achieve this
migration were to remove all dependence of the code on pydy and come up with
some test code which I worked on the back half of this week. Also I changed the
location of the theta coordinate of models.py&amp;#8217;s second function at Jason&amp;#8217;s
request. The submission of this code to the SymPy repository is in &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
#11168&lt;/a&gt; which at the time of this
writing is awaiting the completion of the travis ci tests.&lt;/p&gt;

&lt;p&gt;The last thing I did related to my project this week was continue to learn the
math behind Roy Featherstone&amp;#8217;s equations of motion algorithm. I finished
reading through his short course on spatial vector algebra slides and their
accompaning notes. Also I contined reading through &lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D
Vectors (Part
2)&lt;/a&gt;. Lastly I
began taking notes on &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt;&amp;#8217;s apis as I begin
working towards creating an equations of motion generation base class.&lt;/p&gt;

&lt;p&gt;I also made my first attempt at doing a PR review this week on &lt;a href="https://github.com/sympy/sympy/pull/10650"&gt;PR
#10650&lt;/a&gt;. This PR had very little
code to look over and I made some suggestions on basic syntax choices. After he
fixed the suggestions, however, I pinged members who deal with that code as I
am not confident in my ability to assess whether the code is ok for merging or
if the fix is necessary.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Next week my plan is to jump more into figuring out the internals of the
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; classes which will most likely involve
dynamics topics I am less familiar with. In addition I will keep making
progress on learning Featherstone&amp;#8217;s method of equations of motion generation.
Thus it seems that next week will be focused more on theoretical learning and
less on coding than this week was.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="prs-and-issues-referenced-in-post"&gt;PR&amp;#8217;s and Issues Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Closed) Mechanics Benchmarking &lt;a href="https://github.com/sympy/sympy/pull/11154"&gt;PR
  #11154&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Added a test for KanesMethod and LagrangesMethod &lt;a href="https://github.com/sympy/sympy_benchmarks/pull/27"&gt;PR
  #27&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Fix matrix rank with complicated elements &lt;a href="https://github.com/sympy/sympy/pull/10650"&gt;PR
  #10650&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Pydy models migration &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
  #11168&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id="articlesbooks-referenced-in-post"&gt;Articles/Books Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D Vectors (Part
   2)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://royfeatherstone.org/spatial/slidesX4.pdf"&gt;A Short Course On Spatial Vector Algebra
  Slides&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://royfeatherstone.org/spatial/notes.pdf"&gt;A Short Course On Spatial Vector Algebra Slide
  Notes&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-First-Week</guid>
      <title>GSoC First Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Fri, 27 May 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-First-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Previously, I was working on the &lt;a href="https://github.com/symengine/symengine/pull/942"&gt;PR&lt;/a&gt; for &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; implementation.
I managed to get it merged this week. So, now we have &lt;code class="highlighter-rouge"&gt;UniversalSet&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;EmptySet&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; implementation in SymEngine.
Where in &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; we have a &lt;code class="highlighter-rouge"&gt;set_basic&lt;/code&gt; which can contain any &lt;code class="highlighter-rouge"&gt;Basic&lt;/code&gt; object. That is apart from &lt;code class="highlighter-rouge"&gt;Number&lt;/code&gt; objects we can have &lt;code class="highlighter-rouge"&gt;Symbol&lt;/code&gt; objects as well, and even an &lt;code class="highlighter-rouge"&gt;Expression&lt;/code&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then I started working on implementing &lt;code class="highlighter-rouge"&gt;FiniteField&lt;/code&gt;. I have sent this &lt;a href="https://github.com/symengine/symengine/pull/955"&gt;PR&lt;/a&gt;. Initially I was using &lt;code class="highlighter-rouge"&gt;std::map&amp;lt;unsigned, int&amp;gt;&lt;/code&gt; as the &lt;code class="highlighter-rouge"&gt;type&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;int&lt;/code&gt; type for &lt;code class="highlighter-rouge"&gt;modulo_&lt;/code&gt;, but I realized that there are already &lt;code class="highlighter-rouge"&gt;inverse&lt;/code&gt; function written for &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt;/&lt;code class="highlighter-rouge"&gt;mpz&lt;/code&gt;, so I changed the &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;std::map&amp;lt;unsigned, integer_class&amp;gt;&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;modulo_&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt;.
While implementing this, I thought of writing tests after doing the whole implementation. And when I wrote the tests, I realized how badly I had done the implementation, like missing corner cases and all. It is always a better practice to write tests parallely with your implementation.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So, As of now I have implemented the following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_add_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_sub_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_mul_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_quo_ground(const integer_class a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_add(const RCP&amp;lt;const GaloisField&amp;gt; &amp;amp;o)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_sub(const RCP&amp;lt;const GaloisField&amp;gt; &amp;amp;o)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_mul(const RCP&amp;lt;const GaloisField&amp;gt; &amp;amp;o)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where &lt;code class="highlighter-rouge"&gt;gf_*_ground&lt;/code&gt; does the operation represented by &lt;code class="highlighter-rouge"&gt;*&lt;/code&gt; by the integer &lt;code class="highlighter-rouge"&gt;a&lt;/code&gt; to the polynomaial in the given field.
And &lt;code class="highlighter-rouge"&gt;gf_add&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;gf_sub&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;gf_mul&lt;/code&gt; do their respective operation with another polynomial in the finite field.
&lt;br /&gt;
I will be implementing &lt;code class="highlighter-rouge"&gt;gf_div&lt;/code&gt; this weekend.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=146</guid>
      <title>GSoC: First Week of Coding Phase</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Tue, 24 May 2016 09:31:56 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/05/24/gsoc-first-week-of-coding-phase/</link>
      <description>&lt;p&gt;Since my last blog post I have opened two new PR&amp;#8217;s for the Project. We&amp;#8217;ll see what they do and discuss the goals of this week.&lt;/p&gt;
&lt;p&gt;A major issue in the first PR was the slow performing algorithms, a consequence of using recursive expressions internally. Most of the algorithm implemented used matrices module to solve the linear system which doesn&amp;#8217;t support &lt;code&gt;DMP&lt;/code&gt;&amp;#160;and &lt;code&gt;DMF&lt;/code&gt;&amp;#160;objects.&lt;/p&gt;
&lt;p&gt;So I defined a new class subclassed from &lt;code&gt;MutableDenseMatrix&lt;/code&gt;&amp;#160;and changed&amp;#160;some methods to make it work with Polynomials and Fractions and used this to use Polynomials internally. Thanks to Kalevi for this idea. It works much more robust now. I have also added methods to find composition of Holonomic Functions and converting a Hypergeometric Function to Holonomic. These things are added in this &lt;a href="https://github.com/sympy/sympy/pull/11115"&gt;PR&lt;/a&gt;.&amp;#160;I hope the PR gets merged in a couple of days.&lt;/p&gt;
&lt;p&gt;A new &lt;a href="https://github.com/sympy/sympy/pull/11153"&gt;PR&lt;/a&gt; was opened for features relating to recurrence relations in coefficients of Power Series expansion of Holonomic Functions. The first thing I did was defined a class &lt;code&gt;RecurrenceOperator&lt;/code&gt;&amp;#160;parallel to &lt;code&gt;DifferentialOperator&lt;/code&gt;&amp;#160;to store the recurrence relation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals of the Week:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this week, I have planned to define a function to find the Recurrence Relation of series coefficients and then go for numerical computation of Holonomic Functions. Let me know If anything else should be implemented first as I haven&amp;#8217;t discussed this with mentors yet.&lt;/p&gt;
&lt;p&gt;The chronology might be different from what I wrote in the Proposal but we are quite ahead of that.&lt;/p&gt;
&lt;p&gt;Cheers Everyone.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/146/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/146/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=146&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/Community-Bonding-Period</guid>
      <title>Community Bonding Period</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Mon, 23 May 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/Community-Bonding-Period/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;I have been selected for GSoC&amp;#8217;16 to work with &lt;a href="http://www.sympy.org/"&gt;Sympy&lt;/a&gt; on &lt;strong&gt;Implementing Finite Fields and Set module in SymEngine&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href="https://github.com/sympy/symengine"&gt;SymEngine&lt;/a&gt; is a standalone fast C++ symbolic manipulation library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id="about-the-proposal"&gt;About the Proposal&lt;/h1&gt;

&lt;p&gt;We all know that Polynomial factorization is one of the fundamental tools of the computer algebra systems. And in symbolic mathematics, it is one of the basic requirement over which other algorithms can be implemented.&lt;br /&gt;
Currently, SymEngine has the implementation of Univariate Polynomial class, which provides us the basic functionality to add, multiply and subtract two polynomials.&lt;br /&gt;
Now, comes the problem of factoring the polynomials.&lt;br /&gt;
We have explicit solution formulas only till polynomials of degree four(the Quadtratic formula for degree 2, &lt;a href="http://en.wikipedia.org/wiki/Cardano_formula#Cardano.27s_method"&gt;the Cardano formulas&lt;/a&gt; for third-degree equations, and &lt;a href="http://en.wikipedia.org/wiki/Quartic_function#The_general_case.2C_along_Ferrari.27s_lines"&gt;the Ferrari formula&lt;/a&gt; for degree 4).&lt;br /&gt;
For sure, we need a different way out for higher degree polynomials.
We see that there are algorithms for factorization in finite fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm"&gt;Cantor&amp;#8211;Zassenhaus algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Berlekamp's_algorithm"&gt;Berlekamp&amp;#8217;s algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, this summers I will be working on converting a polynomial in integer field to finite field, then factorizing them. After which we have to do &lt;a href="https://en.wikipedia.org/wiki/Hensel's_lemma"&gt;Hensel Lifting&lt;/a&gt; to bring back the factored polynomial to integer field.&lt;/p&gt;

&lt;p&gt;Furthermore, I will be working on implementing Sets module. These two together will help us to create a basic infrastructure over which we can develop a solvers module in SymEngine.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My proposal can be found &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Nishant-Nikhil:-Implementing-Finite-Fields-and-Set-module-in-SymEngine"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="community-bonding-period"&gt;Community Bonding Period&lt;/h1&gt;

&lt;p&gt;I have been alloted &lt;a href="https://github.com/isuruf"&gt;Isuru Fernando&lt;/a&gt;, &lt;a href="https://github.com/thilinarmtb"&gt;Thilina Rathnayake&lt;/a&gt;, &lt;a href="https://github.com/Sumith1896"&gt;Sumith&lt;/a&gt; and &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt; as mentors.&lt;br /&gt;
The SymEngine community is very fast in reachability.
We had a discussion on &lt;a href="https://gitter.im/symengine/symengine"&gt;gitter channel of SymEngine&lt;/a&gt;, about the proceedings of our Proposals. As SymEngine has an implementaion of sparse polynomials, I will be working on changing them to Finite Fields. Like:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;GaloisField::GaloisField(std::map&amp;lt;unsigned, int&amp;gt; &amp;amp;dict, unsigned modulo) : modulo_(modulo)
{
	unsigned temp;
	for (auto iter : dict) {
		temp = iter.second % modulo;
		if (temp != 0)
			dict_[iter.first] = temp;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
where &lt;code class="highlighter-rouge"&gt;dict&lt;/code&gt; is the dictionary of Univariate Polynomial representation and, &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; stores its finite field representation modulo &lt;code class="highlighter-rouge"&gt;modulo_&lt;/code&gt;.
I will be implementing this in the first week of GSoC period.&lt;/p&gt;

&lt;h1 id="work-already-done"&gt;Work already Done&lt;/h1&gt;

&lt;p&gt;During the Community Bonding Period, I worked on implementing &lt;a href="https://github.com/symengine/symengine/pull/934"&gt;&lt;code class="highlighter-rouge"&gt;UniversalSet&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine/pull/942"&gt;&lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;UniversalSet&lt;/code&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern"&gt;singleton class&lt;/a&gt; like &lt;code class="highlighter-rouge"&gt;EmptySet&lt;/code&gt;, and while implementing this I learned a lot about Singleton classes.&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; is a class with a set of &lt;code class="highlighter-rouge"&gt;RCP&amp;lt;const Basic&amp;gt;&lt;/code&gt; as member variable. It can contain any object of &lt;code class="highlighter-rouge"&gt;Basic&lt;/code&gt; type. While implemeting this, we came on a fix over what to do when we have a interval like [1, 1], i.e. both end points equal. This led to a little change in &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt;&amp;#8217;s code, and now it returns a &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt;. Though this PR is not merged till now. I hope to get it merged in the next few days and along with it keep working on Finite Field implementation.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/Community Bonding period ends, starts Coding period</guid>
      <title>Community Bonding period ends, Coding period starts</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sun, 22 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/coding_period_starts.html</link>
      <description>&lt;p&gt;
The Community bonding period comes to an end now. First of all considering the issues described in the last post:
&lt;ul&gt;
&lt;li&gt;
Aaron created a new channel for our GSoC project discussion, &lt;a href="https://gitter.im/sympy/GroupTheory"&gt;sympy/GroupTheory&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
I have also added rss-feed in my blog.
&lt;/li&gt;
&lt;li&gt;
As for time of meeting, me and Kalevi often have discussion on the gitter channel, but since of quite a bit differene in timings between me and Aaron (I tend to sleep early at 11 PM IST). We three haven't been able to together have a meeting. Though Aaron suggested "Kalevi is the primary mentor, so if you have to meet without me that is fine". I also think that's not too big of an issue now, but his opinion has always helped, since he has best knowledge of sympy core.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
In the past few weeks I wasn't too much productive, since I had a touch of fever, anyways I am okay now. We have now completed the implementation of the &lt;code&gt;FreeGroup&lt;/code&gt; class in &lt;a href="https://github.com/sympy/sympy/pull/10350"&gt;PR #10350&lt;/a&gt;. I started working on the PR back in January but I halted, since of my semester classes. &lt;code&gt;FreeGroup&lt;/code&gt; is quite similar to the &lt;code&gt;PolyRing&lt;/code&gt; implemented in &lt;code&gt;sympy.polys.rings.py&lt;/code&gt;. We first started with the list of tuples as the data structure for the &lt;code&gt;FreeGroupElm&lt;/code&gt;, where each tuple being &lt;code&gt;(index, exp)&lt;/code&gt;, but since of the mutable nature of lists, Kalevi suggested to go with tuple of tuples. Also as tuples are probably more efficient as there is no 'housekeeping' overhead. Also changed the element from &lt;code&gt;(index, exp)&lt;/code&gt; --&gt; &lt;code&gt;(symbol, exp)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
 Implementing &lt;code&gt;FreeGroupElm&lt;/code&gt; deals elegantly in such a way that it can't be independently created in a public interface. The reason being: every &lt;code&gt;FreeGroupElm&lt;/code&gt; is in itself created only by the &lt;code&gt;dtype&lt;/code&gt; method of &lt;code&gt;FreeGroup&lt;/code&gt; class. The assignment is as follows:
&lt;br /&gt;
  &lt;code&gt;obj.dtype = type("FreeGroupElm", (FreeGroupElm,), {"group": obj})&lt;/code&gt;
&lt;br /&gt;.

Its sort of an advanced usage of &lt;code&gt;type&lt;/code&gt; function as a &lt;a href="http://www.stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"&gt;metaclass&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Currently the printing code of &lt;code&gt;latex&lt;/code&gt; and &lt;code&gt;pprint&lt;/code&gt; for &lt;code&gt;FreeGroupElm&lt;/code&gt; is a little hacky. I need to work on that as well.
&lt;/p&gt;

&lt;br /&gt;
&lt;p&gt;
&lt;b&gt;&lt;u&gt;Plan for Next few weeks&lt;/u&gt;&lt;/b&gt;
&lt;br /&gt;&lt;br /&gt;
Though according to my &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Gaurav-Dhingra:-Group-Theory#Proposed_Timeline"&gt;proposal timeline&lt;/a&gt;, we described to go with implementation of other algebraic structures i.e &lt;code&gt;Magma&lt;/code&gt;, &lt;code&gt;SemiGroup&lt;/code&gt;, &lt;code&gt;Monoid&lt;/code&gt;. But we will next move onto &lt;b&gt;"Coset Enumeration"&lt;/b&gt;. It is going to be a big task. That is harder and more important than other algebraic structures. Timline states it to be 5 week task, thats almost half the GSoC coding period. Well how do we go about that? I think of studying the mathematics in parallel with the implementation.
&lt;/p&gt;

&lt;p&gt;
We have created a PR for implementation of Finitely Presented Group &lt;a href="https://github.com/sympy/sympy/pull/11140"&gt;#11140&lt;/a&gt;. Not much code has been added here. Paper on Coset Enumeration using &lt;a href="http://staff.itee.uq.edu.au/havas/1973cdhw.pdf"&gt;Implementation and Analysis of Todd Coxeter Algorithm&lt;/a&gt; (by John J. Cannon, George Havas), and other paper being the original paper by Todd and Coxeter, "A practical method for enumerating cosets of a finite abstract group" are the ones I am reading. As for the implementation of Todd Coxeter, we will be following the methods described in the book "Handbook of Computational Group Theory" by Derek F. Holt.
&lt;/p&gt;

&lt;p&gt;
Also now the "official" coding period begins, good luck to everyone.
&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=196</guid>
      <title>GSoC Community Bonding Period Week 4</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sun, 22 May 2016 08:08:59 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/22/gsoc-community-bonding-period-week-4/</link>
      <description>&lt;p&gt;The last week of Community Bonding period was awesome. From tomorrow onwards, the coding period will begin. I am supposed to start working on my project from tomorrow, but I have done that already from the second week of the Community Bonding Period because I was supposed to take a vacation of 4 days (25 May &amp;#8211; 29 May). Due to some issues, I have had to cancel that vacation. Now I have got some more days to work on my project. Let&amp;#8217;s see what I have done so far&amp;#8230;&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;&amp;#160;had finally got merged.&lt;/li&gt;
&lt;li&gt;&amp;#160;&lt;code&gt;rewrite(Piecewise)&lt;/code&gt;&amp;#160;:- In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;, I was trying to solve the &amp;#160;&lt;code&gt;arg = 0&lt;/code&gt;&amp;#160;part using solve functionality in sympy. But Jason suggested not to use solve as because there may arise some cases when solve will not be able to provide the desired output. So I kept &amp;#160;the&amp;#160;&lt;code&gt;arg = 0&lt;/code&gt;&amp;#160;part as &amp;#160;it is. &amp;#160;The story doesn&amp;#8217;t end here. There is a confusion regarding keeping the check for whether &amp;#160;&lt;code&gt;arg&lt;/code&gt;&amp;#160;is real. Personally, I think that check should be there since both Heaviside and DiracDelta is defined only on real axis.&lt;/li&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11137"&gt;PR 11137&lt;/a&gt;, I have improved the doc strings&amp;#160;of all the methods under DiracDelta and Heaviside classes. I have added the contextual example for DiracDelta(x, k) and described the relation between fdiff() and diff() . This pull request needs a final review.&lt;/li&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11139"&gt;PR 11139&lt;/a&gt;, I have added the functionality to pretty print the DiracDelta(x) as&amp;#160;&lt;span style="line-height: 1.7;"&gt;&amp;#948;(x).&amp;#160;This pull request also needs a final review.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Finally, almost every proposed improvement under the issue &lt;a href="https://github.com/sympy/sympy/issues/11075"&gt;11075&lt;/a&gt;&amp;#160;is being fulfilled.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;My plans for next weeks are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To polish&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;,&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11137"&gt;PR 11137&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11139"&gt;PR 11139&lt;/a&gt;&amp;#160;and get them merged.&lt;/li&gt;
&lt;li&gt;To start working on the&amp;#160;implementation of Singularity Functions.&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/196/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/196/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=196&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/05/21/Pre-GSoC</guid>
      <title>Pre GSoC and Community Bonding</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sat, 21 May 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/05/21/Pre-GSoC/</link>
      <description>&lt;h3 id="the-kronecker-substitution"&gt;The Kronecker Substitution&lt;/h3&gt;
&lt;p&gt;I started off my work by reading through the existing &lt;code class="highlighter-rouge"&gt;mul_poly&lt;/code&gt; function. It uses the Kronecker Substitution technique to multiply two polynomials. An insight can be gained by looking at the slides &lt;a href="http://web.maths.unsw.edu.au/~davidharvey/talks/kronecker-talk.pdf"&gt;here&lt;/a&gt;. Think of it this way,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;#8220;If you evaluate a polynomial at a large enough power of 10, I bet you can tell all it&amp;#8217;s coefficients just by looking at the result!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The mentioned slides call this the KS1 algorithm. Another algorithm it proposes is the KS2 algorithm, which evaluates the polynomial at two points (in contrast to just one) to interpolate the polynomial. A more mathematical explanation on the two techniques can be found &lt;a href="http://arxiv.org/pdf/0712.4046v1.pdf"&gt;here&lt;/a&gt;. I implemented the algorithm, and it wasn&amp;#8217;t too difficult, as it was a a slight modification to the already existing multiplication technique. Later, I added a benchmark test for comparing the two techniques, KS1 &amp;amp; KS2. The benchmark (roughly) calculates the ratio of the time required for multiplying two polynomials using the two algorithms. Both the polynomial length (from 1 to 10,000) and the bit length of the coefficients (5, 10, 15, 20 bits) were varied. The graphs of the benchmarking are as follows.&lt;/p&gt;

&lt;p&gt;Linear &amp;amp; Log scale :
&lt;img alt="" src="http://srajangarg.github.io/assets/ll.png" /&gt;
During this time, I was asked by Isuru to switch work towards the polynomial interface with FLINT &amp;amp; Piranha (and shift the polynomial manipulations to the end of summer). So, the PR hasn&amp;#8217;t been merged in yet, and no conclusions and observations have been made between the two algorithms as of yet. Will be done later during the summer. Here&amp;#8217;s the PR &lt;a href="https://github.com/symengine/symengine/pull/930"&gt;#930&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="dictionary-wrappers"&gt;Dictionary wrappers&lt;/h3&gt;
&lt;p&gt;I also started work on Dictionary wrappers for SymEngine. One was already made, for the &lt;code class="highlighter-rouge"&gt;UnivariatePolynomial&lt;/code&gt; class aka the class for univariate polynomials with symbolic coefficients. It is a map from &lt;code class="highlighter-rouge"&gt;int -&amp;gt; Expression&lt;/code&gt;. We needed another wrapper for the &lt;code class="highlighter-rouge"&gt;uint -&amp;gt; integer_class&lt;/code&gt; map, so that the &lt;code class="highlighter-rouge"&gt;UnivariateIntPolynomial&lt;/code&gt; class can be structured the same way as the former. Now that we need almost the same functionality, why not temlatize the wrapper? (suggested by Isuru) That&amp;#8217;s what I did, and the PR &lt;a href="https://github.com/symengine/symengine/pull/946"&gt;#946&lt;/a&gt; is almost merged in. More on wrappers next time!&lt;/p&gt;

&lt;h3 id="miscellaneous-issues"&gt;Miscellaneous issues&lt;/h3&gt;
&lt;p&gt;Most of my work during this period revolved around reading the existing polynomial class, and refactor it and removed any redundancies. Some of the miscellaneous work that was done :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Some refactoring was done in the &lt;code class="highlighter-rouge"&gt;dict.cpp&lt;/code&gt; file. There were some redundancy in the functions which was removed. Templatized methods for checking equality and comparing vectors (and sets) were made. Other specific &lt;code class="highlighter-rouge"&gt;eq&lt;/code&gt; &amp;amp; &lt;code class="highlighter-rouge"&gt;compare&lt;/code&gt; methods became derived methods of these base classes. &lt;a href="https://github.com/symengine/symengine/pull/933"&gt;#933&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Initially, the &lt;code class="highlighter-rouge"&gt;mul_poly&lt;/code&gt; method was constructing a vector of coefficients for the resulting multiplied polynomial (thus, implicitly storing it in a dense representation for a while). However, it was returned as a sparse represented polynomial, using a dictionary. This was changed, so that the dictionary is directly created, and the intermediate vector isn&amp;#8217;t requireds. Also, some changes in variable names for clarity, as well as removing the redundant function &lt;code class="highlighter-rouge"&gt;dict_add_term&lt;/code&gt;. &lt;a href="https://github.com/symengine/symengine/pull/928"&gt;#928&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A redundant function &lt;code class="highlighter-rouge"&gt;create&lt;/code&gt; was removed. All it was doing was calling &lt;code class="highlighter-rouge"&gt;from_vec&lt;/code&gt; within the same class. &lt;a href="https://github.com/symengine/symengine/pull/941"&gt;#941&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you next week, Goodbye!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/05/20/Community-Bonding.html</guid>
      <title>Community Bonding Period</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 20 May 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/05/20/Community-Bonding.html</link>
      <description>&lt;p&gt;The community bonding period is coming to a close and so I&amp;#8217;d like to write
about what I&amp;#8217;ve done/learned during this time. I&amp;#8217;ve had the opportunity to
create my first blog, have my first meeting with my mentors, submit a couple of
minor pull requests to pydy and sympy, add an example script to the pydy
repository, begin learning about spatial vectors and begin work on some
benchmarking code.&lt;/p&gt;

&lt;p&gt;This is my first attempt at blogging and I had some trouble initially setting
it up. For starters I did not know what an RSS feed was or for what it was
used. Also I wanted the blog to be hosted on github pages where I currently
keep my collection of notes and thus I decided to try to use the jekyll static
site backend that github uses. I tried, however, to isolate the blog in its own
subfolder with the rest of my GSoC information but this caused all kinds of
problems with posts showing up multiple times and the RSS feed not updating
properly. I eventually decided to stop trying to separate the posts and just
centrally locate them as is demonstrated in the jekyll documentation. For the
RSS feed I used a template that I found online. Now the posts appeared properly
and the RSS feed updated correctly. The last thing I wanted to do for my blog
before I considered it officially set up was to have some method of allowing
people to comment on my posts. I found a blog post online on how to achieve
this without the need for anything other than what github pages offers and so I
set out to try this method. I used the code shown on the blog post without any
luck. Prior to this I have had zero experience working with javascript and so
I didn&amp;#8217;t even know where to begin to try to debug why the comments were not
showing up and so I sent the writer of the blog post an email asking for his
assistance. And he replied! He pointed out that I was missing the part where a
java script library would be loaded for use on the page and once I added the
couple of lines of code, commenting on my blog posts is now possible (At least I
think that&amp;#8217;s what the problem was but again I have no experience working with
javascript). With the ability to comment added, my blog is completely set up
and is connected to the correct channels for the Google Summer of Code.&lt;/p&gt;

&lt;p&gt;Early in the community bonding period I was able to have my first meeting with
my mentors for my project. During this meeting it was discussed that I could
change the later portion of my project from working on implementing a Newton
Euler method of equations of motion generation to implementing the faster
Featherstone method. Considering I had no great attachment to the Newton Euler
method I agreed that the faster method would provide a greater benefit for the
overall project. Since the meeting I have spent some time reading on the math
involved in the Featherstone method, specifically spatial vectors and their
uses in dynamics. To this end I have read &lt;a href="http://ieeexplore.ieee.org/xpls/icp.jsp?arnumber=5569032#article"&gt;A Beginners Guide to 6-D Vectors
(Part 1)&lt;/a&gt; and
started reading both &lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D Vectors (Part
2)&lt;/a&gt; and Roy
Featherstone&amp;#8217;s short course on spatial vector algebra.&lt;/p&gt;

&lt;p&gt;I have also spent some time beginning to familiarize myself with the code that
I will be working with. To begin I followed Jason Moore&amp;#8217;s great suggestion of
coding through one of the examples from my dynamics course and adding it to the
pydy/examples folder in the pydy repository. The example I chose to use was a
&lt;a href="http://jbm950.github.io/../../../notes/analytical_dynamics/analytical_dynamics_main.html#e_basic_equation_of_motion"&gt;simple
pendulum&lt;/a&gt;
so that I could focus on the code rather than the complexities of the problem
itself. This code and diagram are currently undergoing the review process now
in order to be added to the pydy repository.&lt;/p&gt;

&lt;p&gt;Lastly I have begun work on benchmarking code which is mentioned as part of my
project itself. In working on this part of the project I was able to learn how
to use a SQLite database with python which I had only obtained brief exposure
to in the past. This code currently works using python&amp;#8217;s timeit library to run
a file utilizing Lagrange&amp;#8217;s method of equations of motion generation and
another using Kane&amp;#8217;s method. The code runs each file several thousand times and
iterates through this process 30 times and saves the average of the 30 runs
along with several other useful bits of information about the computer and
version of python being used to run the tests. In addition to the benchmarking
code itself I have been working on a script that will allow viewing of a graph
of the tests utilizing matplotlib and tkinter. This code is close to completion
and the current next major addition will be to add the ability to filter the
tests based on what platform was used/what version of python was used to run
the tests.&lt;/p&gt;

&lt;p&gt;This community bonding period has been productive and I am excited to begin the
Google Summer of Code program on Monday.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/moving-away-from-python-2/</guid>
      <title>Moving Away from Python 2</title>
      <author>Aaron Meurer (asmeurer)</author>
      <pubDate>Thu, 19 May 2016 18:00:00 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/moving-away-from-python-2/</link>
      <description>&lt;div&gt;&lt;p&gt;About a month ago I tweeted this:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Thought: get the maintainers of a bunch of big Python libraries to sign something saying that they WILL drop Python 2.7 support in 2020.&lt;/p&gt;&amp;#8212; Aaron Meurer (@asmeurer) &lt;a href="https://twitter.com/asmeurer/status/712304912428875776"&gt;March 22, 2016&lt;/a&gt;&lt;/blockquote&gt;



&lt;p&gt;&lt;strong&gt;EDIT: Some people have started working on making this happen. See
&lt;a href="https://python3statement.github.io/"&gt;https://python3statement.github.io/&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For those of you who don't know, Python 2.7 is
&lt;a href="https://docs.python.org/devguide/#status-of-python-branches"&gt;slated&lt;/a&gt; to reach
end-of-life in 2020 (originally, it was slated to end in 2015, but it was
extended in 2014, due to the extraordinary difficulty of moving to a newer
version). "End-of-life" means absolutely no more support from the core Python
team, even for security updates.&lt;/p&gt;
&lt;p&gt;I'm writing this post because I want to clarify why I think this should be
done, and to clear up some misconceptions, the primary one being that this
represents library developers being antagonistic against those who want or
have to use Python 2.&lt;/p&gt;
&lt;p&gt;I'm writing this from my perspective as a library developer. I'm the lead
developer of &lt;a href="http://www.sympy.org/"&gt;SymPy&lt;/a&gt;, and I have sympathies for
developers of other libraries.&lt;sup id="fnref:sympy"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:sympy" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I say this because my idea may seem a bit
in tension with "users" (even though I hate the "developer/user" distinction).&lt;/p&gt;
&lt;h3&gt;Python 2&lt;/h3&gt;
&lt;p&gt;There are a few reasons why I think libraries should drop (and announce that
they will drop) Python 2 support by 2020 (actually earlier, say 2018 or 2019,
depending on how core the library is).&lt;/p&gt;
&lt;p&gt;First, library developers have to be the leaders here. This is apparent from
the historical move to Python 3 up to this point. Consider the three (not
necessarily disjoint) classes of people: CPython core developers, library
developers, and users. The core developers were the first to move to Python 3,
since they were the ones who wrote it. They were also the ones who provided
the messaging around Python 3, which has varied over time. In my opinion, it
should have been and should be more forceful.&lt;sup id="fnref:core"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:core" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; Then you have the library
developers and the users. A chief difference here is that users are probably
going to be using only one version of Python. In order for them to switch that
version to Python 3, all the libraries that they use need to support it. This
took some time, since library developers saw little impetus to support Python
3 when no one was using it (Catch 22), and to worsen the situation, versions
of Python older than 2.6 made
&lt;a href="https://asmeurersympy.wordpress.com/2013/08/22/python-3-single-codebase-vs-2to3/"&gt;single codebase compatibility&lt;/a&gt;
almost impossible.&lt;/p&gt;
&lt;p&gt;Today, though, &lt;a href="http://py3readiness.org/"&gt;almost all libraries&lt;/a&gt; support Python
3, and we're reaching a point where those that don't have
forks that do.&lt;/p&gt;
&lt;p&gt;But it only happened &lt;em&gt;after&lt;/em&gt; the library developers transitioned. I believe
libraries need to be the leaders in moving away from Python 2 as well. It's
important to do this for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python 2.7 support ends in 2020. That means all updates, including security
  updates. For all intents and purposes, Python 2.7 becomes an insecure
  language to use at that point in time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supporting two major versions of Python is technical debt for every project
  that does it. While writing cross compatible code is
  &lt;a href="http://python-future.org/"&gt;easier than ever&lt;/a&gt;, it still remains true that
  you have to remember to add &lt;code&gt;__future__&lt;/code&gt; imports to the top of every file,
  to import all relevant builtins from your compatibility file or library, and
  to run all your tests in both Python 2 and 3. Supporting both versions is a
  major cognitive burden to library developers, as they always have to be
  aware of important differences in the two languages. Developers on any
  library that does anything with strings will need to understand how things
  work in both Python 2 and 3, and the often obscure workarounds required for
  things to work in both (pop quiz: how do you write Unicode characters to a
  file in a Python 2/3 compatible way?).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of Python 3's
  &lt;a href="https://asmeurer.github.io/python3-presentation/slides.html"&gt;new syntax features&lt;/a&gt;
  (i.e., features that are impossible to use in Python 2) only matter for
  library developers. A great example of this is
  &lt;a href="https://www.python.org/dev/peps/pep-3102/"&gt;keyword-only arguments&lt;/a&gt;. From an
  API standpoint, almost every instance of keyword arguments should be
  implemented as keyword-only arguments. This avoids mistakes that come from
  the antipattern of passing keyword arguments without naming the keyword, and
  allows the argspec of the function to be expanded in the future without
  breaking API.&lt;sup id="fnref:swift"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:swift" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second reason I think library developers should agree to drop Python 2
support by 2020 is completely selfish. A response that I heard on that tweet
(as well as elsewhere), was that libraries should provide carrots, not sticks.
In other words, instead of forcing people off of Python 2, we should make them
want to come to Python 3. There are some issues with this argument. First,
Python 3 already has
&lt;a href="https://asmeurer.github.io/python3-presentation/slides.html"&gt;tons of carrots&lt;/a&gt;.
Honestly, not being terrible at Unicode ought to be a carrot in its own right.&lt;sup id="fnref:unicode"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:unicode" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If you don't deal with strings, or do but don't care about those silly
foreigners with weird accents in their names, there are other major carrots as
well. For SymPy, the fact that 1/2 gives 0 in Python 2 has historically been a
major source of frustration for new users. Imagine writing out &lt;code&gt;1/2*x +
x**(1/2)*y*z - 3*z**2&lt;/code&gt; and wondering why half of what you wrote just
"disappeared" (granted, this was worse before we
&lt;a href="https://asmeurersympy.wordpress.com/2011/08/18/sqrtx-now-prints-as-sqrtx/"&gt;fixed the printers&lt;/a&gt;).
While &lt;code&gt;integer/integer&lt;/code&gt; not giving a rational number is a major
&lt;a href="http://docs.sympy.org/latest/tutorial/gotchas.html#two-final-notes-and"&gt;gotcha&lt;/a&gt;
for SymPy, giving a float is infinitely better than giving what is effectively
the wrong answer. Don't use strings or integers?
&lt;a href="https://asmeurer.github.io/python3-presentation/slides.html"&gt;I've got more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Frankly, if these "carrots" haven't convinced you yet, then I'll wager you're
not really the sort of person who is persuaded by carrots.&lt;/p&gt;
&lt;p&gt;Second, some "carrots" are impossible unless they are implemented in
libraries. While some features can be implemented in 2/3 compatible code and
only work in Python 3 (such as &lt;code&gt;@&lt;/code&gt; matrix multiplication), others, such as
keyword-only arguments, can only be implemented in code that does not support
Python 2. Supporting them in Python 2 would be a net deficit of technical debt
(one can imagine, for instance, trying to support keyword-only arguments
manually using &lt;code&gt;**kwargs&lt;/code&gt;, or by using some monstrous meta-programming).&lt;/p&gt;
&lt;p&gt;Third, as I said, I'm selfish. Python 3 &lt;em&gt;does&lt;/em&gt; have carrots, and I want them.
As long as I have to support Python 2 in my code, I can't use keyword-only
arguments, or extended argument unpacking, or async/await, or any of the
dozens of features that can't be used in cross compatible code.&lt;/p&gt;
&lt;p&gt;A counterargument might be that instead of blocking users of existing
libraries, developers should create new libraries which are Python 3-only and
make use of new exciting features of Python 3 there. I agree we should do
that, but existing libraries are good too. I don't see why developers should
throw out all of a well-developed library just so they can use some Python
features that they are excited about.&lt;/p&gt;
&lt;h3&gt;Legacy Python&lt;/h3&gt;
&lt;p&gt;A lot of people have taken to calling Python 2
"&lt;a href="https://twitter.com/RipLegacyPython"&gt;legacy Python&lt;/a&gt;". This phrase is often
used condescendingly and
&lt;a href="https://twitter.com/stephtdouglas/status/713433933040340993"&gt;angers a lot of people&lt;/a&gt;
(and indeed, this blog post is the first time I've used it myself). However, I
think Python 2 really should be seen this way, as a "legacy" system. If you
want to use it, for whatever your reasons, that's fine, but just as you
shouldn't expect to get any of the newest features of Python, you shouldn't
expect to be able to use the newest versions of your libraries. Those
libraries that have a lot of development resources may choose to support older
Python 2-compatible versions with bug and/or security fixes. Python 2 itself
will be supported for these until 2020. Those without resources probably won't
(keep in mind that you're using open source libraries without paying money for
them).&lt;/p&gt;
&lt;p&gt;I get that some people have to use Python 2, for whatever reasons. But using
outdated software comes at a cost. Libraries have borne this technical debt
for the most part thus far, but they shouldn't be expected to bear it forever.
The debt will only increase, especially as the technical opportunity cost, if
you will, of not being able to use newer and shinier versions of Python 3
grows. The burden will have to shift at some point. Those with the financial
resources may choose to offload this debt to others,&lt;sup id="fnref:continuum"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fn:continuum" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; say, by
backporting features or bugfixes to older library versions that support Python
2 (or by helping to move code to Python 3).&lt;/p&gt;
&lt;p&gt;I want to end by pointing out that if you are, for whatever reason, still
using Python 2, you may be worried that if libraries become Python 3-only and
start using Python 3 features, won't that break your code? The answer is no.
Assuming package maintainers mark the metadata on their packages correctly,
tools like pip and conda will not install non-Python 2 compatible versions
into Python 2.&lt;/p&gt;
&lt;p&gt;If you haven't transitioned yet, and want to know more, a good place to start
is the &lt;a href="https://docs.python.org/3/howto/pyporting.html"&gt;official docs&lt;/a&gt;. I also
highly recommend using &lt;a href="http://conda.pydata.org/docs/"&gt;conda&lt;/a&gt; environments, as
it will make it easy to separate your Python 2 code from your Python 3 code.&lt;/p&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:sympy"&gt;
&lt;p&gt;With that being said, the opinions here are entirely my own, and are
    don't necessarily represent those of other people, nor do they
    represent official SymPy policy (no decisions have been made by the
    community about this at this time).&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:sympy" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:core"&gt;
&lt;p&gt;It often feels like core Python itself doesn't really want people to
    use Python 3. It's little things, like
    &lt;a href="https://docs.python.org/library/"&gt;docs links&lt;/a&gt; that redirect to Python
    2, or &lt;a href="https://www.python.org/dev/peps/pep-0394/"&gt;PEP 394&lt;/a&gt;, which
    still says that the &lt;code&gt;python&lt;/code&gt; should always point to Python 2.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:core" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:swift"&gt;
&lt;p&gt;In Swift, Apple's new language for iOS and OS X, function parameter
    names are effectively "keyword-only"
    &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html"&gt;by default&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:swift" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:unicode"&gt;
&lt;p&gt;As an example of this, in conda, if you use Python 2 in the root
    environment, then installing into a path with non-ASCII characters is
    unsupported. This is common on Windows, because Windows by default
    uses the user's full name as the username, and the default conda
    install path is in the user directory.&lt;/p&gt;
&lt;p&gt;This is unsupported except in Python 3, because to fix the issue,
every single place in conda where a string appears would have to be
changed to use a &lt;code&gt;unicode&lt;/code&gt; string in Python 2. The basic issue is that
things like &lt;code&gt;'&amp;#960;' + u'i'&lt;/code&gt; raise &lt;code&gt;UnicodeDecodeError&lt;/code&gt; in Python 2 (even
though &lt;code&gt;'&amp;#960;' + 'i'&lt;/code&gt;, &lt;code&gt;u'&amp;#960;' + 'i'&lt;/code&gt;, and &lt;code&gt;u'&amp;#960;' + u'i'&lt;/code&gt; all work fine).
You can read a more in-depth description of the problem
&lt;a href="https://github.com/sympy/sympy/pull/9692#issuecomment-126162173"&gt;here&lt;/a&gt;.
Incidentally, this is also why you should never use &lt;code&gt;from __future__
import unicode_literals&lt;/code&gt; in Python 2, in my opinion.&lt;/p&gt;
&lt;p&gt;I no longer work on conda, but as far as I know, the
&lt;a href="https://github.com/conda/conda/issues/1180"&gt;issue&lt;/a&gt; remains unfixed.
Of course, this whole thing works just fine if conda is run in Python
3.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:unicode" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:continuum"&gt;
&lt;p&gt;If that legitimately interests you, I
    &lt;a href="https://twitter.com/pwang/status/712780279211884546"&gt;hear Continuum&lt;/a&gt;
    may be able to help you.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/moving-away-from-python-2/#fnref:continuum" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=201</guid>
      <title>GSoC 2016 &#x2013; All set to go</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Wed, 18 May 2016 16:06:07 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/05/18/gsoc-2016-all-set-to-go/</link>
      <description>&lt;p&gt;GSoC Coding period is about to start&amp;#160;next week.&lt;/p&gt;
&lt;p&gt;The past week I was focused on completing the &lt;a href="https://github.com/symengine/symengine.rb/pull/38" target="_blank"&gt;NTheory Ruby wrappers&lt;/a&gt;, in order to complete my promised workload for the pre-coding time.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The main lessons learnt from this week&amp;#8217;s work was handling conversions&amp;#160;between Ruby and C types. This proved to be a quite easy task, with the Ruby C API.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://silverhammermba.github.io/emberb/c/#numeric" target="_blank"&gt;The Definitive Guide to Ruby&amp;#8217;s C API&lt;/a&gt;&amp;#160;covers this in detail.&lt;/p&gt;
&lt;p&gt;Then I&amp;#160;had to figure out how to let SymEngine Integers to be implicitly convertible into Ruby numeric types. This proved tricky for me to get around as I wasn&amp;#8217;t aware that it could&amp;#160;be done in the actual Ruby code, without having to use the Ruby C API. The implicit conversion to Ruby numeric types was quite easy.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;As shown in the gist above, I just had to declare the class in the lib folder with the necessary conversion method.&lt;/p&gt;
&lt;p&gt;With this part done, several number theory functions can now be called upon SymEngine Integers. Those functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCD&lt;/li&gt;
&lt;li&gt;LCM&lt;/li&gt;
&lt;li&gt;Mod&lt;/li&gt;
&lt;li&gt;Next Prime&lt;/li&gt;
&lt;li&gt;Quotient&lt;/li&gt;
&lt;li&gt;Fibonacci Number&lt;/li&gt;
&lt;li&gt;Lucas Number&lt;/li&gt;
&lt;li&gt;Binomials&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that this part is done, the next step would be to start coding from next Monday. From my proposed plan, the first two weeks would be for wrapping Complex Numbers and Floating Point Numbers for Ruby.&lt;/p&gt;
&lt;p&gt;See you after the first week.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/201/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/201/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=201&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=89</guid>
      <title>GSoC: Community Bonding Period</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sun, 15 May 2016 14:25:31 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/05/15/gsoc-community-bonding-period/</link>
      <description>&lt;p&gt;The 4th week of Community Bonding Period is about to kick off. I am here to write about what I&amp;#8217;ve done so far and my goals for next week.&lt;/p&gt;
&lt;p&gt;The first &lt;a href="https://github.com/sympy/sympy/pull/10793" target="_blank"&gt;PR&lt;/a&gt;&amp;#160;for the project &amp;#8220;Implementation of Holonomic Function&amp;#8221; got merged today. This adds following functionality in SymPy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Differential Operators with Polynomial Coefficients and operation like addition, multiplication etc.&lt;/li&gt;
&lt;li&gt;Holonomic Functions. A representation of Holonomic Functions given its annihilator and Initial Conditions (optional).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A little about the API to get you an idea of this.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; from sympy import *&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.holonomic import HolonomicFunction, DiffOperatorAlgebra&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; x = symbols(&amp;#8216;x&amp;#8217;)&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; R, Dx = DiffOperatorAlgebra(ZZ.old_poly_ring(x), &amp;#8216;Dx&amp;#8217;)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; Dx * x&lt;br /&gt;
(1) + (x)Dx&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; HolonomicFunction(Dx &amp;#8211; 1, x, 0, [1]) + HolonomicFunction(Dx**2 + 1, x, 0, [0, 1])&lt;br /&gt;
HolonomicFunction((-1) + (1)Dx + (-1)Dx**2 + (1)Dx**3, x), f(0) = 1, f'(0) = 2, f&amp;#8221;(0) = 1&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Operations supported for Differential Operators are addition, multiplication, subtraction and power. Holonomic Functions can be added and multiplied with or without giving the Initial Conditions. Special thanks to&amp;#160;&lt;a href="https://github.com/certik" target="_blank"&gt;Ondrej&lt;/a&gt;,&amp;#160;&lt;a href="https://github.com/jksuom" target="_blank"&gt;Kalevi&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt;&amp;#160;for all the help, suggestions and reviews.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What Now?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now the goal is to use Polynomials and Fractions i.e. instances of &lt;code&gt;DMP&lt;/code&gt;&amp;#160;and &lt;code&gt;DMF&lt;/code&gt;&amp;#160;classes instead of expressions for all the manipulation done internally. This is necessary for robustness. After that is done I work on to implement conversion of Hypergeometric Functions to Holonomic Functions.&lt;/p&gt;
&lt;p&gt;This has been super exciting so far and I hope same for future.&lt;/p&gt;
&lt;p&gt;Thank You.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/89/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/89/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=89&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=94</guid>
      <title>GSoC Community Bonding Period Week 3</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sat, 14 May 2016 16:33:04 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/14/gsoc-community-bonding-period-week-3/</link>
      <description>&lt;p&gt;Hi there ! This week was great. I got to learn about many new things. I have mentioned in my last post, about my goals for this week, let us see what I have done so far.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;So far&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;, implementation of &amp;#160;&lt;code&gt;_eval_expand_diracdelta&lt;/code&gt;&amp;#160;is almost done . A final review is needed. But at the same time, I was forgetting about the fact that the &amp;#160;&amp;#160;&lt;code&gt;simplify&lt;/code&gt;&amp;#160; method has to be deprecated in order to make things backwards compatible. Thanks&amp;#160;&lt;a href="http://www.github.com/moorepants"&gt;Jason&lt;/a&gt;&amp;#160;for the suggestion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have made&amp;#160;the &lt;code&gt;simplify()&lt;/code&gt; method call the&amp;#160;&lt;code&gt;_eval_expand_diracdelta()&lt;/code&gt;&amp;#160;method and raise a deprecation warning. I have also added the tests for this method by catching the deprecation warnings properly. The API works like this:-&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;In [&lt;span class="hljs-number"&gt;3&lt;/span&gt;]: DiracDelta(x*y).simplify(x)
/home/ahappyidiot/anaconda2/bin/ipython:&lt;span class="hljs-number"&gt;1&lt;/span&gt;: SymPyDeprecationWarning: 

simplify has been deprecated since SymPy &lt;span class="hljs-number"&gt;1.0&lt;/span&gt;&lt;span class="hljs-number"&gt;.1&lt;/span&gt;. Use
expand(diracdelta=&lt;span class="hljs-keyword"&gt;True&lt;/span&gt;, wrt=x) instead.

  &lt;span class="hljs-comment"&gt;#!/home/ahappyidiot/anaconda2/bin/python&lt;/span&gt;
Out[&lt;span class="hljs-number"&gt;3&lt;/span&gt;]: DiracDelta(x)/Abs(y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These commits are needed to be reviewed properly in order to merge&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;&lt;code&gt;rewrite(Piecewise)&lt;/code&gt;&amp;#160;:- In &lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;, I have implemented a new method under DiracDelta class which would successfully&amp;#160;output a Piecewise representation of a DiracDelta Object. For this pull request also,&amp;#160;a final review is needed. The&amp;#160;API works as:-&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&lt;span class="hljs-prompt"&gt;In [4]: DiracDelta(x).rewrite(Piecewise)&lt;/span&gt;
Out[4]:
&lt;/code&gt;&amp;#9127;  oo       &lt;span class="pl-k"&gt;for&lt;/span&gt; x &lt;span class="pl-k"&gt;=&lt;/span&gt; 0&lt;span class="pl-c1"&gt;
&lt;/span&gt;&amp;#9128; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;#160;
&amp;#9129;  &lt;span class="pl-c1"&gt;0&lt;/span&gt;        otherwise&amp;#160;

&lt;code class="language-py"&gt;&lt;span class="hljs-prompt"&gt;In [4]: DiracDelta(x - 5).rewrite(Piecewise)&lt;/span&gt;
Out[4]:
&lt;/code&gt;&amp;#9127;  oo       &lt;span class="pl-k"&gt;for&lt;/span&gt; x - 5 &lt;span class="pl-k"&gt;=&lt;/span&gt; 0&lt;span class="pl-c1"&gt;
&lt;/span&gt;&amp;#9128; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;#160;
&amp;#9129;  &lt;span class="pl-c1"&gt;0&lt;/span&gt;        otherwise&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;I have also reviewed&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11065" target="_blank"&gt;PR 11065&lt;/a&gt;, I personally think that the implementation is a great idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;My plans for next weeks are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polish both&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;&amp;#160;and&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/10863"&gt;PR 10863&lt;/a&gt;&amp;#160;and get these pull requests merged&lt;/li&gt;
&lt;li&gt;Improve doc strings of the &lt;code&gt;DircaDelta&lt;/code&gt; and &lt;code&gt;Heaviside&lt;/code&gt; classes and methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;I will again get back by the end of the next week. Cheers !!!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/94/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/94/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=94&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=23</guid>
      <title>GSoC Community Bonding Period Week 2</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Tue, 10 May 2016 20:17:03 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/10/gsoc-community-bonding-period-week-2/</link>
      <description>&lt;p&gt;The second week of the Community Bonding Period got over. Though this post is quite late, I will try to post updates on Fridays of every week.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&lt;em&gt;So far&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I had my first meeting with Jason Moore, one of my mentor, on 5th May through Google Hangouts. We had a brief discussion over my proposal. I am taking a head-start for coding along with community bonding. I have started a discussion about the first phase of my proposal. Jason has created an issue tracker for&amp;#160;&lt;a href="https://github.com/sympy/sympy/issues/11075"&gt;Improvements to DiracDelta and Heaviside&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/10863" target="_blank"&gt;PR 10863&lt;/a&gt;&amp;#160;is almost completed only the depreciation part is left.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Almost all the&amp;#160;&lt;a href="https://en.wikipedia.org/wiki/Dirac_delta_function#Properties" target="_blank"&gt;properties&lt;/a&gt;&amp;#160;of DiracDelta functions has been already implemented&amp;#160;in Sympy. But I need to check whether all of them are unit tested and well documented.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;My targets for this week are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polish &lt;a href="https://github.com/sympy/sympy/pull/10863" target="_blank"&gt;PR 10863&lt;/a&gt;&amp;#160; and get it merged.&lt;/li&gt;
&lt;li&gt;Implement rewriting&amp;#160;&lt;code&gt;DircaDelta&lt;/code&gt;&amp;#160; as Piecewise.&lt;/li&gt;
&lt;li&gt;Improve doc strings of the &lt;code&gt;DircaDelta&lt;/code&gt; and &lt;code&gt;Heaviside&lt;/code&gt; classes and methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will again get back by the end of this week. Cheers !!!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/23/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/23/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=23&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=186</guid>
      <title>Community Bonding Period Starts for GSoC</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sat, 07 May 2016 08:46:29 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/05/07/community-bonding-period-starts-for-gsoc/</link>
      <description>&lt;p&gt;So, the GSoC is officially starting with the community bonding period until the last week of May. Until then, the official requirements are to get to know the communities. For my project, this puts me in an odd situation with the project being done for SymEngine community, while under the auspices of SciRuby Foundation. For the starters, I am familiar with many people from the SymEngine community, and just now I am trying to get more involved with the SciRuby people.&lt;/p&gt;
&lt;p&gt;Also, according to my proposal I have listed a couple of tasks to be completed before the actual coding begins. So this week was mostly spent on merging my existing and long standing &lt;a href="https://github.com/symengine/symengine.rb/pull/23" target="_blank"&gt;PR for Ruby Wrappers for Trigonometric, Hyperbolic and other functions&lt;/a&gt;. The major problem I had was writing the repetitive tests for all the functions included in the wrappers. But apart from that the requirements were quite straightforward.&lt;/p&gt;
&lt;p&gt;For the next week, I am planning to wrap the Number Theory functions in Ruby. This already has a &lt;a href="https://github.com/symengine/symengine/pull/852" target="_blank"&gt;CWrapper&lt;/a&gt;, which makes my task a lot easier.&lt;/p&gt;
&lt;p&gt;Apart from coding, I wanted to set the record straight for SymEngine gem in the &lt;a href="http://gems.sciruby.com/" target="_blank"&gt;sciruby website&lt;/a&gt;. It lists the SymEngine gem as broken, and I would need to correct the gem&amp;#8217;s installation scripts. Figuring out this is another task I carry on for the coming week.&lt;/p&gt;
&lt;p&gt;See you!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/186/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/186/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=186&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/2016/05/02/google-summer-of-code-with-sympy/</guid>
      <title>Google Summer of Code with Sympy</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Mon, 02 May 2016 11:04:16 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/02/google-summer-of-code-with-sympy/</link>
      <description>&lt;p&gt;About one and half week ago, the results of Google Summer of Code were out.&amp;#160;I am extremely glad to inform that my project for Sympy on Implementation of Singularity Functions got selected for GSoC 2016.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Google Summer of Code&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Google_Summer_of_Code"&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; is a global annual program focused on bringing more student developers into open source software development. It is a global program that offers students stipends to write code for open source projects.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Sympy&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://sampadblog.wordpress.com/2016/05/02/google-summer-of-code-with-sympy/" target="_blank"&gt;SymPy&lt;/a&gt;&lt;/strong&gt;&amp;#160; is a Python library for symbolic mathematics. It aims to become a full-featured&amp;#160;&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Computer_algebra_system"&gt;Computer Algebra System&lt;/a&gt;&lt;/strong&gt; (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;About my &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Sampad-Kumar-Saha:-Singularity-Functions" target="_blank"&gt;Project&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;I have proposed to work on the Implementation of a full fledged&amp;#160;&lt;strong&gt;Computer Algebra System&lt;/strong&gt; (CAS) of Singularity Functions. I will create a module&amp;#160;to represent a Singularity Function and implement different mathematical operations. This module will be further used to create an another module which would be used for solving complicated beam bending problems.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/moorepants" target="_blank"&gt; Jason Moore&lt;/a&gt;, &lt;a href="https://github.com/leosartaj" target="_blank"&gt;Sartaj Singh&lt;/a&gt; and&amp;#160;&lt;a href="https://github.com/certik" target="_blank"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt;&amp;#160;are going to mentor me throughout the whole program. All of them are really talented and very humble people. I have learned a lot from all of them. I am extremely lucky to work under such great people.&lt;/p&gt;
&lt;p&gt;Now Community Bonding Period is going on. This is intended to get students ready to start contributing to their organization full time from 23rd May. I am supposed to :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Become familiar with the community practices and processes.&lt;/li&gt;
&lt;li&gt;Participate on Mailing Lists / IRC / etc.&lt;/li&gt;
&lt;li&gt;Set up your development environment.&lt;/li&gt;
&lt;li&gt;Small (or large) patches/bug fixes.&lt;/li&gt;
&lt;li&gt;Participate in code reviews for others.&lt;/li&gt;
&lt;li&gt;Work with my mentor and other org members on refining my project plan. This might include finalizing deadlines and milestones, adding more detail, figuring out potential issues, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward toward a great summer.&lt;/p&gt;
&lt;p&gt;Cheers!!!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/14/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/14/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=14&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC 2016 Phase I : Proposal, Acceptance</guid>
      <title>GSoC 2016 Phase I : Proposal, Acceptance</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sun, 01 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc-with-sympy.html</link>
      <description>&lt;p&gt;Hello, I'm Gaurav Dhingra a 3rd year undergraduate student at IIT Roorkee, my proposal on Group Theory with &lt;i&gt;SymPy&lt;/i&gt; has been accepted as a part of &lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
First, a little bit about &lt;a href="http://www.sympy.org/"&gt;SymPy&lt;/a&gt;, a &lt;i&gt;Computer Algebra System&lt;/i&gt; (CAS) written entirely in Python. SymPy 1.0 was released about 2 months ago, &lt;i&gt;Sympy&lt;/i&gt; has been created by hundreds of contributors starting from 2006.

I will be working on Group Theory over the summer, for the next 3 months, to implement Computational Group Theory (CGT) and Group Theory, which are parts of mathematics I particularly enjoy. You can view my project proposal &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Gaurav-Dhingra:-Group-Theory"&gt;GSoC 2016 Application Gaurav Dhingra: Group Theory&lt;/a&gt;. Until a few days ago I was pretty busy with my exams, but in the next few weeks I will go over working on the project. I will particularly focus on Finite and Finitely Presented Groups.
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
I hope that I'll be able to implement everything that I promised in it. Moving onto the ongoing community bonding. Since I am very well acquitted with the workflow of SymPy, I can get straight to few important things, which i will do in the next few days.

&lt;br /&gt;&lt;br /&gt;
This includes things like:
&lt;ul&gt;
  &lt;li&gt;
    Setting up a blog with RSS feed i.e this blog in which I am supposed to add an RSS feed functionality.
  &lt;/li&gt;
  &lt;li&gt;
    Talking to my mentors regarding the time, and place of chat on internet, we differ by almost 5hrs. Time wouldn't be an issue, since seeing from past, I haven't faced such difficulty as both me and my mentor work for almost the same time intervals. From the GSoC 2015 discussions, I remember that Ondrej tries to make sure everyone knows what time student-mentor meet, since of different time zones.
  &lt;/li&gt;
  &lt;li&gt;
    In the past we have had discussion on my private gitter channel &lt;a href="https://gxyd.github.io/feeds/atom.xml"&gt;Group Theory Implementation&lt;/a&gt;. &lt;i&gt;Would it be wise to continue code discussions there?&lt;/i&gt;. Since no one can be added in the channel without my permission.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
One thing that has been a hell of a lot annoying has been the GSoC mailing list, it's a lot distracting. I changed list settings to abridged daily updates because I was getting like 50 mails every day and that too about some really stupid and irrelevant things. But yeah like whatever.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;i&gt;"LESS TALK, MORE CODE"&lt;/i&gt; is the policy that I always tend to follow (not for blog!!). I will try my best to implement it in a strict way this summer. I have seen this policy working fine for me, mostly first I start writing question in a message box to my mentor, and then i think more about it myself and in the end I come up with a solution on my own, instead of asking.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I'm quite sure that I will write more than enough blog posts about my project during the summers. Since I enjoy writing and that too regarding things that occupy larger part of my day.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I'd like to thank all the people involved with contributions to &lt;i&gt;SymPy&lt;/i&gt;. My special thanks to my mentor - &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; and my co-mentor - &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt; for all the suggestions while making my proposal, and showing faith and enthusiasm in my ability and my proposal.
&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/04/29/Selected</guid>
      <title>Selected</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Fri, 29 Apr 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/04/29/Selected/</link>
      <description>&lt;p&gt;I have been selected for GSoC&amp;#8217;16! The results came out on Apr 23, and I have never been happier! I got around to writing this blog post only now, because of my end semester examinations which ended yesterday. I have been alotted &lt;a href="https://github.com/isuruf"&gt;Isuru&lt;/a&gt; and &lt;a href="https://github.com/sumith1896"&gt;Sumith&lt;/a&gt; as my official mentors. I&amp;#8217;m very excited to start working on the project, alongside them.&lt;/p&gt;

&lt;p&gt;Right now, I&amp;#8217;ll start my discussions on the implementation details, and overall structure of the code. Also I will begin work on the Fast Fourier algorithm for univariate polynomial multiplication.&lt;/p&gt;

&lt;p&gt;Looking forward to a busy summer!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=46</guid>
      <title>GSoC &#x2013; Prologue</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Tue, 26 Apr 2016 06:53:46 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/04/26/gsoc-prologue/</link>
      <description>&lt;p&gt;So, I have been accepted for the Google Summer of Code &amp;#8211; 2016 for the project &amp;#8220;Ruby Wrappers for SymEngine&amp;#8221;, under the mentoring organization SciRuby.&lt;/p&gt;
&lt;p&gt;The aim of this post is to give an introduction to the project.&lt;/p&gt;
&lt;p&gt;The abstract of the project is as follows:&lt;/p&gt;
&lt;div&gt;A project started by the SymPy organisation, SymEngine is a standalone fast C++ symbolic manipulation library. It solves mathematical problems the same way a human does, but way more quickly and precisely. The motivation for SymEngine is to develop the Computer Algebra System once in C++ and then use it from other languages rather than doing the same thing all over again for each language that it is required in. The project for Ruby bindings has already been setup at symengine.rb. Few things that the project involves are:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Extending the C interface of SymEngine library.&lt;/li&gt;
&lt;li&gt;Wrapping up the C interface for Ruby using Ruby C API, including error handling.&lt;/li&gt;
&lt;li&gt;Designing the Ruby interface.&lt;/li&gt;
&lt;li&gt;Integrating IRuby with symengine gem for better printing and writing IRuby notebooks.&lt;/li&gt;
&lt;li&gt;Integrating the gem with existing gems like gmp, mpfr and mpc.&lt;/li&gt;
&lt;li&gt;Making the installation of symengine gem easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested, the &lt;a href="https://docs.google.com/document/d/1HKEzqpm3yk9ax5Fs7POQaBFZFxSOjy1MXNyeB7JXBxg/edit?usp=sharing" target="_blank"&gt;full proposal&lt;/a&gt;, which includes the timeline is available online.&lt;/p&gt;
&lt;p&gt;Also, the GitHub repository for the project is at &lt;a href="https://github.com/symengine/symengine.rb" target="_blank"&gt;SymEngine/SymEngine.rb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The actual coding phase starts in about a month, and before that I plan to complete the&amp;#160;&lt;a href="https://github.com/symengine/symengine.rb/pull/23"&gt;&lt;span style="font-weight: 400;"&gt;Ruby Wrappers for the Trigonometric and Hyperbolic Functions&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and to write the necessary tests.&amp;#160;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Next, the NTheory CWrappers can be wrapped into Ruby. This too will be done before the GSoC period starts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Keep checking the blog if you are interested to track the progress of this project. I will be posting&amp;#160;weekly updates in the blog.&lt;/p&gt;
&lt;p&gt;Auf Wiedersehen!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/46/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/46/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=46&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/04/26/GSoC-Acceptance.html</guid>
      <title>GSoC Acceptance</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Tue, 26 Apr 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/04/26/GSoC-Acceptance.html</link>
      <description>&lt;p&gt;I am excited to announce that I have been accepted for the the Google Summer of
Code program for the summer of 2016. I will be working with the Sympy open
source project&amp;#8217;s equation of motion generators. For the project I will mainly
be focusing on creating a shared base class for the current equation of motion
generators and adding an additional generator.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/SymPy Workshop at FOSSASIA 2016, Singapore</guid>
      <title>SymPy Workshop at FOSSASIA 2016, Singapore</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Fri, 25 Mar 2016 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/sympy-workshop-fossasia-2016</link>
      <description>&lt;p&gt;Hi there! Last week I went to &lt;a href="https://en.wikipedia.org/wiki/Singapore"&gt;Singapore&lt;/a&gt; for &lt;a href="http://2016.fossasia.org/"&gt;FOSSASIA&lt;/a&gt; Open Tech Summit  2016. I conducted a Worskhop on &lt;a href="http://sympy.org"&gt;SymPy&lt;/a&gt; and assisted the &lt;a href="http://pydy.org"&gt;PyDy&lt;/a&gt; Workshop in Python track hosted by &lt;a href="https://kushaldas.in/"&gt;Kushal Das&lt;/a&gt;. This blog post accounts to my experience as a speaker, as a attendee at FOSSASIA and as a traveler to Singapore.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;About FOSSASIA&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/fossasia.png" width="200" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FOSSASIA is the premier Free and Open Source technology event in Asia for developers, start-ups, and contributors. Projects at FOSSASIA range from open hardware, to design, graphics and software. FOSSASIA was established in 2009. Previous events took place in Cambodia and Vietnam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the name suggests its one of the largest tech conferences in Asia and my expectations were pretty high from this conference and moreover It was my first international conference. I witnessed lots of amazing people in the conference and interacted with a few as well. This is how it started: &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/harish-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;The SymPy/PyDy Workshop&lt;/h2&gt;

&lt;p&gt;Community is more important than Code @ Singapore Science Center Level 3, Pauling Lab
&lt;img align="center" src="http://iamit.in/assets/sympy-zen.jpg" width="400" /&gt;&lt;/p&gt;

&lt;p&gt;The SymPy and PyDy workshop was scheduled on 20th March at 1:00 - 2:00 PM (PyDy) and 2:00 - 4:00 PM (SymPy). &lt;a href="http://www.moorepants.info/"&gt;Jason&lt;/a&gt; suggested to conduct the SymPy workshop first since PyDy uses SymPy and it would be easier for people to learn SymPy first and then PyDy, but since the &lt;a href="http://2016.fossasia.org/schedule/"&gt;schedule&lt;/a&gt; was already published, It was not possible to reschedule the workshops, so we had to continue with PyDy first.
&lt;a href="https://github.com/sahilshekhawat"&gt;Sahil&lt;/a&gt; started the PyDy workshop at 1:00 PM, though we had to spend a lot of time installing Anaconda to everyone's systems by creating a local server and distributing flash drives as most of the people didn't had Anaconda or Canopy installed. This has been the problem for almost all the workshops I have conducted in the past. It seems I need to invent an efficient way to do this faster in future as we spent 30-40 odd minutes in installation. &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/sympy-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately &lt;a href="https://github.com/sahilshekhawat"&gt;Sahil&lt;/a&gt; finished his presentation at around 2:15 PM. Then I took over for SymPy workshop, I started with the basic introduction to SymPy, the slides can be found &lt;a href="http://slides.com/aktech/sympy"&gt;here&lt;/a&gt;. Then I jumped to IPython notebook exercises to demonstrate more of SymPy. People were amazed by the capabilities of this amazing piece of software. The most beautiful feature they liked was printing and integration. The workshop went pretty well except for the glitches in the HDMI port of my laptop (probably, its the right time to get a new laptop). Here are some SymPy stickers for you, if you missed there.  &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/sympy-sticker-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;Singapore was Fun ;)&lt;/h2&gt;

&lt;p&gt;Visiting Singapore has been a great experience, the culture is a mix of &lt;a href="https://en.wikipedia.org/wiki/Malaysian"&gt;Malaysian&lt;/a&gt;, Indian and native Singaporean. The City is well connected with &lt;a href="https://en.wikipedia.org/wiki/Mass_Rapid_Transit_(Singapore)"&gt;MRT/SMRT&lt;/a&gt; (Metro and Buses). It's quite easy get anywhere around the city. People here are very helpful and nice. I didn't faced any problems throughout my stay there. I spent most of my time near &lt;a href="https://en.wikipedia.org/wiki/Science_Centre_Singapore"&gt;Science Center&lt;/a&gt;, China Town and Little India. There were lot of people from India and particularly from Delhi and three from my University. It was awesome time spent with geeks all around. Tagging some of them &lt;a href="http://devmaany.co/"&gt;Mayank&lt;/a&gt;, &lt;a href="http://www.ishankhanna.in/"&gt;Ishaan&lt;/a&gt;, &lt;a href="http://omerjerk.in/"&gt;Umair&lt;/a&gt;, &lt;a href="https://github.com/jig08"&gt;Jigyasa&lt;/a&gt;, &lt;a href="http://iyask.me/"&gt;Yask&lt;/a&gt;, &lt;a href="http://garvitdelhi.blogspot.in/"&gt;Garvit&lt;/a&gt;, &lt;a href="http://home.iiitd.edu.in/%7Emanan13056/"&gt;Manan&lt;/a&gt;, sorry If I missed someone. Here is a pic of the last day of the conference. &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/fossasia-all.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;Thank you FOSSASIA Organizing Team, Hong Phuc Dang for inviting me to be part of this awesome FOSS community.
I would not have been able to attend the conference without the generous financial support from SymPy, Thank you &lt;a href="http://www.ondrejcertik.com/"&gt;Ondrej Certik&lt;/a&gt;, &lt;a href="http://asmeurer.github.io/blog/"&gt;Aaron Meurer&lt;/a&gt; &amp;amp; SymPy contributors.&lt;/p&gt;

&lt;h3&gt;Good Bye!&lt;/h3&gt;

&lt;p&gt;Good bye! everyone, see you on my next blog post, meanwhile you can have a look at a Picture of me doing back flip at Sentosa ;)
&lt;img align="center" src="http://iamit.in/assets/amit-backflip.gif" /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/Hello-World</guid>
      <title>Hello World!</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Thu, 24 Mar 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/Hello-World/</link>
      <description>&lt;p&gt;Hello World!
My previous blog posts were at: &lt;a href="http://nishantnikhil.weebly.com/"&gt;Global Class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should try not to reinvent the wheel, So I thought it would be better for me to fork &lt;a href="https://github.com/barryclark/jekyll-now"&gt;jekyll-now&lt;/a&gt; repo and build this jekyll blog in minutes :smile: .&lt;/p&gt;

&lt;p&gt;This is cool and the awesome most part is that &lt;strong&gt;It is Markdown flavoured&lt;/strong&gt; . Its quite cool writing in markdown now. Oh! I remember how weird I felt writing in markdown back in December. Snap!&lt;/p&gt;

&lt;p&gt;Now, I will search for a way to do spell correction in markdown. It is so much nedded, I know a little bit of googling will help me.&lt;/p&gt;

&lt;p&gt;Happy Holi! :fire:&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/03/07/Initial-Commit</guid>
      <title>Initial Commit</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Mon, 07 Mar 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/03/07/Initial-Commit/</link>
      <description>&lt;p&gt;This is my first blog post. The blog was made to track progress of my GSoC project and get feedback from my mentors, if my proposal gets selected. I&amp;#8217;m proposing to implement the Multivariate and Univariate polynomial class in SymEngine.&lt;/p&gt;

&lt;p&gt;Wish me luck!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/SymPy Workshop at PyDelhi Meetup</guid>
      <title>SymPy Workshop at PyDelhi Meetup</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Sat, 06 Feb 2016 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/sympy-workshop-pydelhi-meetup</link>
      <description>&lt;p&gt;Hi there! It's been sometime now since my last blog post, It's probably the right time to write one now. Yesterday, I gave a talk on SymPy at Python Delhi User group Meetup at &lt;a href="https://maps.google.com/maps?f=q&amp;amp;hl=en&amp;amp;q=29%2C+Rajpur+Road%2C+Delhi%2C+in"&gt;CSDS&lt;/a&gt;, New Delhi. Things never go the way you want, an hour was wasted in just setting up Anaconda on everyone's system, eventually I had to cut on the material I could demonstrate, though It was nice to see that people were very enthusiatic about SymPy, they actively solved excercises. It was fun interacting with everyone.&lt;/p&gt;

&lt;p&gt;Here is a Pic of the Seminar room at CSDS:
&lt;img align="center" src="http://iamit.in/assets/sympy-workshop.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I should also admit that, I have increased my appetite for attending conferences and meetups, these days. In the last 4 months I have attended 3 Meetups (PyDelhi Meetup) and 1 Conference (PyCon India 2015). I think this is one of the best things I have done in last few years &amp;amp; I would recommend anyone with a slight interest in Python either Beginner or Expert should attend &lt;a href="http://www.pydelhi.org"&gt;PyDelhi&lt;/a&gt; &lt;a href="http://www.meetup.com/pydelhi/events/"&gt;Meetups&lt;/a&gt;. Looking forward to more such meetups and conferences.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://iamit.in/assets/sympy-sticker.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I gave SymPy stickers to everyone who solved atleast one excercise (Since, I didn't had enough stickers).&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/what-happens-when-you-mess-with-hashing-in-python/</guid>
      <title>What happens when you mess with hashing in Python</title>
      <author>Aaron Meurer (asmeurer)</author>
      <pubDate>Tue, 26 Jan 2016 04:13:53 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/what-happens-when-you-mess-with-hashing-in-python/</link>
      <description>&lt;div&gt;&lt;p&gt;&lt;em&gt;This post is based off a Jupyter notebook I made in 2013. You can download
the original &lt;a href="https://gist.github.com/asmeurer/6046766"&gt;here&lt;/a&gt;. That notebook
was based off a
&lt;a href="https://github.com/sympy/sympy/wiki/What-happens-when-you-mess-with-hashing"&gt;wiki page&lt;/a&gt;
on the SymPy wiki, which in turn was based on
&lt;a href="https://groups.google.com/forum/#%21msg/sympy/pJ2jg2csKgU/0nn21xqZEmwJ"&gt;a message&lt;/a&gt;
to the SymPy mailing list.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What is hashing?&lt;/h2&gt;
&lt;p&gt;Before we start, let's have a brief introduction to hashing. A
&lt;a href="https://en.wikipedia.org/wiki/Hash_function"&gt;&lt;em&gt;hash function&lt;/em&gt;&lt;/a&gt; is a function
that maps a set of objects to a set of integers. There are many kinds of hash
functions, which satisfy many different properties, but the most important
property that must be satisfied by any hash function is that it be a function
(in the mathematical sense), that is, if two objects are equal, then their
hash should also be equal.&lt;/p&gt;
&lt;p&gt;Usually, the set of integers that the hash function maps to is much smaller
than the set of objects, so that there will be multiple objects that hash to
the same value. However, generally for a hash function to be useful, the set
of integers should be large enough, and the hash function well distributed
enough that if two objects hash to the same value, then they are very likely
to be equal.&lt;/p&gt;
&lt;p&gt;To summarize, a hash function &lt;em&gt;must&lt;/em&gt; satisfy the property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If two objects are equal, then their hashes should be equal.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, a &lt;em&gt;good&lt;/em&gt; hash function should satisfy the property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If two objects have the same hash, then they are likely to be the same
object.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since there are generally more possible objects than hash values, two objects
may hash to the same value. This is called a
&lt;a href="https://en.wikipedia.org/wiki/Hash_collision"&gt;hash collision&lt;/a&gt;, and anything
that deals with hashes should be able to deal with them.&lt;/p&gt;
&lt;p&gt;This won't be discussed here, but an additional property that a good hash
function should satisfy to be useful is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The hash of an object should be cheap to compute.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is it used for?&lt;/h2&gt;
&lt;p&gt;If we have a hash function that satisfies the above properties, then we can
use it to create from a collection of objects something called a &lt;em&gt;hash table&lt;/em&gt;.
Suppose we have a collection of objects, and given any object, we want to be
able to compute very quickly if that object belongs to our collection. We
could store these objects in an ordered array, but then to determine if it is
in the array, we would have to search potentially through every element of the
array (in other words, an \(O(n)\)) algorithm.&lt;/p&gt;
&lt;p&gt;With hashing, we can do better. We create what is known as a
&lt;a href="https://en.wikipedia.org/wiki/Hash_table"&gt;&lt;em&gt;hash table&lt;/em&gt;&lt;/a&gt;. Instead of storing
the objects in an ordered array, we create an array of buckets, each
corresponding to some hash values. We then hash each object, and store it into
the array corresponding to its hash value (if there are more hash values than
buckets, we distribute them using a second hash function, which can be as
simple as taking the modulus with respect to the number of buckets, &lt;code&gt;% n&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This image from
&lt;a href="https://en.wikipedia.org/wiki/File:Hash_table_3_1_1_0_1_0_0_SP.svg"&gt;Wikipedia&lt;/a&gt;
shows an example.&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="https://upload.wikimedia.org/wikipedia/commons/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg" /&gt;&lt;/p&gt;
&lt;p&gt;To determine if an object is in a hash table, we only have to hash the object,
and look in the bucket corresponding to that hash. This is an \(O(1)\)
algorithm, assuming we have a good hash function, because each bucket will
generally hold very few objects, possibly even none.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: there are some additional things that need to be done to handle hash
collisions, but the basic idea is the same, and as long as there aren't too
many hash collisions, which should happen if hash values are evenly
distributed and the size of the hash table is large compared to the number of
objects stored in it, the average time to determine if an object is in the
hash table is still \(O(1)\).&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Hashing in Python&lt;/h2&gt;
&lt;p&gt;Python has a built in function that performs a hash called &lt;code&gt;hash()&lt;/code&gt;.  For many
objects, the hash is not very surprising.  Note, the hashes you see below may
not be the same ones you see if you run the examples, because Python hashing
depends on the architecture of the machine you are running on, and, in newer
versions of Python, hashes are randomized for security purposes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(10)
10
&amp;gt;&amp;gt;&amp;gt; hash(()) # An empty tuple
3527539
&amp;gt;&amp;gt;&amp;gt; hash('a')
12416037344
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Python, not all objects are hashable. For example&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash([]) # An empty list
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: unhashable type: 'list'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because Python has an additional restriction on hashing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In order for an object to be hashable, it must be immutable.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is important basically because we want the hash of an object to remain
the same across the object's lifetime. But if we have a mutable object, then
that object itself can change over its lifetime. But then according to our
first bullet point above, that object's hash has to change too.&lt;/p&gt;
&lt;p&gt;This restriction simplifies hash tables. If we allowed an object's hash to
change while it is in a hash table, we would have to move it to a different
bucket. Not only is this costly, but the hash table would have to &lt;em&gt;notice&lt;/em&gt;
that this happened; the object itself doesn't know that it is sitting in a
hash table, at least not in the Python implementation.&lt;/p&gt;
&lt;p&gt;In Python, there are two objects that correspond to hash tables, &lt;code&gt;dict&lt;/code&gt; and
&lt;code&gt;set&lt;/code&gt;. A &lt;code&gt;dict&lt;/code&gt; is a special kind of hash table called an
&lt;a href="https://en.wikipedia.org/wiki/Associative_array"&gt;&lt;em&gt;associative array&lt;/em&gt;&lt;/a&gt;. An
associative array is a hash table where each element of the hash table points
to another object. The other object itself is not hashed.&lt;/p&gt;
&lt;p&gt;Think of an associative array as a generalization of a regular array (like a
&lt;code&gt;list&lt;/code&gt;). In a &lt;code&gt;list&lt;/code&gt;, objects are associated to nonnegative integer indices,
like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; l = ['a', 'b', 7]
&amp;gt;&amp;gt; l[0]
'a'
&amp;gt;&amp;gt;&amp;gt; l[2]
7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In an associative array (i.e., a &lt;code&gt;dict&lt;/code&gt;) we can index objects by anything, so
long as the key is hashable.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; d = {0: 'a', 'hello': ['world']}
&amp;gt;&amp;gt;&amp;gt; d[0]
'a'
&amp;gt;&amp;gt;&amp;gt; d['hello']
['world']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that only the keys need to be hashable. The values can be anything, even
unhashable objects like lists.&lt;/p&gt;
&lt;p&gt;The uses for associative arrays are boundless. &lt;code&gt;dict&lt;/code&gt; is one of the most
useful data types in the Python language. Some example uses are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Extension of &lt;code&gt;list&lt;/code&gt; with "missing values". For example, &lt;code&gt;{0: 'a', 2: 7}&lt;/code&gt;
would correspond to the above list &lt;code&gt;l&lt;/code&gt; with the value &lt;code&gt;'b'&lt;/code&gt; corresponding to
the key &lt;code&gt;1&lt;/code&gt; removed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Representation of a mathematical function with a finite domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A poor-man's database (the Wikipedia image above is an associative array
mapping names to telephone numbers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementing a &lt;a href="https://stackoverflow.com/q/60208/161801"&gt;Pythonic version&lt;/a&gt;
of the switch-case statement.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other type of hash table, &lt;code&gt;set&lt;/code&gt;, more closely matches the definition I
gave above for a hash table. A &lt;code&gt;set&lt;/code&gt; is just a container of hashable
objects. &lt;code&gt;set&lt;/code&gt;s are unordered, and can only contain one of each object (this
is why they are called "sets," because this matches the mathematical
definition of a &lt;a href="https://en.wikipedia.org/wiki/Set_(mathematics)"&gt;set&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Python 2.7 or later, you can create a set with &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, like &lt;code&gt;{a, b, c}&lt;/code&gt;. Otherwise, use &lt;code&gt;set([a, b, c])&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; s = {0, (), '2'}
&amp;gt;&amp;gt;&amp;gt; s
{0, '2', ()}
&amp;gt;&amp;gt;&amp;gt; s.add(1)
&amp;gt;&amp;gt;&amp;gt; s
{0, 1, '2', ()}
&amp;gt;&amp;gt;&amp;gt; s.add(0)
&amp;gt;&amp;gt;&amp;gt; s
{0, 1, '2', ()}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A final note: &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;dict&lt;/code&gt; are themselves mutable, and hence not hashable!
There is an immutable version of &lt;code&gt;set&lt;/code&gt; called &lt;code&gt;frozenset&lt;/code&gt;. There are no
immutable dictionaries.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; f = frozenset([0, (), '2'])
&amp;gt;&amp;gt;&amp;gt; f
frozenset({0, '2', ()})
&amp;gt;&amp;gt;&amp;gt; hash(f)
-7776452922777075760
&amp;gt;&amp;gt;&amp;gt; # A frozenset, unlike a set, can be used as a dictionary key
&amp;gt;&amp;gt;&amp;gt; d[f] = 'a set'
&amp;gt;&amp;gt;&amp;gt; d
{0: 'a', frozenset({0, '2', ()}): 'a set', 'hello': ['world']}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Creating your own hashable objects&lt;/h2&gt;
&lt;p&gt;Before we move on, there is one final thing we need to know about hashing in
Python, which is how to create hashes for custom objects. By default, if we
create an object, it will be hashable.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class Nothing(object):
...     pass
...
&amp;gt;&amp;gt;&amp;gt; N = Nothing()
&amp;gt;&amp;gt;&amp;gt; hash(N)
270498113
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Implementation-wise, the hash is just the object's &lt;code&gt;id&lt;/code&gt;, which corresponds to
its position in memory. This satisfies the above conditions: it is (extremely)
cheap to compute, and since by default objects in Python compare unequal to
one another, objects with different hashes will be unequal.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; M = Nothing()
&amp;gt;&amp;gt;&amp;gt; M == N
False
&amp;gt;&amp;gt;&amp;gt; hash(M)
270498117
&amp;gt;&amp;gt;&amp;gt; hash(M) == hash(N)
False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To define a hash function for an object, define the &lt;code&gt;__hash__&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class HashToOne(object):
...     def __hash__(self):
...         return 1
...
&amp;gt;&amp;gt;&amp;gt; HTO = HashToOne()
&amp;gt;&amp;gt;&amp;gt; hash(HTO)
1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To set an object as not hashable, set &lt;code&gt;__hash__&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class NotHashable(object):
...     __hash__ = None
...
&amp;gt;&amp;gt;&amp;gt; NH = NotHashable()
&amp;gt;&amp;gt;&amp;gt; hash(NH)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: unhashable type: 'NotHashable'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, to override the equality operator &lt;code&gt;==&lt;/code&gt;, define &lt;code&gt;__eq__&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class AlwaysEqual(object):
...     def __eq__(self, other):
...         if isinstance(other, AlwaysEqual):
...             return True
...        return False
...
&amp;gt;&amp;gt;&amp;gt; AE1 = AlwaysEqual()
&amp;gt;&amp;gt;&amp;gt; AE2 = AlwaysEqual()
&amp;gt;&amp;gt;&amp;gt; AE1 == AE2
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the key points that I hope you will take away from this post is that if
you override &lt;code&gt;__eq__&lt;/code&gt;, you &lt;strong&gt;must&lt;/strong&gt; also override &lt;code&gt;__hash__&lt;/code&gt; to agree. Note
that Python 3 will actually require this: in Python 3, you cannot override
&lt;code&gt;__eq__&lt;/code&gt; and not override &lt;code&gt;__hash__&lt;/code&gt;. But that's as far as Python goes in
enforcing these rules, as we will see below. In particular, Python will never
actually check that your &lt;code&gt;__hash__&lt;/code&gt; actually agrees with your &lt;code&gt;__eq__&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Messing with hashing&lt;/h2&gt;
&lt;p&gt;Now to the fun stuff. What happens if we break some of the invariants that
Python expects of hashing. Python expects two key invariants to hold&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The hash of an object does not change across the object's lifetime (in
other words, a hashable object should be immutable).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;a == b&lt;/code&gt; implies &lt;code&gt;hash(a) == hash(b)&lt;/code&gt; (note that the reverse might not
hold in the case of a hash collision).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we shall see, Python expects, but does not enforce either of these.&lt;/p&gt;
&lt;h3&gt;Example 1: Mutating a hash&lt;/h3&gt;
&lt;p&gt;Let's break rule 1 first. Let's create an object with a hash, and then change
that object's hash over its lifetime, and see what sorts of things can happen.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class Bad(object):
...     def __init__(self, hash): # The object's hash will be hash
...         self.hash = hash
...     def __hash__(self):
...         return self.hash
...
&amp;gt;&amp;gt;&amp;gt; b = Bad(1)
&amp;gt;&amp;gt;&amp;gt; hash(b)
1
&amp;gt;&amp;gt;&amp;gt; d = {b:42}
&amp;gt;&amp;gt;&amp;gt; d[b]
42
&amp;gt;&amp;gt;&amp;gt; b.hash = 2
&amp;gt;&amp;gt;&amp;gt; hash(b)
2
&amp;gt;&amp;gt;&amp;gt; d[b]
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
KeyError: &amp;lt;__main__.Bad object at 0x1047e7438&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we implicitly changed the hash of &lt;code&gt;b&lt;/code&gt; by mutating the attribute of &lt;code&gt;b&lt;/code&gt;
that is used to compute the hash. As a result, the object is no longer found
in a dictionary, which uses the hash to find the object.&lt;/p&gt;
&lt;p&gt;The object is still there, we just can't access it any more.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; d
{&amp;lt;__main__.Bad object at 0x1047e7438&amp;gt;: 42}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that Python doesn't prevent me from doing this. We could make it if we
want (e.g., by making &lt;code&gt;__setattr__&lt;/code&gt; raise &lt;code&gt;AttributeError&lt;/code&gt;), but even then we
could forcibly change it by modifying the object's &lt;code&gt;__dict__&lt;/code&gt;. We could try
some more fancy things using descriptors, metaclasses, and/or
&lt;code&gt;__getattribute__&lt;/code&gt;, but even then, if we knew what was happening, we could
probably find a way to change it.&lt;/p&gt;
&lt;p&gt;This is what is meant when people say that Python is a "consenting adults"
language. You are expected to not try to break things, but generally aren't
prevented from doing so if you try.&lt;/p&gt;
&lt;h3&gt;Example 2: More mutation&lt;/h3&gt;
&lt;p&gt;Let's try something even more crazy. Let's make an object that hashes to a
different value each time we look at the hash.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class DifferentHash(object):
...     def __init__(self):
...         self.hashcounter = 0
...     def __hash__(self):
...         self.hashcounter += 1
...         return self.hashcounter
...
&amp;gt;&amp;gt;&amp;gt; DH = DifferentHash()
&amp;gt;&amp;gt;&amp;gt; hash(DH)
1
&amp;gt;&amp;gt;&amp;gt; hash(DH)
2
&amp;gt;&amp;gt;&amp;gt; hash(DH)
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, if we use &lt;code&gt;DH&lt;/code&gt; as a key to a dictionary, then it will not work,
because we will run into the same issue we had with &lt;code&gt;Bad&lt;/code&gt;. But what about
putting &lt;code&gt;DH&lt;/code&gt; in a &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; DHset = {DH, DH, DH}
&amp;gt;&amp;gt;&amp;gt; DHset
{&amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Woah! We put the exact same object in a &lt;code&gt;set&lt;/code&gt; three times, and it appeared all
three times. This is not what is supposed to happen with a set.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; {1, 1, 1}
{1}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens when we do stuff with &lt;code&gt;DHset&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; DHset.remove(DH)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
KeyError: &amp;lt;__main__.DifferentHash object at 0x1047e75f8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That didn't work, because &lt;code&gt;set.remove&lt;/code&gt; searches for an object by its hash,
which is different by this point.&lt;/p&gt;
&lt;p&gt;Now let's make a copy of &lt;code&gt;DHset&lt;/code&gt;. The &lt;code&gt;set.copy&lt;/code&gt; method will create a shallow
copy (meaning that the set container itself will be different, according to
&lt;code&gt;is&lt;/code&gt; comparison, but the objects themselves will the same, according to &lt;code&gt;is&lt;/code&gt;
comparison).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; DHset2 = DHset.copy()
&amp;gt;&amp;gt;&amp;gt; DHset2 == DHset
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything is fine so far. This object is only going to cause trouble if
something recomputes its hash. But remember that the whole reason that we had
trouble with something like &lt;code&gt;Bad&lt;/code&gt; above is that Python &lt;em&gt;doesn't&lt;/em&gt; recompute
that hash of an object, unless it has to. So let's do something that will
force it to do so: let's pop an object from one of the sets and add it back
in.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; D = DHset.pop()
&amp;gt;&amp;gt;&amp;gt; DHset.add(D)
&amp;gt;&amp;gt;&amp;gt; DHset
{&amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; DHset2
{&amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; DHset == DHset2
False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go. By removing it from the set, we made the set forget about its
hash, so it had to be recomputed when we added it again. This version of
&lt;code&gt;DHset&lt;/code&gt; now has a &lt;code&gt;DH&lt;/code&gt; with a different hash than it had before. Thinking back
to &lt;code&gt;set&lt;/code&gt; being a hash table, in this &lt;code&gt;DHset&lt;/code&gt;, the three &lt;code&gt;DH&lt;/code&gt; objects are in
different "buckets" than they were in before. &lt;code&gt;DHset.__eq__(DHset2)&lt;/code&gt; notices
that the bucket structure is different right away and returns &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By the way, what hash value are we up to these days?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(DH)
9
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example 3: When &lt;code&gt;a == b&lt;/code&gt; does not imply &lt;code&gt;hash(a) == hash(b)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Now let's look at point 2. What happens if we create an object with &lt;code&gt;__eq__&lt;/code&gt;
that disagrees with &lt;code&gt;__hash__&lt;/code&gt;. We actually already have made a class like
this, the &lt;code&gt;AlwaysEqual&lt;/code&gt; object above. Instances of &lt;code&gt;AlwaysEqual&lt;/code&gt; will always
compare equal to one another, but they will not have the same hash, because
they will use &lt;code&gt;object&lt;/code&gt;'s default &lt;code&gt;__hash__&lt;/code&gt; of &lt;code&gt;id&lt;/code&gt;. Let's take a closer look
at the &lt;code&gt;AE1&lt;/code&gt; and &lt;code&gt;AE2&lt;/code&gt; objects we created above.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(AE1)
270498221
&amp;gt;&amp;gt;&amp;gt; hash(AE2)
270498197
&amp;gt;&amp;gt;&amp;gt; hash(AE1) == hash(AE2)
False
&amp;gt;&amp;gt;&amp;gt; AE1 == AE2
True
&amp;gt;&amp;gt;&amp;gt; {AE1, AE2}
{&amp;lt;__main__.AlwaysEqual at 0x101f79950&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can already see that we have broken one of the key properties of a &lt;code&gt;set&lt;/code&gt;,
which is that it does not contain the same object twice (remember that &lt;code&gt;AE1&lt;/code&gt;
and &lt;code&gt;AE2&lt;/code&gt; should be considered the "same object" because &lt;code&gt;AE1 == AE2&lt;/code&gt; is
&lt;code&gt;True&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This can lead to subtle issues. For example, suppose we had a list and we
wanted to remove all the duplicate items from it. An easy way to do this is to
convert the list to a set and then convert it back to a list.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; l = ['a', 'a', 'c', 'a', 'c', 'b']
&amp;gt;&amp;gt;&amp;gt; list(set(l))
['a', 'c', 'b']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, this method is obviously not going to work for a list of &lt;code&gt;AlwaysEqual&lt;/code&gt; objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; AE3 = AlwaysEqual()
&amp;gt;&amp;gt;&amp;gt; l = [AE1, AE1, AE3, AE2, AE3]
&amp;gt;&amp;gt;&amp;gt; list(set(l))
[&amp;lt;__main__.AlwaysEqual at 0x102c1d590&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79950&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actually, what happened here is that the equality that we defined on
&lt;code&gt;AlwaysEqual&lt;/code&gt; was essentially ignored. We got a list of unique items by &lt;code&gt;id&lt;/code&gt;,
instead of by &lt;code&gt;__eq__&lt;/code&gt;. You can imagine that if &lt;code&gt;__eq__&lt;/code&gt; were something a
little less trivial, where some, but not all, objects are considered equal,
that this could lead to very subtle issues.&lt;/p&gt;
&lt;p&gt;But there is an issue with the above algorithm. It isn't stable, that is, it
removes the ordering that we had on the list. We could do this better by
making a new list, and looping through the old one, adding elements to the new
list if they aren't already there.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def uniq(l):
...     newl = []
...     for i in l:
...         if i not in newl:
...             newl.append(i)
...     return newl
...
&amp;gt;&amp;gt;&amp;gt; uniq(['a', 'a', 'c', 'a', 'c', 'b'])
['a', 'c', 'b']
&amp;gt;&amp;gt;&amp;gt; uniq([AE1, AE1, AE3, AE2, AE3])
[&amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time, we used &lt;code&gt;in&lt;/code&gt;, which uses &lt;code&gt;==&lt;/code&gt;, so we got only one unique element of
the list of &lt;code&gt;AlwaysEqual&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;But there is an issue with this algorithm as well. Checking if something is in
a list is \(O(n)\), but we have an object that allows checking in \(O(1)\)
time, namely, a &lt;code&gt;set&lt;/code&gt;. So a more efficient version might be to create a set
alongside the new list for containment checking purposes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def uniq2(l):
...     newl = []
...     newlset = set()
...     for i in l:
...         if i not in newlset:
...             newl.append(i)
...             newlset.add(i)
...     return newl
...
&amp;gt;&amp;gt;&amp;gt; uniq2(['a', 'a', 'c', 'a', 'c', 'b'])
['a', 'c', 'b']
&amp;gt;&amp;gt;&amp;gt; uniq2([AE1, AE1, AE3, AE2, AE3])
[&amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x102c1d590&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79950&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bah! Since we used a set, we compared by hashing, not equality, so we are left
with three objects again. Notice the extremely subtle difference
here. Basically, it is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; AE1 in {AE2}
False
&amp;gt;&amp;gt;&amp;gt; AE1 in [AE2]
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set containment uses hashing; list containment uses equality. If the two don't
agree, then the result of your algorithm will depend on which one you use!&lt;/p&gt;
&lt;p&gt;By the way, as you might expect, dictionary containment also uses hashing, and
tuple containment uses equality:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; AE1 in {AE2: 42}
False
&amp;gt;&amp;gt;&amp;gt; AE1 in (AE2,)
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example 4: Caching hashing&lt;/h3&gt;
&lt;p&gt;If you ever want to add subtle bizarreness to a system, add some sort of
caching, and then do it wrong.&lt;/p&gt;
&lt;p&gt;As we noted in the beginning, one important property of a hash function is
that it is quick to compute. A nice way to achieve this for heavily cached
objects is to cache the value of the cache on the object, so that it only
needs to be computed once. The pattern (which is modeled after SymPy's
&lt;code&gt;Basic&lt;/code&gt;) is something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class HashCache(object):
...     def __init__(self, arg):
...         self.arg = arg
...         self.hash_cache = None
...     def __hash__(self):
...         if self.hash_cache is None:
...             self.hash_cache = hash(self.arg)
...         return self.hash_cache
...     def __eq__(self, other):
...         if not isinstance(other, HashCache):
...             return False
...         return self.arg == other.arg
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HashCache&lt;/code&gt; is nothing more than a small wrapper around a hashable argument,
which caches its hash.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash('a')
12416037344
&amp;gt;&amp;gt;&amp;gt; a = HashCache('a')
&amp;gt;&amp;gt;&amp;gt; hash(a)
12416037344
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For ordinary Python builtins, simply recomputing the hash will be faster than
the attribute lookup used by &lt;code&gt;HashCache&lt;/code&gt;. &lt;em&gt;Note: This uses the &lt;code&gt;%timeit&lt;/code&gt; magic
from IPython. &lt;code&gt;%timeit&lt;/code&gt; only works when run in IPython or Jupyter.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; %timeit hash('a')
10000000 loops, best of 3: 69.9 ns per loop
&amp;gt;&amp;gt;&amp;gt; %timeit hash(a)
1000000 loops, best of 3: 328 ns per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But for a custom object, computing the hash may be more computationally
expensive. As hashing is supposed to agree with equality (as I hope you've
realized by now!), if computing equality is expensive, computing a hash
function that agrees with it might be expensive as well.&lt;/p&gt;
&lt;p&gt;As a simple example of where this might be useful, consider a highly nested
tuple, an object whose hash that is relatively expensive to compute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = ()
&amp;gt;&amp;gt;&amp;gt; for i in range(1000):
...     a = (a,)
...
&amp;gt;&amp;gt;&amp;gt; A = HashCache(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; %timeit hash(a)
100000 loops, best of 3: 9.61 &amp;#181;s per loop
&amp;gt;&amp;gt;&amp;gt; %timeit hash(A)
1000000 loops, best of 3: 325 ns per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, we haven't done anything wrong. &lt;code&gt;HashCache&lt;/code&gt;, as you may have noticed,
has &lt;code&gt;__eq__&lt;/code&gt; defined correctly:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; HashCache(1) == HashCache(2)
False
&amp;gt;&amp;gt;&amp;gt; HashCache(1) == HashCache(1)
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what happens if we mutate a &lt;code&gt;HashCache&lt;/code&gt;. This is different from examples 1
and 2 above, because we will be mutating what happens with equality testing,
but not the hash (because of the cache).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In the below example, recall that small integers hash to themselves, so
&lt;code&gt;hash(1) == 1&lt;/code&gt; and &lt;code&gt;hash(2) == 2&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; d = {a: 42}
&amp;gt;&amp;gt;&amp;gt; a.arg = 2
&amp;gt;&amp;gt;&amp;gt; hash(a)
1
&amp;gt;&amp;gt;&amp;gt; d[a]
42
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we cached the hash of &lt;code&gt;a&lt;/code&gt;, which was computed as soon as we created
the dictionary &lt;code&gt;d&lt;/code&gt;, it remained unchanged when modified the arg to be
&lt;code&gt;2&lt;/code&gt;. Thus, we can still find the key of the dictionary. But since we have
mutated &lt;code&gt;a&lt;/code&gt;, the equality testing on it has changed. This means that, as with
the previous example, we are going to have issues with dicts and sets keeping
unique keys and entries (respectively).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; hash(a)
1
&amp;gt;&amp;gt;&amp;gt; hash(b)
2
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; a == b
True
&amp;gt;&amp;gt;&amp;gt; hash(a) == hash(b)
False
&amp;gt;&amp;gt;&amp;gt; {a, b}
{&amp;lt;__main__.HashCache at 0x102c32050&amp;gt;, &amp;lt;__main__.HashCache at 0x102c32450&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; uniq([a, b])
[&amp;lt;__main__.HashCache at 0x102c32050&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; uniq2([a, b])
[&amp;lt;__main__.HashCache at 0x102c32050&amp;gt;, &amp;lt;__main__.HashCache at 0x102c32450&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we mutate &lt;code&gt;b&lt;/code&gt; so that it compares equal to &lt;code&gt;a&lt;/code&gt;, we start to have the same sort of issues that we had in example 3 with &lt;code&gt;AlwaysEqual&lt;/code&gt;. Let's look at an instant replay.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; print(a == b)
True
&amp;gt;&amp;gt;&amp;gt; print(hash(a) == hash(b))
True
&amp;gt;&amp;gt;&amp;gt; print({a, b})
set([&amp;lt;__main__.HashCache object at 0x102c32a10&amp;gt;])
&amp;gt;&amp;gt;&amp;gt; print(uniq([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32a50&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; print(uniq2([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32a50&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait a minute, this time it's different! Comparing it to above, it's pretty
easy to see what was different this time. We left out the part where we showed
the hash of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. When we did that the first time, it cached the hash
of &lt;code&gt;b&lt;/code&gt;, making it forever be &lt;code&gt;2&lt;/code&gt;, but when we didn't do it the second time,
the hash had not been cached yet, so the first time it is computed (in the
&lt;code&gt;print(hash(a) == hash(b))&lt;/code&gt; line), &lt;code&gt;b.arg&lt;/code&gt; has already been changed to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And herein lies the extreme subtlety: if you mutate an object with that hashes
its cache like this, you will run into issues &lt;strong&gt;only if&lt;/strong&gt; you had already
called some function that hashed the object somewhere. Now just about anything
might compute the hash of an object. Or it might not. For example, our &lt;code&gt;uniq2&lt;/code&gt;
function computes the hash of the objects in its input list, because it stores
them in a set, but &lt;code&gt;uniq&lt;/code&gt; does not:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; uniq2([a, b])
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; print(a == b)
True
&amp;gt;&amp;gt;&amp;gt; print(hash(a) == hash(b))
False
&amp;gt;&amp;gt;&amp;gt; print({a, b})
set([&amp;lt;__main__.HashCache object at 0x102c32c50&amp;gt;, &amp;lt;__main__.HashCache object at 0x102c32c10&amp;gt;])
&amp;gt;&amp;gt;&amp;gt; print(uniq([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32c50&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; print(uniq2([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32c50&amp;gt;, &amp;lt;__main__.HashCache object at 0x102c32c10&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; uniq([a, b])
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; print(a == b)
True
&amp;gt;&amp;gt;&amp;gt; print(hash(a) == hash(b))
True
&amp;gt;&amp;gt;&amp;gt; print({a, b})
set([&amp;lt;__main__.HashCache object at 0x102c32c90&amp;gt;])
&amp;gt;&amp;gt;&amp;gt; print(uniq([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32bd0&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; print(uniq2([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32bd0&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The moral of this final example is that if you are going to cache something,
that something had better be immutable.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The conclusion is this: don't mess with hashing. The two invariants above are
important. Let's restate them here,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The hash of an object must not change across the object's lifetime (in
other words, a hashable object should be immutable).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;a == b&lt;/code&gt; implies &lt;code&gt;hash(a) == hash(b)&lt;/code&gt; (note that the reverse might not
hold in the case of a hash collision).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don't follow these rules, you will run into very subtle issues, because
very basic Python operations expect these invariants.&lt;/p&gt;
&lt;p&gt;If you want to be able to mutate an object's properties, you have two
options. First, make the object unhashable (set &lt;code&gt;__hash__ = None&lt;/code&gt;). You won't
be able to use it in sets or as keys to a dictionary, but you will be free to
change the object in-place however you want.&lt;/p&gt;
&lt;p&gt;A second option is to make all mutable properties non-dependent on hashing or
equality testing. This option works well if you just want to cache some
internal state that doesn't inherently change the object. Both &lt;code&gt;__eq__&lt;/code&gt; and
&lt;code&gt;__hash__&lt;/code&gt; should remain unchanged by changes to this state. You may also want
to make sure you use proper getters and setters to prevent modification of
internal state that equality testing and hashing does depend on.&lt;/p&gt;
&lt;p&gt;If you choose this second option, however, be aware that Python considers it
fair game to swap out two identical immutable (i.e., hashable) objects at any
time. If &lt;code&gt;a == b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is hashable, Python (and Python libraries) are free
to replace &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;b&lt;/code&gt; anywhere. For example, Python uses an optimization on
strings called &lt;em&gt;interning&lt;/em&gt;, where common strings are stored only once in
memory. A similar optimization is used in CPython for small integers. If store
something on &lt;code&gt;a&lt;/code&gt; but not &lt;code&gt;b&lt;/code&gt; and make &lt;code&gt;a&lt;/code&gt;'s hash ignore that data, you may
find that some function that should return &lt;code&gt;a&lt;/code&gt; may actually return &lt;code&gt;b&lt;/code&gt;. For
this reason, I generally don't recommend this second option unless you know
what you are doing.&lt;/p&gt;
&lt;p&gt;Finally, to keep invariant 2, here are some tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure that the parts of the object that you use to compare equality are
not themselves mutable. If they are, then your object cannot itself be
immutable. This means that if &lt;code&gt;a == b&lt;/code&gt; depends on &lt;code&gt;a.attr == b.attr&lt;/code&gt;, and
&lt;code&gt;a.attr&lt;/code&gt; is a list, then you will need to use a tuple instead (if you want
&lt;code&gt;a&lt;/code&gt; to be hashable).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't have to invent a hash function. If you find yourself doing
bitshifts and XORs, you're doing it wrong. Reuse Python's builtin hashable
objects. If the hash of your object should depend on the hash of &lt;code&gt;a&lt;/code&gt; and
&lt;code&gt;b&lt;/code&gt;, define &lt;code&gt;__hash__&lt;/code&gt; to return &lt;code&gt;hash((a, b))&lt;/code&gt;. If the order of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;
does not matter, use &lt;code&gt;hash(frozenset([a, b]))&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't cache something unless you know that the entire cached state will not
be changed over the lifetime of the cache. Hashable objects are actually
great for caches. If they properly satisfy invariant 1, and all the state
that should be cached is part of the hash, then you will not need to
worry. And the best part is that you can just use &lt;code&gt;dict&lt;/code&gt; for your cache.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unless you really need the performance or memory gains, don't make your
objects mutable. This makes programs much harder to reason about. Some
functional programming languages take this idea so far that they don't allow
any mutable objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't worry about the situation where &lt;code&gt;hash(a) == hash(b)&lt;/code&gt; but &lt;code&gt;a != b&lt;/code&gt;. This is a hash collision. Unlike the issues we looked at here, hash
collisions are expected and checked for in Python. For example, our
&lt;code&gt;HashToOne&lt;/code&gt; object from the beginning will always hash to 1, but different
instances will compare unequal. We can see that the right thing is done in
every case with them.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashToOne()
&amp;gt;&amp;gt;&amp;gt; b = HashToOne()
&amp;gt;&amp;gt;&amp;gt; a == b
False
&amp;gt;&amp;gt;&amp;gt; hash(a) == hash(b)
True
&amp;gt;&amp;gt;&amp;gt; {a, b}
{&amp;lt;__main__.HashToOne at 0x102c32a10&amp;gt;, &amp;lt;__main__.HashToOne at 0x102c32cd0&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; uniq([a, b])
[&amp;lt;__main__.HashToOne at 0x102c32cd0&amp;gt;, &amp;lt;__main__.HashToOne at 0x102c32a10&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; uniq2([a, b])
[&amp;lt;__main__.HashToOne at 0x102c32cd0&amp;gt;, &amp;lt;__main__.HashToOne at 0x102c32a10&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only concern with hash collisions is that too many of them can remove
the performance gains of &lt;code&gt;dict&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conversely, if you are writing something that uses an object's hash, remember
that hash collisions are possible and unavoidable.&lt;/p&gt;
&lt;p&gt;A classic example of a hash collision is &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;-2&lt;/code&gt;. Remember I
mentioned above that small integers hash to themselves:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(1)
1
&amp;gt;&amp;gt;&amp;gt; hash(-3)
-3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The exception to this is &lt;code&gt;-1&lt;/code&gt;. The CPython interpreter uses &lt;code&gt;-1&lt;/code&gt; as an error
state, so -1 is not a valid hash value. Hence, &lt;code&gt;hash(-1)&lt;/code&gt; can't be &lt;code&gt;-1&lt;/code&gt;. So
the Python developers picked the next closest thing.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(-1)
-2
&amp;gt;&amp;gt;&amp;gt; hash(-2)
-2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to check if something handles hash collisions correctly, this is
a simple example.  I should also note that the fact that integers hash to
themselves is an implementation detail of CPython that may not be true in
alternate Python implementations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we didn't discuss this much here, but don't assume that the hash of
your object will be the same across Python sessions. In Python 3.3 and up,
hash values of strings are randomized from a value that is seeded when
Python starts up. This also affects any object whose hash is computed
from the hash of strings. In Python 2.7, you can enable hash randomization
with the &lt;code&gt;-R&lt;/code&gt; flag to the interpreter. The following are two different
Python sessions.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; print(hash('a'))
-7750608935454338104
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; print(hash('a'))
8897161376854729812
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/doing-math-with-python-by-amit-saha-book-review/</guid>
      <title>"Doing Math with Python" by Amit Saha: Book Review</title>
      <author>Aaron Meurer (asmeurer)</author>
      <pubDate>Sat, 19 Dec 2015 21:01:21 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/doing-math-with-python-by-amit-saha-book-review/</link>
      <description>&lt;div&gt;&lt;p&gt;&lt;em&gt;Note: No Starch Press has sent me a copy of this book for review purposes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SHORT VERSION: &lt;em&gt;Doing Math with Python&lt;/em&gt; is well written and introduces
topics in a nice, mathematical way. I would recommend it for new users of
SymPy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.nostarch.com/doingmathwithpython"&gt;&lt;em&gt;Doing Math with Python&lt;/em&gt;&lt;/a&gt; by
Amit Saha is a new book published by No Starch Press. The book shows how to
use Python to do high school-level mathematics. It makes heavy use of SymPy in
many chapters, and this review will focus mainly on those parts, as that is
the area I have expertise in.&lt;/p&gt;
&lt;p&gt;The book assumes a basic understanding of programming in Python 3, as well as
the mathematics used (although advanced topics are explained). No prior
background in the libraries used, SymPy and matplotlib, is assumed. For this
reason, this book can serve as an introduction them. Each chapter ends with
some programming exercises, which range from easy exercises to more advanced
ones.&lt;/p&gt;
&lt;p&gt;The book has seven chapters. In the first chapter, "Working with numbers",
basic mathematics using pure Python is introduced (no SymPy yet). It should be
noted that Python 3 (not Python 2) is required for this book. One of the
earliest examples in the book (&lt;code&gt;3/2 == 1.5&lt;/code&gt;) will not work correctly without
it. I applaud this choice, although I might have added a more prominent
warning to wary users. (As a side note, in the appendix, it is recommended to
install Python via &lt;a href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt;, which I
also applaud). This chapter also introduces the &lt;code&gt;fractions&lt;/code&gt; module, which
seems odd since &lt;code&gt;sympy.Rational&lt;/code&gt; will be implicitly used for rational numbers
later in the text (to little harm, however, since SymPy automatically converts
&lt;code&gt;fractions.Fraction&lt;/code&gt; instances to &lt;code&gt;sympy.Rational&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In all, this chapter is a good introduction to the basics of the mathematics
of Python. There is also an introduction to variables and strings. However, as
I noted above, one should really have some background with basic Python before
reading this book, as concepts like flow control and function definition are
assumed (note: there is an appendix that goes over this).&lt;/p&gt;
&lt;p&gt;Chapters 2 and 3 cover plotting with matplotlib and basic statistics,
respectively. I will not say much about the matplotlib chapter, since I know
only basic matplotlib myself. I will note that the chapter covers matplotlib
from a (high school) mathematics point of view, starting with a definition of
the Cartesian plane, which seems a fitting choice for the book.&lt;/p&gt;
&lt;p&gt;Chapter 3 shows how to do basic statistics (mean, median, standard deviation,
etc.) using pure Python. This chapter is clearly meant for pedagogical
purposes for basic statistics, since the basic functions &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;median&lt;/code&gt;,
etc. are implemented from scratch (as opposed to using &lt;code&gt;numpy.mean&lt;/code&gt; or the
standard library &lt;code&gt;statistics.mean&lt;/code&gt;). This serves as a good introduction to
more Python concepts (like &lt;code&gt;collections.Counter&lt;/code&gt;) and statistics.&lt;/p&gt;
&lt;p&gt;Note that the functions in this chapter assume that the data is the entire
population, not a sample. This is mentioned at the beginning of the chapter,
but not elaborated on. For example, this leads to a different definition of
variance than what might be seen elsewhere (the &lt;code&gt;calculate_variance&lt;/code&gt; used in
this chapter is &lt;code&gt;statistics.pvariance&lt;/code&gt;, not &lt;code&gt;statistics.variance&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It is good to see that a numerically stable definition of variance is used
here (see &lt;a href="https://www.python.org/dev/peps/pep-0450/"&gt;PEP 450&lt;/a&gt; for more
discussion on this). These numerical issues show why it is important to use a
real statistics library rather than a home grown one. In other words, use this
chapter to learn more about statistics and Python, but if you ever need to do
statistics on real data, use a statistics library like &lt;code&gt;statistics&lt;/code&gt; or
&lt;code&gt;numpy&lt;/code&gt;. Finally, I should note that this book appears to be written against
Python 3.3, whereas &lt;code&gt;statistics&lt;/code&gt; was added to the Python standard library in
Python 3.4. Perhaps it will get a mention in future editions.&lt;/p&gt;
&lt;p&gt;Chapter 4, "Algebra and Symbolic Math with SymPy" starts the introduction to
SymPy. The chapter starts similar to the
&lt;a href="http://docs.sympy.org/latest/tutorial/index.html"&gt;official SymPy tutorial&lt;/a&gt; in
describing what symbolics is, and guiding the reader away from common
misconceptions and gotchas. The chapter does a good job of explaining common
gotchas and avoiding antipatterns.&lt;/p&gt;
&lt;p&gt;This chapter may serve as an alternative to the official tutorial. Unlike the
official tutorial, which jumps into
&lt;a href="http://docs.sympy.org/latest/tutorial/simplification.html#powers"&gt;higher-level mathematics&lt;/a&gt;
and &lt;a href="http://docs.sympy.org/latest/tutorial/matrices.html"&gt;broader use-cases&lt;/a&gt;,
this chapter may be better suited to those wishing to use SymPy from the
standpoint of high school mathematics.&lt;/p&gt;
&lt;p&gt;My only gripes with this chapter, which, in total, are minor, relate to printing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The typesetting of the pretty printing is inconsistent and, in some cases,
incorrect. Powers are printed in the book using superscript numbers, like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x&amp;#178;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, SymPy prints powers like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 2
x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;even when Unicode pretty printing is enabled. This is a minor point, but it
may confuse users. Also, the output appears to use ASCII pretty printing
(mixed with superscript powers), for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    x&amp;#178;   x&amp;#179;   x&amp;#8308;   x&amp;#8309;
x + -- + -- + -- + --
    2    3    4    5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most users will either get MathJax printing (if they are using the Jupyter
notebook), or Unicode printing, like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     2    3    4    5
    x    x    x    x
x + &amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472;
    2    3    4    5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this is a minor point, but at the very least the correct printing
looks better than the fake printing used here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In line with the previous point, I would recommend telling the user to
start with &lt;code&gt;init_printing()&lt;/code&gt;. The function is used once to change the order
of printing to rev-lex (for series printing). There is a link to the
&lt;a href="http://docs.sympy.org/latest/tutorial/printing.html"&gt;tutorial page on printing&lt;/a&gt;. That
page goes into more depth than is necessary for the book, but I would
recommend at least mentioning to always call &lt;code&gt;init_printing()&lt;/code&gt;, as 2-D
printing can make a huge difference over the default &lt;code&gt;str&lt;/code&gt; printing, and it
obviates the need to call &lt;code&gt;pprint&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Chapter 5, "Playing with Sets and Probability" covers SymPy's set objects
(particularly &lt;code&gt;FiniteSet&lt;/code&gt;) to do some basic set theory and probability. I'm
excited to see this in the book. The sets module in SymPy is relatively new,
but quite powerful. We do not yet have an introduction to the sets module in
the SymPy tutorial. This chapter serves as a good introduction to it (albeit
only with finite sets, but the SymPy functions that operate on infinite sets
are exactly the same as the ones that operate on finite sets). In all, I don't
have much to say about this chapter other than that I was pleasantly surprised
to see it included.&lt;/p&gt;
&lt;p&gt;Chapter 6 shows how to draw geometric shapes and fractals with matplotlib. I
again won't say much on this, as I am no matplotlib expert. The ability to
draw leaf fractals and Sierpi&amp;#324;ski triangles with Python does look
entertaining, and should keep readers enthralled.&lt;/p&gt;
&lt;p&gt;Chapter 7, "Solving Calculus Problems" goes into more depth with SymPy. In
particular, assumptions, limits, derivatives, and integrals.  The chapter
alternates between symbolic formulations using SymPy and numeric
calculations (using &lt;code&gt;evalf&lt;/code&gt;). The numeric calculations are done both for
simple examples and more advanced things (like implementing gradient descent).&lt;/p&gt;
&lt;p&gt;One small gripe here. The book shows that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sympy import Symbol
x = Symbol('x')
if (x + 5) &amp;gt; 0:
    print('Do Something')
else:
    print('Do Something else')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;raises &lt;code&gt;TypeError&lt;/code&gt; at the evaluation of &lt;code&gt;(x + 5) &amp;gt; 0&lt;/code&gt; because its truth value
cannot be determined. The solution to this issue is given as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = Symbol('x', positive=True)
if (x + 5) &amp;gt; 0:
    print('Do Something')
else:
    print('Do Something else')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setting &lt;code&gt;x&lt;/code&gt; to be positive via &lt;code&gt;Symbol('x', positive=True)&lt;/code&gt; is correct, but
even in this case, evaluating an inequality may still raise a &lt;code&gt;TypeError&lt;/code&gt; (for
example, &lt;code&gt;if (x - 5) &amp;gt; 0&lt;/code&gt;). The better way to do this is to use &lt;code&gt;(x + 5).is_positive&lt;/code&gt;. This would require a bit more discussion, especially since
SymPy uses a three-valued logic for assumptions, but I do consider "if
&amp;lt;symbolic inequality&amp;gt;" to be a SymPy antipattern.&lt;/p&gt;
&lt;p&gt;I like Saha's approach in this chapter of first showing unevaluated forms
(&lt;code&gt;Limit&lt;/code&gt;, &lt;code&gt;Derivative&lt;/code&gt;, &lt;code&gt;Integral&lt;/code&gt;), and then evaluating them with
&lt;code&gt;doit()&lt;/code&gt;. This puts users in the mindset of a mathematical expression being a
formula which may or may not later be "calculated". The opposite approach,
using the function forms, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;diff&lt;/code&gt;, and &lt;code&gt;integrate&lt;/code&gt;, which evaluate if
they can and return an unevaluated object if they can't, can be confusing to
new users in my experience. A common new SymPy user question is (some form of)
"how do I evaluate an expression?" (the answer is &lt;code&gt;doit()&lt;/code&gt;). Saha's approach
avoids this question by showing &lt;code&gt;doit()&lt;/code&gt; from the outset.&lt;/p&gt;
&lt;p&gt;I also like that this chapter explains the gotcha of &lt;code&gt;math.sin(Symbol('x'))&lt;/code&gt;,
although I personally would have included this earlier in the text.&lt;/p&gt;
&lt;p&gt;(Side note: now that I look, these are both areas in which the official
tutorial could be improved).&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;This book is a good introduction to doing math with Python, and, for the
chapters that use it, a good basic introduction to SymPy. I would recommend it
to anyone wishing to learn SymPy, but especially to anyone whose knowledge of
mathematics may preclude them from getting the most out of the official SymPy
tutorial.&lt;/p&gt;
&lt;p&gt;I imagine this book would work well as a pedagogical tool, either for math
teachers or for self-learners. The exercises in this book should push the
motivated to learn more.&lt;/p&gt;
&lt;p&gt;I have a few minor gripes, but no major issues.&lt;/p&gt;
&lt;p&gt;You can purchase this book from the
&lt;a href="https://www.nostarch.com/doingmathwithpython"&gt;No Starch Press&lt;/a&gt; website, both
as a print book or an ebook. The website also includes a sample chapter
(&lt;a href="https://www.nostarch.com/download/Doing%20Math%20with%20Python_sample_Chapter1.pdf"&gt;chapter 1&lt;/a&gt;),
code samples from the book, and exercise solutions.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sumith1896.github.io//SymPy-at-PyCon-India-2015</guid>
      <title>SymPy at PyCon India 2015</title>
      <author>Sumith (sumith1896)</author>
      <pubDate>Wed, 21 Oct 2015 00:00:00 GMT</pubDate>
      <link>http://sumith1896.github.io//SymPy-at-PyCon-India-2015</link>
      <description>&lt;h3&gt;The excitement&lt;/h3&gt;

&lt;p&gt;People travelling from all over the country(and outside!) to Bangalore for a conference on a weekend, Yay! &lt;br /&gt;
We were really excited about the workshop and devsprint that the SymPy team was about to deliver. More so excited we were about the fact that we will finally be meeting one another.&lt;/p&gt;

&lt;h3&gt;Day 0&lt;/h3&gt;

&lt;h4&gt;DevSprint&lt;/h4&gt;

&lt;p&gt;The first day of the conference kicked off with the devsprints. That morning the whole team met up, present there were Harsh, Sudhanshu, AMiT, Sartaj, Shivam and Sumith . Abinash couldn't make it but he was there in spirit :) &lt;br /&gt; We all got our awesome SymPy tees and stickers, thanks to AMiT. &lt;br /&gt;
Having got alloted mentoring space in the  devsprint, basic introduction of SymPy was given by Sumith. Some interesting mentoring spaces were CPython by Kushal Das, Data Science by Bargava. The whole list is &lt;a href="https://in.pycon.org/cfp/pycon-india-dev-sprint-2015/proposals/"&gt;here&lt;/a&gt; &lt;br /&gt;
We got the participants started off with setting up the development workflow of SymPy and then they started working on the internals. We alloted bugs to many and directed them to the solution. Sadly, not many issues could alloted or closed due to the really poor internet connection at the conference hall but it was cool interacting with the enthusiasts. We also happened to meet Saurabh Jha, a contributor to SymPy who had worked on Linear Algebra and he helped us out with the devsprint.&lt;/p&gt;

&lt;h4&gt;Workshop&lt;/h4&gt;

&lt;p&gt;The workshops ran in two and a half hour slot. This was conducted by Harsh, Sudhanshu, AMiT and Sumith. &lt;br /&gt;
Sumith started off with introduction to SymPy. Then we spent some helping everyone setup their systems with SymPy and IPython notebooks, even though prior instructions were given, we had to do this so as to get everyone on level ground. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Harsh took first half of the content and exercises &lt;br /&gt;
Sudhanshu took the second half, while AMiT and Sumith were helping out the participants with their queries. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/workshop1.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;We distributed t-shirts to all the participants at the end. Thanks to all those who participated, we had an awesome time.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/workshop2.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Day 0 ended with all of us wrapping off the devsprint. &lt;br /&gt;
After having dinner together, everybody headed back looking forward to the coming two days of the conference.&lt;/p&gt;

&lt;h3&gt;Day 1&lt;/h3&gt;

&lt;p&gt;Day 1 started off with a keynote by Dr Ajith Kumar B.P followed by multiple talks and lightning talks. &lt;br /&gt;
More interesting than the scheduled talks were the conversations that we had with people present in the conference. Exchanging views, discussing on a common point of interest was surely one of the best experience that I had.&lt;/p&gt;

&lt;h4&gt;Lightning talk&lt;/h4&gt;

&lt;p&gt;Shivam delivered a lightning talk titled &lt;code&gt;Python can be fast&lt;/code&gt;. Here, he stressed on the fact that implementing correct data structures is important and Python is not always to be blamed. He gave relevant examples from his summers work at SymPy.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/lightningtalk.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;By this point, we had reached considerable audience in the conference and lot of them were really interested in SymPy. We had a lot of younger participants who were enthusiastic about SymPy as it participates in GSoC, some of them also sent in patches.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p dir="ltr" lang="en"&gt;Hacking sympy with &lt;a href="https://twitter.com/abraarsyed01"&gt;@abraarsyed01&lt;/a&gt; &lt;a href="https://twitter.com/ethcelon"&gt;@ethcelon&lt;/a&gt;&lt;/p&gt;&amp;mdash; Devyani Kota(divs) (@Devyani_kush) &lt;a href="https://twitter.com/Devyani_kush/status/650565162584268800"&gt;October 4, 2015&lt;/a&gt;&lt;/blockquote&gt;



&lt;h3&gt;Day 2&lt;/h3&gt;

&lt;p&gt;Day 2 started off with a keynote by Nicholas H.Tollervey.&lt;/p&gt;

&lt;h4&gt;Talk&lt;/h4&gt;

&lt;p&gt;Sumith delivered a talk titled &lt;code&gt;SymEngine: The future fast core of computer algebra systems&lt;/code&gt;. The content included SymPy, SymEngine and the interface. Some light was shed on Python wrappers to C++ code. Thanks to all the audience present there.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/talk.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;As the day was closing in, Harsh and Shivam had to leave to catch their flights.&lt;/p&gt;

&lt;h4&gt;Open Space&lt;/h4&gt;

&lt;p&gt;After multiple people requesting to help them get started with SymPy, we decided to conduct an open space. &lt;br /&gt;
Open spaces are a way for people to come together to talk about topics, ideas or whatever they want. All people had to do is just show up :) Present there were Sudhanshu, Sartaj, AMiT and Sumith. Sartaj luckily came up with a &lt;code&gt;solveset&lt;/code&gt; bug. We had a live show of how bug-fixing is done. Filing an issue, fixing the code, writing tests and sending in a PR was all demonstrated.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/openspace.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Closing thoughts&lt;/h3&gt;

&lt;p&gt;Conferences are the perfect place to discuss and share knowledge and ideas. The people present there were experts in their area of interests and conversations with them is a cool experience. Meeting the team was something that we were looking forward right from the start. &lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/team1.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Missing Sartaj and Abinash&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/team2.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Discussing SymPy and the gossips in person is a different experience altogether. I'll make sure to attend all the conference that I possibly can from hereon. &lt;/p&gt;

&lt;p&gt;Thanks for the reading &lt;br /&gt;
Be back for more &lt;br /&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
