<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/08/16/week_12</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 12-GSoC 2020</title>
      <pubDate>Sun, 16 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/08/16/week_12.html</link>
      <description>&lt;p&gt;This is the final blog of the official program highlighting the final week. Some of the key discussions were:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/08/09/week_11</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 11-GSoC 2020</title>
      <pubDate>Sun, 09 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/08/09/week_11.html</link>
      <description>&lt;p&gt;This blog describes the 11th week of the program. Some of the key highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/08/02/week_10</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 10-GSoC 2020</title>
      <pubDate>Sun, 02 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/08/02/week_10.html</link>
      <description>&lt;p&gt;This blogs describes the 10th week of the program. Some of the highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/26/week_9</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 9-GSoC 2020</title>
      <pubDate>Sun, 26 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/26/week_9.html</link>
      <description>&lt;p&gt;This blogs describes the week 9, the beginning week of the final phase. This week, I continued to work on the extension of Compound Distributions as well as completing the Matrix Distributions. Some of the highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/19/week_8</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 8-GSoC 2020</title>
      <pubDate>Sun, 19 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/19/week_8.html</link>
      <description>&lt;p&gt;This blog provides the brief description of last week of the second Phase i.e. week 8. Some of the key highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">http://friyaz.github.io/blog/GSoC-2020-Week-6</guid>
      <author>Faisal Riyaz (friyaz)</author>
      <title>Faisal Riyaz (friyaz): GSoC 2020 Week-6</title>
      <pubDate>Mon, 13 Jul 2020 00:00:00 GMT</pubDate>
      <link>http://friyaz.github.io/blog/GSoC-2020-Week-6</link>
      <description>&lt;p&gt;This week, I spent most of my time reading about algorithms to parametrize algebraic curves and surfaces.&lt;/p&gt;

&lt;h3 id="parametrization-of-algebraic-curves-and-surfaces"&gt;Parametrization of algebraic curves and surfaces&lt;/h3&gt;
&lt;p&gt;In many cases, it is easiar to define a region using an implicit equation over its parametric form. For example, a sphere can be defined with the implict eqution x&lt;sup&gt;2&lt;/sup&gt; + y&lt;sup&gt;2&lt;/sup&gt; + z&lt;sup&gt;2&lt;/sup&gt; = 4. Its parametric equation although easy to determine are tedious to write.&lt;/p&gt;

&lt;p&gt;To integrate over implicitly defined regions, it is necessary to determine its parametric representation. I found the &lt;a href="http://graphics.stanford.edu/courses/cs348a-20-winter/Handouts/a228715.pdf"&gt;report&lt;/a&gt; on conversion methods between parametric and implicit curves from Christopher M. Hoffmann very useful. It lists several algorithms for curves and surfaces of different nature.&lt;/p&gt;

&lt;p&gt;Every plane parametric curve can be expressed as an implicit curve. Some, but not all implicit curves can be expressed as parametric curves. Similarly, we can state of algebraic surfaces. Every plane parametric surface can be expressed as an implicit surface. Some, but not all implicit surfaces can be expressed as parametric surfaces.&lt;/p&gt;

&lt;h3 id="conic-sections"&gt;Conic sections&lt;/h3&gt;
&lt;p&gt;One of the algorithm to parametrize conics is given below:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Fix a point p on the conic. Consider the pencil of lines through p. Formulate the line equations.&lt;/li&gt;
  &lt;li&gt;Substitute for y in the conic equation, solve for x(t).&lt;/li&gt;
  &lt;li&gt;Use the fine equations to determine y(t).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The difficult part is to find a point on the conic. For the first implementation, I just iterated over a few points and selected the point which satisfied the equation. I need to implement an algorithm that can find a point on the curve.&lt;/p&gt;

&lt;p&gt;The parametric equations determined by the algoithm are large and complex expressions. The &lt;code class="language-plaintext highlighter-rouge"&gt;vector_integrate&lt;/code&gt; function in most cases is taking too much time to calculate the integral. I tried fixing this using simplification functions in SymPy like trigsimp and expand_trig. The problem still persist.&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ellipse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImplicitRegion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parametric_region_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ellipse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ParametricRegion&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vector_integrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ellipse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;### It gets stuck
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The algorithm does not work for curves of higher algebraic degree like cubics.&lt;/p&gt;

&lt;h3 id="monoids"&gt;Monoids&lt;/h3&gt;
&lt;p&gt;A monoid is an algebraic curve of degree n that has a point of multiplicity n -1. All conics and singular cubics are monoids. Parametrizing a monoid is easy if the special point is known.&lt;/p&gt;

&lt;p&gt;To parametrize a monoid, we need to determine a singular point of n - 1 multiplicity. The singular points are those points on the curve where both partial derivatives vanish. A singular point (xo, yo) of a Curve C is said to be of multiplicity n if all the partial derivatives off to order n - 1 vanish there. This &lt;a href="https://www.semanticscholar.org/paper/Singular-Points-of-Algebraic-Curves-Sakkalis-Farouki/2f8a3e9620c8a5c754f8baaf297af3eff1e6b1f1"&gt;paper&lt;/a&gt; describes an algorithm to calculate such a point but the algorithm is not trivial.&lt;/p&gt;

&lt;h3 id="next-weeks-goal"&gt;Next week&amp;#8217;s goal&lt;/h3&gt;
&lt;p&gt;My goal is to complete the work on parametrizing conics. If I can find a simple algorithm to determine the singular point of the required multiplicity, I will start working on it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class="comment__form" id="respond"&gt;
    &lt;h2 class="title"&gt;Leave a comment &lt;small&gt;&lt;a href="https://friyaz.github.io/blog/GSoC-2020-Week-6#respond" id="cancel-comment-reply-link" rel="nofollow" style="display: none;"&gt;Cancel reply&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
    &lt;form action="https://staticmann.herokuapp.com/v2/entry/friyaz/friyaz.github.io/master/comments" class="js-form" id="comment-form" method="post"&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-name"&gt;Name
          &lt;input id="comment-form-name" name="fields[name]" required="" type="text" /&gt;
        &lt;/label&gt;
        &lt;label for="comment-form-email"&gt;E-mail
          &lt;input id="comment-form-email" name="fields[email]" required="" type="email" /&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="notice"&gt;
          Your email address is used to display your &lt;a href="https://en.gravatar.com"&gt;Gravatar&lt;/a&gt;, if applicable.
          Your email address will not be displayed publicly or shared with anyone else.
      &lt;/div&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-message"&gt;Comment
          &lt;textarea id="comment-form-message" name="fields[message]" required="" rows="6" type="text"&gt;&lt;/textarea&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;input name="options[origin]" type="hidden" value="http://friyaz.github.io/blog/GSoC-2020-Week-6#comments" /&gt;
      &lt;input id="comment-replying-to" name="options[parent]" type="hidden" value="" /&gt;
      &lt;input id="comment-post-id" name="options[slug]" type="hidden" value="GSoC-2020-Week-6" /&gt;
      &lt;input name="options[reCaptcha][siteKey]" type="hidden" value="" /&gt;
      &lt;input name="options[reCaptcha][secret]" type="hidden" value="" /&gt;
      &lt;input name="options[subscribe]" type="hidden" value="email" /&gt;
      &lt;div class="g-recaptcha form__group"&gt;&lt;/div&gt;
      &lt;button id="comment-form-submit" type="submit"&gt;Send comment&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="hidden js-notice notice"&gt;
      &lt;p class="js-notice-text"&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;
  &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://friyaz.github.io/blog/GSoC-2020-Week-5</guid>
      <author>Faisal Riyaz (friyaz)</author>
      <title>Faisal Riyaz (friyaz): GSoC 2020 Week-5</title>
      <pubDate>Mon, 13 Jul 2020 00:00:00 GMT</pubDate>
      <link>http://friyaz.github.io/blog/GSoC-2020-Week-5</link>
      <description>&lt;p&gt;My goal for this week was to add support of integration over objects of geometry module.&lt;/p&gt;

&lt;h3 id="integrating-over-objects-of-geometry-module"&gt;Integrating over objects of geometry module&lt;/h3&gt;
&lt;p&gt;In my GSoC proposal, I mentioned implementing classes to represent commonly used regions. It will allow a user to easily define regions without bothering about its parametric representation. SymPy&amp;#8217;s geometry module has classes to represent commonly used geometric entities like line, circle, and parabola. Francesco told me it would be better to add support to use these classes instead. The integral takes place over the boundary of the geometric entity, not over the area or volume enclosed.&lt;/p&gt;

&lt;p&gt;My first approach was to add a function &lt;code class="language-plaintext highlighter-rouge"&gt;parametric_region&lt;/code&gt; to the classes of geometry module. Francesco suggested not to modify the geometry module as this would make it dependent on vector module. We decided to implement a function &lt;code class="language-plaintext highlighter-rouge"&gt;parametric_region&lt;/code&gt; to return a &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricRegion&lt;/code&gt; of objects of geometry module.&lt;/p&gt;

&lt;p&gt;I learned about the singledispatch decorater of python. It is used to create overloaded functions.&lt;br /&gt;
Polygons cannot be represented as a single &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricRegion&lt;/code&gt; object. Each side of a polygon has its separate parametric representation. To resolve this, we decided to return a list of ParametricRegion objects.&lt;/p&gt;

&lt;p&gt;My next step was to modify &lt;code class="language-plaintext highlighter-rouge"&gt;vector_integrate&lt;/code&gt; to support objects of geometry module. This was easy and involved calling the &lt;code class="language-plaintext highlighter-rouge"&gt;parametric_region_list&lt;/code&gt; function and integrating each &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricRegion&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/sympy/sympy/pull/19650/files"&gt;PR&lt;/a&gt; for the work has been merged. Note that we still do not have any way to create regions like disc and cone without their parametric representation. To support such regions, I think we need to add new classes to the geometry module.&lt;/p&gt;

&lt;h3 id="next-weeks-goal"&gt;Next week&amp;#8217;s goal&lt;/h3&gt;
&lt;p&gt;I plan to work on implementing a class to represent implicitly defined regions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class="comment__form" id="respond"&gt;
    &lt;h2 class="title"&gt;Leave a comment &lt;small&gt;&lt;a href="https://friyaz.github.io/blog/GSoC-2020-Week-5#respond" id="cancel-comment-reply-link" rel="nofollow" style="display: none;"&gt;Cancel reply&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
    &lt;form action="https://staticmann.herokuapp.com/v2/entry/friyaz/friyaz.github.io/master/comments" class="js-form" id="comment-form" method="post"&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-name"&gt;Name
          &lt;input id="comment-form-name" name="fields[name]" required="" type="text" /&gt;
        &lt;/label&gt;
        &lt;label for="comment-form-email"&gt;E-mail
          &lt;input id="comment-form-email" name="fields[email]" required="" type="email" /&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="notice"&gt;
          Your email address is used to display your &lt;a href="https://en.gravatar.com"&gt;Gravatar&lt;/a&gt;, if applicable.
          Your email address will not be displayed publicly or shared with anyone else.
      &lt;/div&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-message"&gt;Comment
          &lt;textarea id="comment-form-message" name="fields[message]" required="" rows="6" type="text"&gt;&lt;/textarea&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;input name="options[origin]" type="hidden" value="http://friyaz.github.io/blog/GSoC-2020-Week-5#comments" /&gt;
      &lt;input id="comment-replying-to" name="options[parent]" type="hidden" value="" /&gt;
      &lt;input id="comment-post-id" name="options[slug]" type="hidden" value="GSoC-2020-Week-5" /&gt;
      &lt;input name="options[reCaptcha][siteKey]" type="hidden" value="" /&gt;
      &lt;input name="options[reCaptcha][secret]" type="hidden" value="" /&gt;
      &lt;input name="options[subscribe]" type="hidden" value="email" /&gt;
      &lt;div class="g-recaptcha form__group"&gt;&lt;/div&gt;
      &lt;button id="comment-form-submit" type="submit"&gt;Send comment&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="hidden js-notice notice"&gt;
      &lt;p class="js-notice-text"&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;
  &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://friyaz.github.io/blog/GSoC-2020-Week-4</guid>
      <author>Faisal Riyaz (friyaz)</author>
      <title>Faisal Riyaz (friyaz): GSoC 2020 Week-4</title>
      <pubDate>Mon, 13 Jul 2020 00:00:00 GMT</pubDate>
      <link>http://friyaz.github.io/blog/GSoC-2020-Week-4</link>
      <description>&lt;p&gt;The first phase of GSoC is over. We can now integrate the scalar or vector field over a parametrically defined region.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/sympy/sympy/pull/19539"&gt;PR&lt;/a&gt; for &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricIntegral&lt;/code&gt; class has been merged. In my &lt;a href="https://friyaz.github.io/blog/GSoC-2020-Week-3"&gt;last post&lt;/a&gt;, I mentioned about a weird error. It turns out that I was importing &lt;code class="language-plaintext highlighter-rouge"&gt;pi&lt;/code&gt; as a symbol instead of as a number. Due to this, the expressions were returned unevaluated causing tests to fail.&lt;/p&gt;

&lt;h2 id="the-route-ahead"&gt;The route ahead&lt;/h2&gt;
&lt;p&gt;I had a detailed discussion with Francesco about the route ahead. My plan has drifted from my proposal because we have decided not to implement new classes for special regions like circles and spheres. The geometry module already has classes to represent some of these regions. We have decided to use these classes.&lt;/p&gt;

&lt;p&gt;Francesco reminded me that we have to complete the documentation of these changes. I was planning to complete the documentation in the last phase. But I will try completing it soon as I may forget some details.&lt;/p&gt;

&lt;p&gt;We also discussed adding support to perform integral transformation using Stoke&amp;#8217;s and Green&amp;#8217;s theorem. In many cases, such transformation can be useful but adding them may be outside the scope of this project.&lt;/p&gt;

&lt;p&gt;I have convinced Francesco on adding classes to represent implicitly defined regions. It might be the most difficult part of the project but hopefully, it will be useful to SymPy users.&lt;/p&gt;
&lt;h3 id="next-weeks-goal"&gt;Next week&amp;#8217;s goal&lt;/h3&gt;
&lt;p&gt;My next week&amp;#8217;s goal is to make a PR for adding suppor to integrate over objects of the geometry module.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class="comment__form" id="respond"&gt;
    &lt;h2 class="title"&gt;Leave a comment &lt;small&gt;&lt;a href="https://friyaz.github.io/blog/GSoC-2020-Week-4#respond" id="cancel-comment-reply-link" rel="nofollow" style="display: none;"&gt;Cancel reply&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
    &lt;form action="https://staticmann.herokuapp.com/v2/entry/friyaz/friyaz.github.io/master/comments" class="js-form" id="comment-form" method="post"&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-name"&gt;Name
          &lt;input id="comment-form-name" name="fields[name]" required="" type="text" /&gt;
        &lt;/label&gt;
        &lt;label for="comment-form-email"&gt;E-mail
          &lt;input id="comment-form-email" name="fields[email]" required="" type="email" /&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="notice"&gt;
          Your email address is used to display your &lt;a href="https://en.gravatar.com"&gt;Gravatar&lt;/a&gt;, if applicable.
          Your email address will not be displayed publicly or shared with anyone else.
      &lt;/div&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-message"&gt;Comment
          &lt;textarea id="comment-form-message" name="fields[message]" required="" rows="6" type="text"&gt;&lt;/textarea&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;input name="options[origin]" type="hidden" value="http://friyaz.github.io/blog/GSoC-2020-Week-4#comments" /&gt;
      &lt;input id="comment-replying-to" name="options[parent]" type="hidden" value="" /&gt;
      &lt;input id="comment-post-id" name="options[slug]" type="hidden" value="GSoC-2020-Week-4" /&gt;
      &lt;input name="options[reCaptcha][siteKey]" type="hidden" value="" /&gt;
      &lt;input name="options[reCaptcha][secret]" type="hidden" value="" /&gt;
      &lt;input name="options[subscribe]" type="hidden" value="email" /&gt;
      &lt;div class="g-recaptcha form__group"&gt;&lt;/div&gt;
      &lt;button id="comment-form-submit" type="submit"&gt;Send comment&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="hidden js-notice notice"&gt;
      &lt;p class="js-notice-text"&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;
  &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-8</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 8</title>
      <pubDate>Sun, 12 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-8</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19716"&gt;Fixed incorrect limit evaluation related to LambertW function&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This was a minor bug fix. We added the &lt;code class="language-plaintext highlighter-rouge"&gt;_singularities&lt;/code&gt; feature to the &lt;code class="language-plaintext highlighter-rouge"&gt;LambertW&lt;/code&gt; function so that its limit gets evaluated using the &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic check&lt;/code&gt; already present in the limit codebase.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/18696"&gt;Fixed errors in assumptions when rewriting RisingFactorial / FallingFactorial as gamma or factorial&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;This was a long pending issue. The rewrite to &lt;code class="language-plaintext highlighter-rouge"&gt;gamma&lt;/code&gt; or &lt;code class="language-plaintext highlighter-rouge"&gt;factorial&lt;/code&gt; methods of &lt;code class="language-plaintext highlighter-rouge"&gt;RisingFactorial&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;FallingFactorial&lt;/code&gt; did not handle all the possible cases, which caused errors in some evaluations.
Thus, we decided to come up with a proper rewrite using &lt;code class="language-plaintext highlighter-rouge"&gt;Piecewise&lt;/code&gt; which accordingly returned the correct rewrite depending on the assumptions on the variables.
Handling such rewrites using &lt;code class="language-plaintext highlighter-rouge"&gt;Piecewise&lt;/code&gt; is never easy, and thus there were a lot of failing testcases.
After spending a lot of time debugging and fixing each failing testcase, we were finally able to merge this.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This marks the end of &lt;code class="language-plaintext highlighter-rouge"&gt;Phase-2&lt;/code&gt; of the program. I learnt a lot during these two months and gained many important things from my mentors.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/12/week_7</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 7-GSoC 2020</title>
      <pubDate>Sun, 12 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/12/week_7.html</link>
      <description>&lt;p&gt;This blog describes the 7th week of the program and the 3rd week of Phase 2. Some of the key highlights on the discussions and the implementations during this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-7</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 7</title>
      <pubDate>Sun, 05 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-7</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19680"&gt;Improved the limit evaluations of Power objects&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This PR improves the limit evaluations of Power objects.
We first check if the limit expression is a &lt;code class="language-plaintext highlighter-rouge"&gt;Power object&lt;/code&gt; and then accordingly evaluate the limit depending on different cases.
First of all, we express &lt;code class="language-plaintext highlighter-rouge"&gt;b**e&lt;/code&gt; in the form of &lt;code class="language-plaintext highlighter-rouge"&gt;exp(e*log(b))&lt;/code&gt;. After this, we check if &lt;code class="language-plaintext highlighter-rouge"&gt;e*log(b)&lt;/code&gt; is &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic&lt;/code&gt; and accordingly evaluate the final result.
This check helps us to handle the trivial cases in the beginning itself.&lt;/p&gt;

        &lt;p&gt;Now, if &lt;code class="language-plaintext highlighter-rouge"&gt;e*log(b)&lt;/code&gt; is not meromorphic, then we separately evaluate the limit of the base and the exponent.
This helps us to determine the &lt;code class="language-plaintext highlighter-rouge"&gt;indeterminant form&lt;/code&gt; of the limit expression if present. 
As we know, there are 3 indeterminate forms corresponding to power objects: &lt;code class="language-plaintext highlighter-rouge"&gt;0**0&lt;/code&gt;, &lt;code class="language-plaintext highlighter-rouge"&gt;oo**0&lt;/code&gt;, and &lt;code class="language-plaintext highlighter-rouge"&gt;1**oo&lt;/code&gt;, which need to be handled carefully.
If there is no indeterminate form present, then no further evaluations are required. Otherwise, we handle all the three cases separately and correctly evaluate the final result.&lt;/p&gt;

        &lt;p&gt;We also added some code to improve the evaluation of limits having &lt;code class="language-plaintext highlighter-rouge"&gt;Abs()&lt;/code&gt; expressions.
For every &lt;code class="language-plaintext highlighter-rouge"&gt;Abs()&lt;/code&gt; term present in the limit expression, we replace it simply by its argument or the negative of its argument, depending on
whether the value of the limit of the argument is greater than zero or less than zero for the given limit variable.&lt;/p&gt;

        &lt;p&gt;Finally, we were able to merge this after resolving some failing testcases.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19697"&gt;Fixed limit evaluations involving error functions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The incorrect limit evaluations of &lt;code class="language-plaintext highlighter-rouge"&gt;error functions&lt;/code&gt; were mainly because the &lt;code class="language-plaintext highlighter-rouge"&gt;tractable&lt;/code&gt; rewrite was wrong and did not handle all the possible cases.
For a proper rewrite, it was required that the limit variable be passed to the corresponding rewrite method.
This is because, to define a correct rewrite we had to evaluate the limit of the argument of the &lt;code class="language-plaintext highlighter-rouge"&gt;error function&lt;/code&gt;, for the passed limit variable.
Thus, we added a default argument &lt;code class="language-plaintext highlighter-rouge"&gt;limitvar&lt;/code&gt; to all the &lt;code class="language-plaintext highlighter-rouge"&gt;tractable rewrite&lt;/code&gt; methods and resolved this issue.
While debugging, we also noticed that the &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_as_leading_term&lt;/code&gt; method of error function was wrong, hence it was also fixed.&lt;/p&gt;

        &lt;p&gt;Finally, we were able to merge this after resolving some failing testcases.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/05/week_6</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 6-GSoC 2020</title>
      <pubDate>Sun, 05 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/05/week_6.html</link>
      <description>&lt;p&gt;This blog describes the 6th week of the official program and the 2nd week of Phase 2. By the end of this week, Compound Distributions framework is ready as targeted and I would now focus on the Joint Distributions in the upcoming weeks of this Phase.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-6</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 6</title>
      <pubDate>Sun, 28 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-6</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19646"&gt;Fixed RecursionError and Timeout in limit evaluations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The &lt;code class="language-plaintext highlighter-rouge"&gt;Recursion Errors&lt;/code&gt; in limit evaluations were mainly due to the fact that the indeterminant form of &lt;code class="language-plaintext highlighter-rouge"&gt;1**oo&lt;/code&gt; was not handled accurately in the &lt;code class="language-plaintext highlighter-rouge"&gt;mrv()&lt;/code&gt; function of the
&lt;code class="language-plaintext highlighter-rouge"&gt;Gruntz algorithm&lt;/code&gt;. So, some minor changes were required to fix those.&lt;/p&gt;

        &lt;p&gt;The major issue was to handle those cases which were timing out. On deep digging, we identified that the 
&lt;code class="language-plaintext highlighter-rouge"&gt;cancel()&lt;/code&gt; function of &lt;code class="language-plaintext highlighter-rouge"&gt;polytools.py&lt;/code&gt; was the reason. Thus, we decided to completely transform the &lt;code class="language-plaintext highlighter-rouge"&gt;cancel()&lt;/code&gt; function to speed up its algorithm. 
Now after this major modification, many testcases were failing as the &lt;code class="language-plaintext highlighter-rouge"&gt;cancel()&lt;/code&gt; function plays an important role in simplifying evaluations and 
is thus used at many places across the codebase. Therefore, a lot of time was spent in debugging and rectifying these testcases.&lt;/p&gt;

        &lt;p&gt;Finally we were able to merge this, enhancing the limit evaluation capabilities of &lt;code class="language-plaintext highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/06/28/week_5</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 5-GSoC 2020</title>
      <pubDate>Sun, 28 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/06/28/week_5.html</link>
      <description>&lt;p&gt;This blogs describes the week 5, the beginning week of the Phase 2. Phase 2 will be mostly focused on Compound Distributions which were stalled from 2018, and additions to Joint Distributions.</description>
    </item>
    <item>
      <guid isPermaLink="false">http://friyaz.github.io/blog/GSoC-2020-Week-3</guid>
      <author>Faisal Riyaz (friyaz)</author>
      <title>Faisal Riyaz (friyaz): GSoC 2020 Week-3</title>
      <pubDate>Sun, 21 Jun 2020 00:00:00 GMT</pubDate>
      <link>http://friyaz.github.io/blog/GSoC-2020-Week-3</link>
      <description>&lt;p&gt;I spent this week working on the implementation of the &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricIntegral&lt;/code&gt; class.&lt;/p&gt;

&lt;h3 id="modifying-api-of-parametricregion"&gt;Modifying API of ParametricRegion&lt;/h3&gt;
&lt;p&gt;When I was writing the test cases, I realized that the API of the ParametricRegion could be improved. Instead of passing limits as a dictionary, tuples can be used. 
So I modified the API of the ParametricRegion class. The new API is closer to the API of the &lt;code class="language-plaintext highlighter-rouge"&gt;integral&lt;/code&gt; class and more intuitive.  I made a separate &lt;a href="https://github.com/sympy/sympy/pull/19580"&gt;PR&lt;/a&gt; for this change to make it easy for reviewers.&lt;/p&gt;

&lt;p&gt;Example of the new API:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;ParametricRegion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="handling-scalar-fields-with-no-base-scalars"&gt;Handling scalar fields with no base scalars&lt;/h3&gt;
&lt;p&gt;As discussed in previous posts, we decided to not associate a coordinate system with the parametric region. Instead, we assume that the parametricregion is defined in the coordinate system of the field of which the integral is being calculated. We calculate the position vector and normal vector of the parametric region using the base scalars and vectors of the fields. This works fine for most cases. But when the field does not contain any base scalar or vector in its expression, we cannot extract the coordinate system from the field.&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;ParametricIntegral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# We cannot determine the coordinate system from the field. 
# To calculate the line integral, we need to find the derivative of the position vector.
# This is not possible until we know the base vector of the field
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To handle this situation, I assign a coordinate system C to the region. This does not affect the result in any way as the result is independent of it. It just allows the existing algorithm to work in this case.&lt;/p&gt;

&lt;h3 id="separate-class-for-vector-and-scalar-fields"&gt;Separate class for vector and scalar fields&lt;/h3&gt;
&lt;p&gt;Francesco suggested making separate classes based on the nature of the field: vector and scalar. I am open to this idea. But I think it will be more easy and intuitive for the users if they can use the same class to calculate the integral. I do not think they are different enough from a user&amp;#8217;s perspective to have a separate interface.&lt;/p&gt;

&lt;p&gt;Maybe we can have a function &lt;code class="language-plaintext highlighter-rouge"&gt;vectorintegrate&lt;/code&gt; which returns the object of &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricVectorIntegral&lt;/code&gt; or &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricScalarIntegral&lt;/code&gt; depending on the nature of the field. This can work for other types of integrals too. Suppose we implement a class &lt;code class="language-plaintext highlighter-rouge"&gt;ImplicitIntegral&lt;/code&gt; to calculate the integral over an implicit region. The &lt;code class="language-plaintext highlighter-rouge"&gt;vectorintegrate&lt;/code&gt; function can then return an object of &lt;code class="language-plaintext highlighter-rouge"&gt;ImplicitIntegral&lt;/code&gt; object by identifying the region is defined implicitly. I think this will be great. I will have more discussion with Francesco on this aspect.&lt;/p&gt;

&lt;h3 id="topological-sort-of-parameters"&gt;Topological sort of parameters&lt;/h3&gt;
&lt;p&gt;When evaluating double integral, the result some times depend upon the order in which the integral is evaluated. If the bounds of one parameter &lt;code class="language-plaintext highlighter-rouge"&gt;u&lt;/code&gt; depend on another parameter &lt;code class="language-plaintext highlighter-rouge"&gt;v&lt;/code&gt;, we should integrate first with respect to &lt;code class="language-plaintext highlighter-rouge"&gt;u&lt;/code&gt; and then &lt;code class="language-plaintext highlighter-rouge"&gt;v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, consider the problem of evaluating the area of the triangle.&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParametricRegion&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The area of the triangle is 10 units and should be independent of the order parameters are specified at the time of object initialization. But the double integral depends on the order of integration.&lt;/p&gt;
&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; integrate(1, (x, 0, 2), (y, 10 - 5*x))
20 - 10*x
&amp;gt;&amp;gt;&amp;gt; integrate(1, (y, 0, 10 - 5*x), (x, 0, 2))
10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So parameters must be passed to &lt;code class="language-plaintext highlighter-rouge"&gt;integrate&lt;/code&gt; in the correct order. To overcome this issue, we topologically sort the parameters. SymPy already had a function to perform topologically sort in its utilities module. I implemented a function that generates the graph and passes it to the &lt;code class="language-plaintext highlighter-rouge"&gt;topological_sort&lt;/code&gt; function. This made my work easy.&lt;/p&gt;

&lt;h3 id="long-computation-time-of-integrals"&gt;Long computation time of Integrals&lt;/h3&gt;
&lt;p&gt;Some integrals are taking too long to compute. When base scalars in the field are replaced by their parametric equivalents, the expression of the field becomes large. Further, the integrand is the dot product of the field with a vector or product of the field and the magnitude of the vector. The integrate function takes about 20-30 seconds to calculate the integral. I think this behavior is due to the expression of integrand growing structurally despite it being simple.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;solidsphere = ParametricRegion((r*sin(phi)*cos(theta), r*sin(phi)*sin(theta), r*cos(phi)),\
                                (r, 0, 2), (theta, 0, 2*pi), (phi, 0, pi))
&amp;gt;&amp;gt;&amp;gt; ParametricIntegral(C.x**2 + C.y**2, solidsphere)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case, the parametric field when replaced with parametersr become &lt;code class="language-plaintext highlighter-rouge"&gt;r**2*sin(phi)**2*sin(theta)**2 + r**2*sin(phi)**2*cos(theta)**2&lt;/code&gt; although it can be easily simplified to &lt;code class="language-plaintext highlighter-rouge"&gt;r**2*sin(phi)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;SymPy has a function called &lt;code class="language-plaintext highlighter-rouge"&gt;simplify&lt;/code&gt;. &lt;code class="language-plaintext highlighter-rouge"&gt;simplify&lt;/code&gt; attempts to apply various methods to simplify an expression. When the integrand is simplified using it before passing to integrate, the result is returned almost immediately. Francesco rightly pointed out that simplify is computationally expensive and we can try to some specific simplification. I will look into it.&lt;/p&gt;

&lt;h3 id="failing-test-cases"&gt;Failing test cases&lt;/h3&gt;
&lt;p&gt;Some test cases are failing because of integrate function returning results in different forms. The results are mathematically equivalent but different in terms of structure. I found this strange. I do not think this has to do with hashing. I still have not figured out this problem.&lt;/p&gt;

&lt;h3 id="next-weeks-goal"&gt;Next week&amp;#8217;s goal&lt;/h3&gt;
&lt;p&gt;Hopefully, I will complete the work on the ParamatricIntegral and get it merged. We can then start discussing about representing implicit regions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class="comment__form" id="respond"&gt;
    &lt;h2 class="title"&gt;Leave a comment &lt;small&gt;&lt;a href="https://friyaz.github.io/blog/GSoC-2020-Week-3#respond" id="cancel-comment-reply-link" rel="nofollow" style="display: none;"&gt;Cancel reply&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
    &lt;form action="https://staticmann.herokuapp.com/v2/entry/friyaz/friyaz.github.io/master/comments" class="js-form" id="comment-form" method="post"&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-name"&gt;Name
          &lt;input id="comment-form-name" name="fields[name]" required="" type="text" /&gt;
        &lt;/label&gt;
        &lt;label for="comment-form-email"&gt;E-mail
          &lt;input id="comment-form-email" name="fields[email]" required="" type="email" /&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="notice"&gt;
          Your email address is used to display your &lt;a href="https://en.gravatar.com"&gt;Gravatar&lt;/a&gt;, if applicable.
          Your email address will not be displayed publicly or shared with anyone else.
      &lt;/div&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-message"&gt;Comment
          &lt;textarea id="comment-form-message" name="fields[message]" required="" rows="6" type="text"&gt;&lt;/textarea&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;input name="options[origin]" type="hidden" value="http://friyaz.github.io/blog/GSoC-2020-Week-3#comments" /&gt;
      &lt;input id="comment-replying-to" name="options[parent]" type="hidden" value="" /&gt;
      &lt;input id="comment-post-id" name="options[slug]" type="hidden" value="GSoC-2020-Week-3" /&gt;
      &lt;input name="options[reCaptcha][siteKey]" type="hidden" value="" /&gt;
      &lt;input name="options[reCaptcha][secret]" type="hidden" value="" /&gt;
      &lt;input name="options[subscribe]" type="hidden" value="email" /&gt;
      &lt;div class="g-recaptcha form__group"&gt;&lt;/div&gt;
      &lt;button id="comment-form-submit" type="submit"&gt;Send comment&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="hidden js-notice notice"&gt;
      &lt;p class="js-notice-text"&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;
  &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://friyaz.github.io/blog/GSoC-2020-Week-2</guid>
      <author>Faisal Riyaz (friyaz)</author>
      <title>Faisal Riyaz (friyaz): GSoC 2020 Week-2</title>
      <pubDate>Sun, 21 Jun 2020 00:00:00 GMT</pubDate>
      <link>http://friyaz.github.io/blog/GSoC-2020-Week-2</link>
      <description>&lt;p&gt;Part of this week was spent in getting the &lt;a href="https://github.com/sympy/sympy/pull/19472"&gt;PR&lt;/a&gt; for &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricRegion&lt;/code&gt; merged. I made some fixes to get the failing tests to pass. I also added the docstring.&lt;/p&gt;

&lt;h3 id="parametricintegral"&gt;ParametricIntegral&lt;/h3&gt;
&lt;p&gt;I started &lt;a href="https://github.com/sympy/sympy/pull/19539"&gt;working&lt;/a&gt; on the &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricIntegral&lt;/code&gt; class. &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricIntegral&lt;/code&gt; class returns the integral of a scalar or vector field over a region defined parametrically. It should be able to calculate line, surface, or volume integral depending on the nature of the parametric region. To identify the nature of the region, the &lt;code class="language-plaintext highlighter-rouge"&gt;dimensions&lt;/code&gt; property needs to be added in the &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricRegion&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;I started with writing the test cases to avoid my previous mistake of working on the implementation before deciding the API. 
The API of the ParametricIntegral class:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;ParametricIntegral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parametricregion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParametricRegion&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ParametricIntegral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;semisphere&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParametricRegion&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;\
                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ParametricIntegral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;semisphere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I initially thought to make it a subclass of &lt;code class="language-plaintext highlighter-rouge"&gt;Integral&lt;/code&gt; as the &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricIntegral&lt;/code&gt; is a kind of integral. But there was no reuse of any code from &lt;code class="language-plaintext highlighter-rouge"&gt;Integral&lt;/code&gt; in the    &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricIntegral&lt;/code&gt; so decided against it.&lt;br /&gt;
A rough sketch of the algorithm to calculate integral is described below:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Replace the base scalars in the field with their definition in terms of parameters and obtain the parametric representation of the field.&lt;/li&gt;
  &lt;li&gt;Form the position vector of the region using definition tuple and base vectors determined from the field.&lt;/li&gt;
  &lt;li&gt;Depending on the type of region, calculate the derivative of the position vector, or find the normal vector or calculate dV using Jacobian.&lt;/li&gt;
  &lt;li&gt;Calculate the integrand using dot product or multiplication with the parametric field.&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class="language-plaintext highlighter-rouge"&gt;integrate&lt;/code&gt; function to calculate the integral.&lt;/li&gt;
  &lt;li&gt;If the &lt;code class="language-plaintext highlighter-rouge"&gt;integrate&lt;/code&gt; function can evaluate the integral, return it otherwise return an object of the &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricRegion&lt;/code&gt; class.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also had &lt;a href="https://github.com/sympy/sympy/issues/19320#issuecomment-643234256"&gt;discussion&lt;/a&gt; on whether swapping the upper and lower limit has any affect on the result of a vector integral. For multiple integrals, the sign of the result changes when the upper and lower bound of a parameter are interchanged. I do not think we came to any conclusion. But this won&amp;#8217;t matter for integrals over parametric regions as the bounds are directly defined by the user.&lt;/p&gt;

&lt;h3 id="next-weeks-goal"&gt;Next week&amp;#8217;s goal&lt;/h3&gt;
&lt;p&gt;I will start working on the implementation of the &lt;code class="language-plaintext highlighter-rouge"&gt;ParametricIntegral&lt;/code&gt; class. I am also trying to get more involved in SymPy outside of my GSoC project. I hope I can become a contributing member of the community.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class="comment__form" id="respond"&gt;
    &lt;h2 class="title"&gt;Leave a comment &lt;small&gt;&lt;a href="https://friyaz.github.io/blog/GSoC-2020-Week-2#respond" id="cancel-comment-reply-link" rel="nofollow" style="display: none;"&gt;Cancel reply&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
    &lt;form action="https://staticmann.herokuapp.com/v2/entry/friyaz/friyaz.github.io/master/comments" class="js-form" id="comment-form" method="post"&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-name"&gt;Name
          &lt;input id="comment-form-name" name="fields[name]" required="" type="text" /&gt;
        &lt;/label&gt;
        &lt;label for="comment-form-email"&gt;E-mail
          &lt;input id="comment-form-email" name="fields[email]" required="" type="email" /&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="notice"&gt;
          Your email address is used to display your &lt;a href="https://en.gravatar.com"&gt;Gravatar&lt;/a&gt;, if applicable.
          Your email address will not be displayed publicly or shared with anyone else.
      &lt;/div&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-message"&gt;Comment
          &lt;textarea id="comment-form-message" name="fields[message]" required="" rows="6" type="text"&gt;&lt;/textarea&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;input name="options[origin]" type="hidden" value="http://friyaz.github.io/blog/GSoC-2020-Week-2#comments" /&gt;
      &lt;input id="comment-replying-to" name="options[parent]" type="hidden" value="" /&gt;
      &lt;input id="comment-post-id" name="options[slug]" type="hidden" value="GSoC-2020-Week-2" /&gt;
      &lt;input name="options[reCaptcha][siteKey]" type="hidden" value="" /&gt;
      &lt;input name="options[reCaptcha][secret]" type="hidden" value="" /&gt;
      &lt;input name="options[subscribe]" type="hidden" value="email" /&gt;
      &lt;div class="g-recaptcha form__group"&gt;&lt;/div&gt;
      &lt;button id="comment-form-submit" type="submit"&gt;Send comment&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="hidden js-notice notice"&gt;
      &lt;p class="js-notice-text"&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;
  &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-5</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 5</title>
      <pubDate>Sun, 21 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-5</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19555"&gt;Adds cdir parameter to handle series expansions on branch cuts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Finally, after spending almost 2 weeks on this, we were able to merge the PR, adding a very important functionality of &lt;code class="language-plaintext highlighter-rouge"&gt;series expansions&lt;/code&gt; on the &lt;code class="language-plaintext highlighter-rouge"&gt;branch cuts&lt;/code&gt; to the codebase. 
Previously, either &lt;code class="language-plaintext highlighter-rouge"&gt;SymPy&lt;/code&gt; raised some error or the series expansion was computed incorrectly, when the value in the input was on the branch cut. But now, for most of the functions, the expansion produced is correct.&lt;/p&gt;

        &lt;p&gt;Not only this, we added the &lt;code class="language-plaintext highlighter-rouge"&gt;cdir&lt;/code&gt; parameter to &lt;code class="language-plaintext highlighter-rouge"&gt;leadterm&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;as_leading_term&lt;/code&gt; functions as well. We even extended the functionality a bit to the &lt;code class="language-plaintext highlighter-rouge"&gt;limits&lt;/code&gt; module, so now, 
&lt;code class="language-plaintext highlighter-rouge"&gt;limits&lt;/code&gt; of values lying on the branch cuts of a function are also computed correctly in most cases.&lt;/p&gt;

        &lt;p&gt;We are planning to extend this functionality to all the remaining &lt;code class="language-plaintext highlighter-rouge"&gt;special functions&lt;/code&gt; and wherever else possible to make the codebase even more &lt;code class="language-plaintext highlighter-rouge"&gt;robust&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/06/21/phase_1</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Phase-1-Highlights</title>
      <pubDate>Sun, 21 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/06/21/phase_1.html</link>
      <description>&lt;p&gt;With this blog it completes the awesome month of statistical learning and coding, and the official Phase 1 of the Google Summer of Code-2020.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-4</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 4</title>
      <pubDate>Sun, 14 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-4</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19515"&gt;Fixed incorrect evaluation caused due to subfactorial in limit_seq expression&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This was a minor bug fix. 
The functionality of rewriting the &lt;code class="language-plaintext highlighter-rouge"&gt;subfactorial&lt;/code&gt; term present in an expression into an equivalent term expressed in 
the form of &lt;code class="language-plaintext highlighter-rouge"&gt;factorial&lt;/code&gt; or &lt;code class="language-plaintext highlighter-rouge"&gt;gamma&lt;/code&gt; was added which helped resolve the issue.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19555"&gt;Adds cdir parameter to handle series expansions on branch cuts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Currently, many functions in the codebase are unable to produce correct &lt;code class="language-plaintext highlighter-rouge"&gt;series expansions&lt;/code&gt; on &lt;code class="language-plaintext highlighter-rouge"&gt;branch cuts&lt;/code&gt;. As a result,
the limit evaluation takes place incorrectly for these functions when the limiting value lies on the branch cuts.&lt;/p&gt;

        &lt;p&gt;Thus, we have decided to come up with a parameter named &lt;code class="language-plaintext highlighter-rouge"&gt;cdir&lt;/code&gt; which stands for &lt;code class="language-plaintext highlighter-rouge"&gt;complex direction&lt;/code&gt; and it indicates the direction from which the series expansion is required, thus helping us
to produce the correct series expansion. Special care needs to be taken while handling series expansions on the &lt;code class="language-plaintext highlighter-rouge"&gt;branch points&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;Once we are finished with this work, it will be a &lt;code class="language-plaintext highlighter-rouge"&gt;major enhancement&lt;/code&gt; to the limit evaluation and series expansion capabilities of &lt;code class="language-plaintext highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This marks the end of &lt;code class="language-plaintext highlighter-rouge"&gt;Phase-1&lt;/code&gt; of the program. I learnt a lot during this one month and gained many important things from my mentors.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/06/14/week_4</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 4-GSoC 2020</title>
      <pubDate>Sun, 14 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/06/14/week_4.html</link>
      <description>&lt;p&gt;This blog provides the brief description of the last week i.e week 4 of the Phase 1. Some of the key highlights on the discussions and the implementation during this week are described below:</description>
    </item>
    <item>
      <guid isPermaLink="false">http://friyaz.github.io/blog/GSoC-2020-Week-1</guid>
      <author>Faisal Riyaz (friyaz)</author>
      <title>Faisal Riyaz (friyaz): GSoC 2020 Week-1</title>
      <pubDate>Thu, 11 Jun 2020 00:00:00 GMT</pubDate>
      <link>http://friyaz.github.io/blog/GSoC-2020-Week-1</link>
      <description>&lt;p&gt;The first week of GSoC has been completed. My goal for this week was to add ParametricRegion class. Many common regions have well known parametric representation. Calculation of Integrals on parametric regions is a common problem of vector calculus.&lt;/p&gt;

&lt;p&gt;The PR for adding the ParametricRegion class is &lt;a href="https://github.com/sympy/sympy/pull/19472"&gt;#19472&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="parametricregion"&gt;ParametricRegion&lt;/h1&gt;
&lt;p&gt;An object of ParametricRegion class represents a region in space defined in terms of parameters. If a user wants to perform integration on a region, they have to create a ParametricRegion object. This object can then be passed to other classes to perform integration.&lt;/p&gt;

&lt;p&gt;The implementation part was easy. The difficulty was in deciding the API. I spent much of the week discussing the API, But it was worth it. The ParametricRegion class will most likely be used by many users so it is important for it to be simple and intuitive. I think I should have first completed writing test cases and examples.&lt;/p&gt;

&lt;p&gt;The final &lt;strong&gt;API&lt;/strong&gt; of ParametricRegion class:&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;ParametricRegion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters_or_coordsys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some &lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;p = ParametricRegion(t, (t, t**3), limits={t: (1, 2)})
halfdisc = ParametricRegion((r, theta), (r*cos(theta), r* sin(theta)), {r: (-2, 2), theta: (0, pi)})
cylinder = ParametricRegion((r, theta, z), (cos(theta), r*sin(theta), C.z), {theta: (0, 2*pi), z: (0, 4)})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="parameters_or_coordsys"&gt;parameters_or_coordsys&lt;/h3&gt;
&lt;p&gt;This argument specifies the parameters of the parametric region. When there are more than one parameter, the user has to pass them as tuple. When a CoordSys3d object is passed, its base scalars are used as parameters.&lt;/p&gt;

&lt;h3 id="definition"&gt;definition&lt;/h3&gt;
&lt;p&gt;definiton tuple maps the base scalars to thier parametric representation. It is not necessary for evey base scalar to have a parametric definition.&lt;/p&gt;

&lt;h3 id="coordsys3d"&gt;CoordSys3D&lt;/h3&gt;
&lt;p&gt;A parametric representation is just defining base scalars in terms of some parameters. If the base scalars are not knowm, the region cannot be completely specified. My intial approach was to include an argument to specify the coordinate system.&lt;/p&gt;

&lt;p&gt;Passing a CoordSys3D object can be non intuitive for users. In most cases, the base scalars of the parametric region are the same as that of vector/scalar field. We can avoid passing the CoordSys3D object if we assume that the base scalars of parametric region field are same.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParametricRegion&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;limits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# C.x = r*cos(theta),  C.y = r*sin(theta), C.z = C.z
&lt;/span&gt;&lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# R.x = r*cos(theta),  R.y = r*sin(theta), R.z = R.z
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There can be a situation where SymPy cannot determine the coordinate system of the field. In such situations, we can raise a ValueError. For example:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="limits"&gt;limits&lt;/h3&gt;
&lt;p&gt;Most parametric region have bounds on the parameters. Note that it is not necessary for every parameter to have an upper and lower bound.&lt;/p&gt;

&lt;p&gt;There can be many methods for a user to define bounds of parametric region. We decied to use a dictionary which we named limits. The keys of the dictionary are parameters and the values are tuples (lower bound, upper bound). Another approach is to use a nested bound tuple. Every subtuple will represent the bounds of a parameter.&lt;/p&gt;

&lt;h3 id="next-weeks-goal"&gt;Next week&amp;#8217;s goal&lt;/h3&gt;
&lt;p&gt;My next week&amp;#8217;s task is to get started with ParametricIntegral class. This class will represent integral of a scalar/vector field on a parametric surface. I will first write the unit tests and examples.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class="comment__form" id="respond"&gt;
    &lt;h2 class="title"&gt;Leave a comment &lt;small&gt;&lt;a href="https://friyaz.github.io/blog/GSoC-2020-Week-1#respond" id="cancel-comment-reply-link" rel="nofollow" style="display: none;"&gt;Cancel reply&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
    &lt;form action="https://staticmann.herokuapp.com/v2/entry/friyaz/friyaz.github.io/master/comments" class="js-form" id="comment-form" method="post"&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-name"&gt;Name
          &lt;input id="comment-form-name" name="fields[name]" required="" type="text" /&gt;
        &lt;/label&gt;
        &lt;label for="comment-form-email"&gt;E-mail
          &lt;input id="comment-form-email" name="fields[email]" required="" type="email" /&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="notice"&gt;
          Your email address is used to display your &lt;a href="https://en.gravatar.com"&gt;Gravatar&lt;/a&gt;, if applicable.
          Your email address will not be displayed publicly or shared with anyone else.
      &lt;/div&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-message"&gt;Comment
          &lt;textarea id="comment-form-message" name="fields[message]" required="" rows="6" type="text"&gt;&lt;/textarea&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;input name="options[origin]" type="hidden" value="http://friyaz.github.io/blog/GSoC-2020-Week-1#comments" /&gt;
      &lt;input id="comment-replying-to" name="options[parent]" type="hidden" value="" /&gt;
      &lt;input id="comment-post-id" name="options[slug]" type="hidden" value="GSoC-2020-Week-1" /&gt;
      &lt;input name="options[reCaptcha][siteKey]" type="hidden" value="" /&gt;
      &lt;input name="options[reCaptcha][secret]" type="hidden" value="" /&gt;
      &lt;input name="options[subscribe]" type="hidden" value="email" /&gt;
      &lt;div class="g-recaptcha form__group"&gt;&lt;/div&gt;
      &lt;button id="comment-form-submit" type="submit"&gt;Send comment&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="hidden js-notice notice"&gt;
      &lt;p class="js-notice-text"&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;
  &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-3</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 3</title>
      <pubDate>Sun, 07 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-3</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19508"&gt;Fixed _eval_nseries() of Power&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This was a long pending issue. 
Previously, in the codebase the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of b**e&lt;/code&gt; was computed by breaking the code into different cases, depending on the 
values of the exponent or if the exponent has a symbol etc. Moreover, there was code to handle specific cases, and 
it was not written in a general way. As a result, the code was very long and it was difficult to debug it when some issue popped up.&lt;/p&gt;

        &lt;p&gt;Hence, it was very important to completely rewrite and clean-up &lt;code class="language-plaintext highlighter-rouge"&gt;Pow._eval_nseries()&lt;/code&gt;, so that many issues get resolved and 
it becomes easy to debug any further issues related to series expansions or limit evaluations.&lt;/p&gt;

        &lt;p&gt;Thus, we came up with a &lt;code class="language-plaintext highlighter-rouge"&gt;general algorithm&lt;/code&gt; covering all the cases.&lt;/p&gt;

        &lt;p&gt;The series expansion of &lt;code class="language-plaintext highlighter-rouge"&gt;b**e&lt;/code&gt; is computed as follows:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;We express &lt;code class="language-plaintext highlighter-rouge"&gt;b&lt;/code&gt; as &lt;code class="language-plaintext highlighter-rouge"&gt;f*(1 + g)&lt;/code&gt; where &lt;code class="language-plaintext highlighter-rouge"&gt;f&lt;/code&gt; is the leading term of &lt;code class="language-plaintext highlighter-rouge"&gt;b&lt;/code&gt;. &lt;code class="language-plaintext highlighter-rouge"&gt;g&lt;/code&gt; has order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**d)&lt;/code&gt; where &lt;code class="language-plaintext highlighter-rouge"&gt;d&lt;/code&gt; is strictly positive.&lt;/li&gt;
          &lt;li&gt;Then &lt;code class="language-plaintext highlighter-rouge"&gt;b**e&lt;/code&gt; = &lt;code class="language-plaintext highlighter-rouge"&gt;(f**e)*((1 + g)**e)&lt;/code&gt;where, &lt;code class="language-plaintext highlighter-rouge"&gt;(1 + g)**e&lt;/code&gt; is computed using the concept of &lt;code class="language-plaintext highlighter-rouge"&gt;binomial series&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;The major challenge which we had to face was the fragile nature of the existing code of &lt;code class="language-plaintext highlighter-rouge"&gt;Pow._eval_nseries()&lt;/code&gt;. 
Changing the code even a bit resulted in many test failures, as this function plays an important role in both series expansions and limit evaluations.&lt;/p&gt;

        &lt;p&gt;At times, it became extremely difficult to debug the cause of failures because there were several other functions as well on which the code of this function depended. 
Not only this, fixing one failure caused several others to pop-up.&lt;/p&gt;

        &lt;p&gt;Ultimately, after a week of hard-work, we got everything working.
After which, we further optimised the code ensuring that we are not compromising with efficiency.
At last, this issue was resolved and we ended up adding an extremely optimised implementation of the function to the codebase.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-2</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 2</title>
      <pubDate>Sun, 31 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-2</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19369"&gt;Fixed _eval_nseries() of Mul&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This was a long pending issue. 
Previously, in the codebase the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of a product&lt;/code&gt; was computed as the &lt;code class="language-plaintext highlighter-rouge"&gt;product of expansions of the factors&lt;/code&gt;. 
This approach was correct only when the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term of each series&lt;/code&gt; is a &lt;code class="language-plaintext highlighter-rouge"&gt;constant&lt;/code&gt; but not in general.&lt;/p&gt;

        &lt;p&gt;For example, to compute the expansion of &lt;code class="language-plaintext highlighter-rouge"&gt;f(x)/x**10&lt;/code&gt; at &lt;code class="language-plaintext highlighter-rouge"&gt;x = 0&lt;/code&gt; to order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**10)&lt;/code&gt; it is necessary to compute the series expansion 
of the function &lt;code class="language-plaintext highlighter-rouge"&gt;f(x)&lt;/code&gt; to order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**20)&lt;/code&gt; and thus, computing till order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**10)&lt;/code&gt; would not suffice.&lt;/p&gt;

        &lt;p&gt;The strategy we implemented to resolve this issue was:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Compute the order &lt;code class="language-plaintext highlighter-rouge"&gt;n0&lt;/code&gt; of the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term of the product&lt;/code&gt; as the &lt;code class="language-plaintext highlighter-rouge"&gt;sum of the orders&lt;/code&gt; of the &lt;code class="language-plaintext highlighter-rouge"&gt;leading terms of the factors&lt;/code&gt;.&lt;/li&gt;
          &lt;li&gt;For each factor, compute &lt;code class="language-plaintext highlighter-rouge"&gt;n - n0&lt;/code&gt; terms of its series expansion (starting from its &lt;code class="language-plaintext highlighter-rouge"&gt;leading term of order n1&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;ending at order n - n0 + n1&lt;/code&gt;).&lt;/li&gt;
          &lt;li&gt;Multiply the expansions (&lt;code class="language-plaintext highlighter-rouge"&gt;truncating at terms of order n&lt;/code&gt;).&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;I enjoyed implementing all this because at every step we had to ensure that we are not compromising with the efficiency of the code. 
Finally, this issue was resolved and we ended up adding an extremely optimised implementation of the function to the codebase.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19432"&gt;Used is_meromorphic() function to speed up limit evaluations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;In this PR, we made use of the &lt;code class="language-plaintext highlighter-rouge"&gt;is_meromorphic()&lt;/code&gt; function of SymPy to speed up limit evaluations for certain type of cases.&lt;/p&gt;

        &lt;p&gt;A function is said to be &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic&lt;/code&gt; at a point, if at that point the &lt;code class="language-plaintext highlighter-rouge"&gt;limit of the function exists but is infinite&lt;/code&gt;. 
In these cases, the value of the limit can usually be determined with the help of the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of that function&lt;/code&gt; and 
thus, there is no need to invoke the &lt;code class="language-plaintext highlighter-rouge"&gt;Gruntz algorithm&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;While working on the implementation of this functionality, we required the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term&lt;/code&gt; of the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of the function in the limit expression at the point at which the limit needs to be evaluated&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;But we came across a weird situation, where for some functions, we got &lt;code class="language-plaintext highlighter-rouge"&gt;Complex Infinity&lt;/code&gt; as the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term&lt;/code&gt;.
Thus, we had to rectify the &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_as_leading_term()&lt;/code&gt; methods of these functions (done in a separate &lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19461"&gt;PR&lt;/a&gt;&lt;/strong&gt;).&lt;/p&gt;

        &lt;p&gt;After resolving this issue, we succeeded in adding the required functionality and hence, increased the efficiency of the limit evaluation algorithm of SymPy.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://friyaz.github.io/blog/Google-Summer-of-Code-with-Sympy</guid>
      <author>Faisal Riyaz (friyaz)</author>
      <title>Faisal Riyaz (friyaz): Google Summer of Code with SymPy</title>
      <pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate>
      <link>http://friyaz.github.io/blog/Google-Summer-of-Code-with-Sympy</link>
      <description>&lt;p&gt;My proposal to SymPy has been selected for GSoC. My &lt;a href="https://summerofcode.withgoogle.com/organizations/4831132022996992/#6273573989122048"&gt;project&lt;/a&gt; is to add the support of vector integration over Curves, Lines, and Surfaces to SymPy. My mentors are &lt;a href="https://github.com/Upabjojr"&gt;Francesco Bonazzi&lt;/a&gt; and &lt;a href="https://github.com/divyanshu132"&gt;DivyanshuThakur&lt;/a&gt;. I am very excited to learn from them and contribute to SymPy.&lt;/p&gt;

&lt;p&gt;Google Summer of Code or GSoC is a three-month program to bring student developers into open source development. Students contribute to an open project for three months. Students apply by submitting proposals to organizations. Students can submit up to 3 proposals. I only submitted one as most students do.&lt;/p&gt;

&lt;p&gt;When I started contributing to SymPy, I was new to Open-source. I looked through many projects. SymPy was a great fit for my skills and interests. The &lt;a href="https://github.com/sympy/sympy/wiki/Introduction-to-contributing"&gt;Introduction to contributing&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/wiki/Development-workflow"&gt;development workflow&lt;/a&gt; pages are great and helpful. SymPy has nice documentation and the codebase is well maintained. I received continuous feedback from the community on my Pull Requests. SymPy is a great project to get started with the open-source if you are familiar with Python and comfortable with mathematics.&lt;/p&gt;

&lt;h1 id="sympy"&gt;SymPy&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt; is a python library for symbolic mathematics. Symbolic computations are useful when we want to represent any mathematical quantity exactly.&lt;/p&gt;

&lt;p&gt;SymPy is free software and is licensed under New BSD license.&lt;/p&gt;

&lt;p&gt;Perhaps, the best way to get started with SymPy is to go through the SymPy &lt;a href="https://docs.sympy.org/latest/tutorial/index.html"&gt;tutorial&lt;/a&gt;. We can compute complicated math expressions, solve equations, perform integration, and do many more things.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eqdash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eqdash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eqdash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id="my-project"&gt;My project&lt;/h1&gt;
&lt;p&gt;SymPy has a vector module. It provides tools for basic vector maths.&lt;/p&gt;

&lt;p&gt;To get started with vectors, we first have to define a coordinate system. The module supports Cartesian, spherical, and curvilinear coordinate systems.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.vector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CoordSys3D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;divergence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CoordSys3D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can access the unit vectors of the Coordinate System using C.i, C.j an C.k. C.x, C.y and C.z represent . Any vector expression can be created by performing basic mathematical operations like *,-,+ or / on base scalars and base vectors. We can also calculate gradient, curl and divergence.&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;vdash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vdash&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cross&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vdash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;SymPy does not support integration of vector/scalar fields over curves, surfaces and volume elements. But Vector instances can be integrated with respect to a single variable using Integral class.&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Integral&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Integral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vector calculus has many applications in the field of physics and mathematics, especially in the description of electromagnetic fields, gravitational fields, and fluid flow. The integrals of these fields represent important physical quantities. Vector Calculus plays a significant role in the study of partial differential equations.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s look at some problems of such integrals.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Integrate a scalar field f(x,y,z) = x&lt;sup&gt;2&lt;/sup&gt;&lt;em&gt;y&lt;/em&gt;z over the circle centered at x = 2 and radius r = 3.&lt;/li&gt;
  &lt;li&gt;Calculate the flux of the vector field &lt;strong&gt;v&lt;/strong&gt; across the surface x&lt;sup&gt;2&lt;/sup&gt; + y&lt;sup&gt;2&lt;/sup&gt; + z&lt;sup&gt;2&lt;/sup&gt; = 4 and z &amp;gt; 0.&lt;/li&gt;
  &lt;li&gt;Calculate the mass of the body of Volume V bounded by x&lt;sup&gt;2&lt;/sup&gt; + y&lt;sup&gt;2&lt;/sup&gt; + z&lt;sup&gt;2&lt;/sup&gt; = 1 and z&lt;sup&gt;2&lt;/sup&gt; = (x&lt;sup&gt;2&lt;/sup&gt; + y&lt;sup&gt;2&lt;/sup&gt;)/2. The desnity is given as rho = z.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To solve such integrals using Sympy, one first has to represent these integrals into multiple integrals and then use Integral class to get the result. Other Computer Algebra Systems like Mathematica and Maple already provides the functionality to perform such Integrals.&lt;/p&gt;

&lt;h1 id="community-bonding-period"&gt;Community Bonding Period&lt;/h1&gt;
&lt;p&gt;Community Bonding Period is the first phase of the program. Students try to get familiar with the community and the codebase. I have contributed to SymPy in the past so I was comfortable with the development workflow.&lt;/p&gt;

&lt;p&gt;I submitted my proposal just before the deadline. Therefore, I could not discuss the proposal with the community. I wanted to use this period to discuss the API with the community and find any possible problem which can arise. I also wanted to get familiar with the vector module. SymPy, require that all student-mentor interactions happen on a public channel like a mailing list or Gitter. The Gitter room for discussion related to vectors is &lt;a href="https://gitter.im/sympy/vector"&gt;sympy/vector&lt;/a&gt;. If you have any ideas or suggestions or just want to check out the progress, do lurk around there.&lt;/p&gt;

&lt;h2 id="the-api"&gt;The API&lt;/h2&gt;
&lt;p&gt;In my proposal, I suggested a possible API. But there were some obvious problems with that API which Francesco highlighted. The API must be easy to use and intuitive for SymPy users. It has to be close to the mathematical representation in textbooks. This reduces the difficulty of learning a new API and allows the user to focus. I have started an &lt;a href="https://github.com/sympy/sympy/issues/19320"&gt;issue&lt;/a&gt; for discussing the API with the rest of the community. I also looked at other CAS to get inspiration. Mathematica seems to do a good job of calculating vector integrals.&lt;/p&gt;

&lt;p&gt;I proposed separate classes for different types of integrals(Line, Surface, Volume). Francesco suggested that the classes should represent the way an integral is displayed, not what kind of integral it is. SymPy should distinguish what these integrals are. Integral equations will be represented using subclasses of Integral. Then, we can write algorithms to perform computation.&lt;/p&gt;

&lt;p&gt;We discussed about the separate classes to represent special surfaces. Many problems involve integrating over geometric objects like Circle, Sphere, Rectangle, Disk, etc. It can be helpful to the users if SymPy provides classes to represent such geometric entities. This saves the user from defining these objects using their parametric or implicit equation. We have decided to leave this part for later.&lt;/p&gt;

&lt;p&gt;Another problem is determining the orientation of a surface. A surface can have two normals. The surface integral of scalar fields does not depend on the orientation. A surface integral of a vector field(flux) depends on the orientation. The result differs in sign. We decided that SymPy should always return the magnitude of the integral and it should be left to the user to decide the sign using the dot product.&lt;/p&gt;

&lt;h2 id="defining-regions-using-implicit-equations"&gt;Defining regions using implicit equations&lt;/h2&gt;
&lt;p&gt;Many curves and surfaces are easy to describe using their implicit equations. As an example, a problem involves calculating integral over S where S is the portion of y = 3s&lt;em&gt;x&lt;sup&gt;2&lt;/sup&gt; + 3&lt;/em&gt;z&lt;sup&gt;2&lt;/sup&gt; that lies behind y=6. It will be tiresome for the user to first get the parametric representation of this surface and then use SymPy to solve the integral. I believe that a major part of the problem is finding the parametric representation. The rest of the calculation can be easily performed.&lt;/p&gt;

&lt;p&gt;But handling such integrals is a difficult problem. To calculate the integral, we generally need the parametric representation of the curve/surface. We can then reduce the integral to multiple integrals and use SymPy integral class to get the result.&lt;/p&gt;

&lt;p&gt;One approach to handle implicit equations is to write an algorithm to get the parametric representation from the implicit equation. This approach requires significant effort. We have decided to handle implicit integrals after we have completed the work on parametric integrals.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have decided to first handle integrals over parametric regions. I will implement a class which will represent a parametric region in space. Another class will be implemented to represent an integral over a parametric region.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParametricCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ParametricIntegral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will handle implicit regions later. I plan to complete this work in the first phase hopefully and get started with implicit integrals from the next phase.&lt;/p&gt;

&lt;p&gt;I wanted to start coding early but due to midsemester exams, I could not. Most probably, the end-semester exams will not be conducted this summer. They will get conducted along with next semester&amp;#8217;s exams. So, I do not have any other major commitments for the next 3 months.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;div class="comment__form" id="respond"&gt;
    &lt;h2 class="title"&gt;Leave a comment &lt;small&gt;&lt;a href="https://friyaz.github.io/blog/Google-Summer-of-Code-with-Sympy#respond" id="cancel-comment-reply-link" rel="nofollow" style="display: none;"&gt;Cancel reply&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
    &lt;form action="https://staticmann.herokuapp.com/v2/entry/friyaz/friyaz.github.io/master/comments" class="js-form" id="comment-form" method="post"&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-name"&gt;Name
          &lt;input id="comment-form-name" name="fields[name]" required="" type="text" /&gt;
        &lt;/label&gt;
        &lt;label for="comment-form-email"&gt;E-mail
          &lt;input id="comment-form-email" name="fields[email]" required="" type="email" /&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="notice"&gt;
          Your email address is used to display your &lt;a href="https://en.gravatar.com"&gt;Gravatar&lt;/a&gt;, if applicable.
          Your email address will not be displayed publicly or shared with anyone else.
      &lt;/div&gt;
      &lt;div class="form__group"&gt;
        &lt;label for="comment-form-message"&gt;Comment
          &lt;textarea id="comment-form-message" name="fields[message]" required="" rows="6" type="text"&gt;&lt;/textarea&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;input name="options[origin]" type="hidden" value="http://friyaz.github.io/blog/Google-Summer-of-Code-with-Sympy#comments" /&gt;
      &lt;input id="comment-replying-to" name="options[parent]" type="hidden" value="" /&gt;
      &lt;input id="comment-post-id" name="options[slug]" type="hidden" value="Google-Summer-of-Code-with-Sympy" /&gt;
      &lt;input name="options[reCaptcha][siteKey]" type="hidden" value="" /&gt;
      &lt;input name="options[reCaptcha][secret]" type="hidden" value="" /&gt;
      &lt;input name="options[subscribe]" type="hidden" value="email" /&gt;
      &lt;div class="g-recaptcha form__group"&gt;&lt;/div&gt;
      &lt;button id="comment-form-submit" type="submit"&gt;Send comment&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="hidden js-notice notice"&gt;
      &lt;p class="js-notice-text"&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;p&gt;
  &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-1</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 1</title>
      <pubDate>Sun, 24 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-1</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19292"&gt;Fixed incorrect limit evaluations caused due to different assumptions of the limit variable&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;In this issue, due to different assumptions of the limit variable, the output was coming out to be different and incorrect for the same limit expression.
On digging deep into this issue, we observed that the assumption &lt;code class="language-plaintext highlighter-rouge"&gt;integer = True&lt;/code&gt; was common between all the incorrectly evaluated limit expressions.
Thus, we concluded that the &lt;code class="language-plaintext highlighter-rouge"&gt;Gruntz algorithm&lt;/code&gt; is not able to correctly evaluate those expressions where the limit variable possesses &lt;code class="language-plaintext highlighter-rouge"&gt;integer = True&lt;/code&gt; property.
So, in order to get all the correct mathematical behaviour from the expression, we decided to define a dummy variable lacking &lt;code class="language-plaintext highlighter-rouge"&gt;integer = True&lt;/code&gt; property. 
After which, we simply had to substitute the limit variable with this dummy variable for these type of limit expressions to resolve the issue.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19297"&gt;Fixed incorrect limit evaluations caused due to bug in rewriting&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;At first, this issue seemed tough to resolve because we were unable to find the source of the error. But then, we decided to examine each expression which is generated during evaluation.
This helped us to observe that &lt;code class="language-plaintext highlighter-rouge"&gt;rewriting&lt;/code&gt; of the expression was taking place incorrectly and we shifted our focus towards the &lt;code class="language-plaintext highlighter-rouge"&gt;rewrite()&lt;/code&gt; function.
Afterwards, it was pretty evident that the &lt;code class="language-plaintext highlighter-rouge"&gt;xreplace()&lt;/code&gt; function utilised for rewriting is not sufficient, as it did not find everything that needs to replaced.
Thus, replacing the &lt;code class="language-plaintext highlighter-rouge"&gt;xreplace()&lt;/code&gt; function with the &lt;code class="language-plaintext highlighter-rouge"&gt;subs()&lt;/code&gt; function helped us to resolve this issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Community-Bonding-Period</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Community Bonding Period</title>
      <pubDate>Sun, 17 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Community-Bonding-Period</link>
      <description>&lt;p&gt;The first part of my GSoC journey was the Community Bonding Period.&lt;/p&gt;

&lt;p&gt;In this period, I mainly focussed on the following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setting up my blog, where I will provide weekly reports on the progress of my project, and synchronizing it with Planet SymPy.&lt;/li&gt;
  &lt;li&gt;Setting up a public gitter channel for discussions regarding the project.&lt;/li&gt;
  &lt;li&gt;Prioritising the issues to be solved.&lt;/li&gt;
  &lt;li&gt;Deciding the finer details of the workflow with my mentors and working out efficient ways to solve each particular issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I have been contributing to SymPy for the past 8-9 months, it was easier for me to blend into the community.&lt;/p&gt;

&lt;p&gt;Now, as everything has gone as planned, I have decided to make a head start and begin with the implementation of my project.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-with-sympy</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 Acceptance</title>
      <pubDate>Thu, 07 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-with-sympy</link>
      <description>&lt;p&gt;&lt;img src="https://sachin-4099.github.io/public/gsoc.png" style="width: 30%; height: 30%; float: left;" /&gt;
&lt;img src="https://sachin-4099.github.io/public/sympy.png" style="width: 25%; height: 25%; float: right; margin-right: 100px;" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The results of &lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/organizations/4831132022996992/#5816442299088896"&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; were out on 04 May 2020 and I am pleased to share with you that my proposal with &lt;strong&gt;&lt;a href="http://sympy.org"&gt;SymPy&lt;/a&gt;&lt;/strong&gt; was accepted.&lt;/p&gt;

&lt;p&gt;I would like to thank all the members of the organisation especially &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; for guiding me in my proposal and PR&amp;#8217;s. I am really excited to work for such an amazing organization.&lt;/p&gt;

&lt;p&gt;I will be working on my project, &lt;a href="https://drive.google.com/file/d/1OgbnWLzQzaLfmmSM-fK09TCJmUzJ6tq4/view?usp=sharing"&gt;Amendments to Limit Evaluation and Series Expansion&lt;/a&gt;, during a period of 3 months spanning from June to August, under the mentorship of &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; and &lt;a href="https://github.com/leosartaj"&gt;Sartaj Singh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My primary focus will be to work on the &lt;code class="language-plaintext highlighter-rouge"&gt;series&lt;/code&gt; module and make it more robust as it is the backbone of all the limit evaluations performed by the library.&lt;/p&gt;

&lt;p&gt;Looking forward for a really productive and wonderful summer ahead.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.com/blog/posts/verifying-the-riemann-hypothesis-with-sympy-and-mpmath/</guid>
      <author>Aaron Meurer (asmeurer)</author>
      <title>Aaron Meurer (asmeurer): Verifying the Riemann Hypothesis with SymPy and mpmath</title>
      <pubDate>Tue, 31 Mar 2020 21:12:54 GMT</pubDate>
      <link>https://asmeurer.com/blog/posts/verifying-the-riemann-hypothesis-with-sympy-and-mpmath/</link>
      <description>&lt;div&gt;&lt;p&gt;Like most people, I've had a lot of free time recently, and I've spent some of
it watching various YouTube videos about the &lt;a href="https://en.wikipedia.org/wiki/Riemann_hypothesis"&gt;Riemann
Hypothesis&lt;/a&gt;. I've collected
the videos I've watched into &lt;a href="https://www.youtube.com/playlist?list=PLrFrByaoJbcqKjzgJvLs2-spSmzP7jolT"&gt;YouTube
playlist&lt;/a&gt;.
The playlist is sorted with the most mathematically approachable videos first,
so even if you haven't studied complex analysis before, you can watch the
first few. If you have studied complex analysis, all the videos will be within
your reach (none of them are highly technical with proofs). Each video
contains parts that aren't in any of the other videos, so you will get
something out of watching each of them.&lt;/p&gt;
&lt;p&gt;One of the &lt;a href="https://www.youtube.com/watch?v=lyf9W2PWm40&amp;amp;list=PLrFrByaoJbcqKjzgJvLs2-spSmzP7jolT&amp;amp;index=8"&gt;videos near the end of the
playlist&lt;/a&gt;
is a lecture by Keith Conrad. In it, he mentioned a method by which one could
go about verifying the Riemann Hypothesis with a computer. I wanted to see if
I could do this with SymPy and mpmath. It turns out you can.&lt;/p&gt;
&lt;h2&gt;Background Mathematics&lt;/h2&gt;
&lt;h3&gt;Euler's Product Formula&lt;/h3&gt;
&lt;p&gt;Before we get to the computations, let's go over some mathematical background.
As you may know, the Riemann Hypothesis is one of the 7 &lt;a href="https://en.wikipedia.org/wiki/Millennium_Prize_Problems"&gt;Millennium Prize
Problems&lt;/a&gt; outlined by
the Clay Mathematics Institute in 2000. The problems have gained some fame
because each problem comes with a $1,000,000 prize if solved. One problem, the
&lt;a href="https://en.wikipedia.org/wiki/Poincar%C3%A9_conjecture"&gt;Poincar&amp;#233; conjecture&lt;/a&gt;,
has already been solved (Grigori Perelman who solved it turned down the 1
million dollar prize). The remainder remain unsolved.&lt;/p&gt;
&lt;p&gt;The Riemann Hypothesis is one of the most famous of these problems. The reason
for this is that the problem is central many open questions in number theory.
There are hundreds of theorems which are only known to be true contingent on
the Riemann Hypothesis, meaning that if the Riemann Hypothesis were proven,
immediately hundreds of theorems would be proven as well. Also, unlike some
other Millennium Prize problems, like P=NP, the Riemann Hypothesis is almost
universally believed to be true by mathematicians. So it's not a question of
whether or not it is true, just one of how to actually prove it. The problem
has been open for over 160 years, and while many advances have been made, no
one has yet come up with a proof of it (crackpot proofs aside).&lt;/p&gt;
&lt;p&gt;To understand the statement of the hypothesis, we must first define the zeta
function. Let&lt;/p&gt;
&lt;p&gt;$$\zeta(s) = \sum_{n=1}^\infty \frac{1}{n^s}$$&lt;/p&gt;
&lt;p&gt;(that squiggle $\zeta$ is the lowercase Greek letter zeta). This expression
makes sense if $s$ is an integer greater than or equal to 2, $s=2, 3, 4, \ldots$,
since we know from simple arguments from calculus that the summation converges
in those cases (it isn't important for us what those values are, only that the
summation converges). The story begins with Euler, who in 1740 considered the
following infinite product:&lt;/p&gt;
&lt;p&gt;$$\prod_{\text{$p$ prime}}\frac{1}{1 -
\frac{1}{p^s}}.$$&lt;/p&gt;
&lt;p&gt;The product ranges over all prime numbers, i.e., it is
$$\left(\frac{1}{1 - \frac{1}{2^s}}\right)\cdot\left(\frac{1}{1 -
\frac{1}{3^s}}\right)\cdot\left(\frac{1}{1 - \frac{1}{5^s}}\right)\cdots.$$
The fraction $\frac{1}{1 - \frac{1}{p}}$ may seem odd at first, but consider
the famous geometric series formula, $$\sum_{k=0}^\infty r^k = \frac{1}{1 -
r},$$ which is true for $|r| &amp;lt; 1$. Our fraction is exactly of this form, with
$r = \frac{1}{p^s}$. So substituting, we have&lt;/p&gt;
&lt;p&gt;$$\prod_{\text{$p$ prime}}\frac{1}{1 - \frac{1}{p^s}} =
\prod_{\text{$p$ prime}}\sum_{k=0}^\infty \left(\frac{1}{p^s}\right)^k =
\prod_{\text{$p$ prime}}\sum_{k=0}^\infty \left(\frac{1}{p^k}\right)^s.$$&lt;/p&gt;
&lt;p&gt;Let's take a closer look at what this is. It is&lt;/p&gt;
&lt;p&gt;$$\left(1 + \frac{1}{p_1^s} + \frac{1}{p_1^{2s}} + \frac{1}{p_1^{3s}} +
\cdots\right)\cdot\left(1 + \frac{1}{p_2^s} + \frac{1}{p_2^{2s}} +
\frac{1}{p_2^{3s}} + \cdots\right)\cdot\left(1 + \frac{1}{p_3^s} + \frac{1}{p_3^{2s}} +
\frac{1}{p_3^{3s}} + \cdots\right)\cdots,$$&lt;/p&gt;
&lt;p&gt;where $p_1$ is the first prime, $p_2$ is the second prime, and so on. Now
think about how to expand finite products of finite sums, for instance,
$$(x_1 + x_2 + x_3)(y_1 + y_2 + y_3)(z_1 + z_2 + z_3).$$ To expand the above,
you would take a sum of every combination where you pick one $x$ term, one $y$
term, and one $z$ term, giving&lt;/p&gt;
&lt;p&gt;$$x_1y_1z_1 + x_1y_1z_2 + \cdots + x_2y_1z_3 + \cdots + x_3y_2z_1 + \cdots + x_3y_3z_3.$$&lt;/p&gt;
&lt;p&gt;So to expand the infinite product, we do the same thing. We take every
combination of picking $1/p_i^{ks}$, with one $k$ for each $i$. If we pick
infinitely many non-$1$ powers, the product will be zero, so we only need to
consider terms where there are finitely many primes. The resulting sum will be
something like&lt;/p&gt;
&lt;p&gt;$$\frac{1}{1^s} + \frac{1}{p_1^s} + \frac{1}{p_2^s} + \frac{1}{\left(p_1^2\right)^s} +
\frac{1}{p_3^s} + \frac{1}{\left(p_1p_2\right)^s} + \cdots,$$&lt;/p&gt;
&lt;p&gt;where each prime power combination is picked exactly once. However, we know by
the &lt;a href="https://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic"&gt;Fundamental Theorem of
Arithmetic&lt;/a&gt;
that when you take all combinations of products of primes that you get each
positive integer exactly once. So the above sum is just&lt;/p&gt;
&lt;p&gt;$$\frac{1}{1^s} + \frac{1}{2^s} + \frac{1}{3^s} + \cdots,$$ which is just
$\zeta(s)$ as we defined it above.&lt;/p&gt;
&lt;p&gt;In other words,&lt;/p&gt;
&lt;p&gt;$$\zeta(s) = \sum_{n=1}^\infty \frac{1}{n^s} = \prod_{\text{$p$
prime}}\frac{1}{1 - \frac{1}{p^s}},$$ for $s = 2, 3, 4, \ldots$. This is known
as Euler's product formula for the zeta function. Euler's product formula
gives us our first clue as to why the zeta function can give us insights into
prime numbers.&lt;/p&gt;
&lt;h3&gt;Analytic Continuation&lt;/h3&gt;
&lt;p&gt;In 1859, Bernhard Riemann wrote a &lt;a href="https://en.wikipedia.org/wiki/On_the_Number_of_Primes_Less_Than_a_Given_Magnitude"&gt;short 9 page paper on number theory and the
zeta
function&lt;/a&gt;.
It was the only paper Riemann ever wrote on the subject of number theory, but
it is undoubtedly one of the most important papers every written on the
subject.&lt;/p&gt;
&lt;p&gt;In the paper, Riemann considered that the zeta function summation,&lt;/p&gt;
&lt;p&gt;$$\zeta(s) = \sum_{n=1}^\infty \frac{1}{n^s},$$&lt;/p&gt;
&lt;p&gt;makes sense not just for integers $s = 2, 3, 4, \ldots$, but for any real
number $s &amp;gt; 1$ (if $s = 1$, the summation is the &lt;a href="https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)"&gt;harmonic
series&lt;/a&gt;, which
famously diverges). In fact, it is not hard to see that for complex $s$, the
summation makes sense so long as $\mathrm{Re}(s) &amp;gt; 1$ (for more about what it
even means for $s$ to be complex in that formula, and the basic ideas of
analytic continuation, I recommend &lt;a href="https://www.youtube.com/watch?v=sD0NjbwqlYw&amp;amp;list=PLrFrByaoJbcqKjzgJvLs2-spSmzP7jolT&amp;amp;index=3"&gt;3Blue1Brown's
video&lt;/a&gt;
from my YouTube playlist).&lt;/p&gt;
&lt;p&gt;Riemann wanted to extend this function to the entire complex plane, not just
$\mathrm{Re}(s) &amp;gt; 1$. The process of doing this is called &lt;a href="https://en.wikipedia.org/wiki/Analytic_continuation"&gt;analytic
continuation&lt;/a&gt;. The theory
of complex analysis tells us that if we can find an extension of $\zeta(s)$ to
the whole complex plan that remains differentiable, then that extension is
unique, and we can reasonably say that that &lt;em&gt;is&lt;/em&gt; the definition of the
function everywhere.&lt;/p&gt;
&lt;p&gt;Riemann used the following approach. Consider what we might call the
"completed zeta function"&lt;/p&gt;
&lt;p&gt;$$Z(s) = \pi^{-\frac{s}{2}}\Gamma\left(\frac{s}{2}\right)\zeta(s).$$&lt;/p&gt;
&lt;p&gt;Using Fourier analysis, Riemann gave a formula for $Z(s)$ that is defined
everywhere, allowing us to use it to define $\zeta(s)$ to the left of 1. I
won't repeat Riemann's formula for $Z(s)$ as the exact formula isn't
important, but from it one could also see&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$Z(s)$ is defined everywhere in the complex plane, except for simple poles at 0
and 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$Z(s) = Z(1 - s).$ This means if we have a value for $s$ that is right of
the line $\mathrm{Re}(z) = \frac{1}{2},$ we can get a value to the left of
it by reflecting it over the real-axis and the line at $\frac{1}{2}$ (to
see this, note that the average of $s$ and $1 - s$ is $1/2$, so the
midpoint of a line connecting the two should always go through the point
$1/2$).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Reflection of s and 1 - s" src="https://asmeurer.com/blog/s-and-1-s.svg" width="608" /&gt;
&lt;p&gt;(Reflection of $s$ and $1 - s$. Created with
&lt;a href="https://www.geogebra.org/graphing/c9rzy9hj"&gt;Geogebra&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Zeros&lt;/h3&gt;
&lt;p&gt;Looking at $Z(s)$, it is a product of three parts. So the zeros and poles of
$Z(s)$ correspond to the zeros and poles of these parts, unless they cancel.
$\pi^{-\frac{s}{2}}$ is the easiest: it has no zeros and no poles. The second
part is the &lt;a href="https://en.wikipedia.org/wiki/Gamma_function"&gt;gamma function&lt;/a&gt;.
$\Gamma(z)$ has no zeros and has simple poles at nonpositive integers $z=0,
-1, -2, \ldots$.&lt;/p&gt;
&lt;p&gt;So taking this, along with the fact that $Z(s)$ is entire except for simple
poles at 0 and 1, we get from $$\zeta(s) =
\frac{Z(s)}{\pi^{-\frac{s}{2}}\Gamma\left(\frac{s}{2}\right)}$$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$Z(s)$ has a simple pole at 1, which means that $\zeta(s)$ does as well.
This is not surprising, since we already know the summation formula from
above diverges as $s$ approaches 1.&lt;/li&gt;
&lt;li&gt;$Z(s)$ has a simple pole at 0. Since $\Gamma\left(\frac{s}{2}\right)$ also
has a simple pole at 0, they must cancel and $\zeta(s)$ must have neither a
zero nor a pole at 0 (in fact, $\zeta(0) = -1/2$).&lt;/li&gt;
&lt;li&gt;Since $\Gamma\left(\frac{s}{2}\right)$ has no zeros, there are no further
poles of $\zeta(s)$. Thus, $\zeta(s)$ is entire everywhere except for a
simple pole at $s=1$.&lt;/li&gt;
&lt;li&gt;$\Gamma\left(\frac{s}{2}\right)$ has poles at the remaining negative even
integers. Since $Z(s)$ has no poles there, these must correspond to zeros
of $\zeta(s)$. These are the so-called "trivial" zeros of the zeta
function, at $s=-2, -4, -6, \ldots$. The term "trivial" here is a relative
one. They are trivial to see from the above formula, whereas other zeros of
$\zeta(s)$ are much harder to find.&lt;/li&gt;
&lt;li&gt;$\zeta(s) \neq 0$ if $\mathrm{Re}(s) &amp;gt; 1$. One way to see this is from the
Euler product formula. Since each term in the product is not zero, the
function itself cannot be zero (this is a bit hand-wavy, but it can be made
rigorous). This implies that $Z(s) \neq 0$ in this region as well. We can
reflect $\mathrm{Re}(s) &amp;gt; 1$ over the line at $\frac{1}{2}$ by considering
$\zeta(1 - s)$. Using the above formula and the fact that $Z(s) = Z(1 -
s)$, we see that $\zeta(s)$ cannot be zero for $\mathrm{Re}(s) &amp;lt; 0$ either,
with the exception of the aforementioned trivial zeros at $s=-2, -4, -6,
\ldots$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, any non-trivial zeros of $\zeta(s)$ must have real part between 0 and 1.
This is the so-called "critical strip". Riemann hypothesized that these zeros
are not only between 0 and 1, but are in fact on the line dividing the strip
at real part equal to $1/2$. This line is called the "critical line". This is
Riemann's famous hypothesis: that all the non-trivial zeros of $\zeta(s)$ have
real part equal to $1/2$.&lt;/p&gt;
&lt;h3&gt;Computational Verification&lt;/h3&gt;
&lt;p&gt;Whenever you have a mathematical hypothesis, it is good to check if it is true
numerically. Riemann himself used some methods (not the same ones we use here)
to numerically estimate the first few non-trivial zeros of $\zeta(s)$, and
found that they lied on the critical line, hence the motivation for his
hypothesis. Here is an &lt;a href="https://www.maths.tcd.ie/pub/HistMath/People/Riemann/Zeta/EZeta.pdf"&gt;English
translation&lt;/a&gt;
of his original paper if you are interested.&lt;/p&gt;
&lt;p&gt;If we verified that all the zeros in the critical strip from, say,
$\mathrm{Im}(s) = 0$ to $\mathrm{Im}(s) = N$ are in fact on the critical line
for some large $N$, then it would give evidence that the Riemann Hypothesis is
true. However, to be sure, this would not constitute a proof.
&lt;a href="https://en.wikipedia.org/wiki/G._H._Hardy"&gt;Hardy&lt;/a&gt; showed in 1914 that
$\zeta(s)$ has infinitely many zeros on the critical strip, so only finding
finitely many of them would not suffice as a proof. (Although if we were to
find a counter-example, a zero &lt;em&gt;not&lt;/em&gt; on the critical line, that WOULD
constitute a proof that the Hypothesis is false. However, there are strong
reasons to believe that the hypothesis is not false, so this would be unlikely
to happen.)&lt;/p&gt;
&lt;p&gt;How would we verify that the zeros are all on the line $1/2$. We can find
zeros of $\zeta(s)$ numerically, but how would we know if the real part is
really exactly 0.5 and not 0.500000000000000000000000000000000001? And more
importantly, just because we find some zeros, it doesn't mean that we have all
of them. Maybe we can find a bunch of zeros on the critical line, but how
would we be sure that there aren't other zeros lurking around elsewhere on the
critical strip?&lt;/p&gt;
&lt;p&gt;We want to find rigorous answers to these two questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How can we count the number of zeros between $\mathrm{Im}(s) = 0$ and
$\mathrm{Im}(s) = N$ of $\zeta(s)$?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How can we verify that all those zeros lie on the critical line, that is,
they have real part equal to exactly $1/2$?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Counting Zeros Part 1&lt;/h4&gt;
&lt;p&gt;To answer the first question, we can make use of a powerful theorem from
complex analysis called the &lt;a href="https://en.wikipedia.org/wiki/Argument_principle#Generalized_argument_principle"&gt;argument
principle&lt;/a&gt;.
The argument principle says that if $f$ is a meromorphic function on some
closed contour $C$, and does not have any zeros or poles on $C$ itself, then&lt;/p&gt;
&lt;p&gt;$$\frac{1}{2\pi i}\oint_C \frac{f'(z)}{f(z)}\,dz = \#\left\{\text{zeros of $f$
inside of C}\right\} - \#\left\{\text{poles of $f$
inside of C}\right\},$$ where all zeros and poles are counted with
multiplicity.&lt;/p&gt;
&lt;p&gt;In other words, the integral on the left-hand side counts the number of zeros
of $f$ minus the number of poles of $f$ in a region. The argument principle is
quite easy to show given the Cauchy residue theorem (see the above linked
Wikipedia article for a proof). The expression $f'(z)/f(z)$ is called the
"&lt;a href="https://en.wikipedia.org/wiki/Logarithmic_derivative"&gt;logarithmic
derivative&lt;/a&gt; of $f$",
because it equals $\frac{d}{dz} \log(f(z))$ (although it makes sense even without
defining what "$\log$" means).&lt;/p&gt;
&lt;p&gt;One should take a moment to appreciate the beauty of this result. The
left-hand side is an integral, something we generally think of as being a
continuous quantity. But it is always exactly equal to an integer. Results
such as these give us a further glimpse at how analytic functions and complex
analysis can produce theorems about number theory, a field which one would
naively think can only be studied via discrete means. In fact, these methods
are far more powerful than discrete methods. For many results in number
theory, we only know how to prove them using complex analytic means. So-called
&lt;a href="https://en.wikipedia.org/wiki/Elementary_proof"&gt;"elementary" proofs&lt;/a&gt; for
these results, or proofs that only use discrete methods and do not use complex
analysis, have not yet been found.&lt;/p&gt;
&lt;p&gt;Practically speaking, the fact that the above integral is exactly an integer
means that if we compute it numerically and it comes out to something like
0.9999999, we know that it must in fact equal exactly 1. So as long as we get
a result that is near an integer, we can round it to the exact answer.&lt;/p&gt;
&lt;p&gt;We can integrate a contour along the critical strip up to some $\mathrm{Im}(s)
= N$ to count the number of zeros up to $N$ (we have to make sure to account
for the poles. I go into more details about this when I actually compute the
integral below).&lt;/p&gt;
&lt;h4&gt;Counting Zeros Part 2&lt;/h4&gt;
&lt;p&gt;So using the argument principle, we can count the number of zeros in a region.
Now how can we verify that they all lie on the critical line? The answer lies
in the $Z(s)$ function defined above. By the points outlined in the previous
section, we can see that $Z(s)$ is zero exactly where $\zeta(s)$ is zero on
the critical strip, and it is not zero anywhere else. In other words,&lt;/p&gt;
&lt;div style="text-align: center;"&gt; &lt;b&gt;the zeros of $Z(s)$ are exactly the non-trivial zeros of $\zeta(s)$.&lt;/b&gt;&lt;/div&gt;
&lt;p&gt;This helps us because $Z(s)$ has a nice property on the critical line. First
we note that $Z(s)$ commutes with conjugation, that is $\overline{Z(s)} =
Z(\overline{s})$ (this isn't obvious from what I have shown, but it is true).
On the critical line $\frac{1}{2} + it$, we have&lt;/p&gt;
&lt;p&gt;$$\overline{Z\left(\frac{1}{2} + it\right)} = Z\left(\overline{\frac{1}{2} +
it}\right) = Z\left(\frac{1}{2} - it\right).$$&lt;/p&gt;
&lt;p&gt;However, $Z(s) = Z(1 - s)$, and $1 - \left(\frac{1}{2} - it\right) =
\frac{1}{2} + it$, so&lt;/p&gt;
&lt;p&gt;$$\overline{Z\left(\frac{1}{2} + it\right)} = Z\left(\frac{1}{2} +
it\right),$$&lt;/p&gt;
&lt;p&gt;which means that $Z\left(\frac{1}{2} + it\right)$ is real valued for real $t$.&lt;/p&gt;
&lt;p&gt;This simplifies things a lot, because it is much easier to find zeros of a real
function. In fact, we don't even care about finding the zeros, only counting
them. Since $Z(s)$ is continuous, we can use a simple method: counting sign
changes. If a continuous real function changes signs from negative to positive or from
positive to negative n times in an interval, then it must have at least n
zeros in that interval. It may have more, for instance, if some zeros are
clustered close together, or if a zero has a multiplicity greater than 1, but
we know that there must be at least n.&lt;/p&gt;
&lt;p&gt;So our approach to verifying the Riemann Hypothesis is as such:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Integrate $\frac{1}{2\pi i}\oint_C Z'(s)/Z(s)\,ds$ along a contour $C$
that runs along the critical strip up to some $\mathrm{Im}(s) = N$. The
integral will tell us there are exactly $n$ zeros in the contour, counting
multiplicity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try to find $n$ sign changes of $Z(1/2 + it)$ for $t\in [0, N]$. If we can
find $n$ of them, we are done. We have confirmed all the zeros are on the
critical line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Step 2 would fail if the Riemann Hypothesis is false, in which case a zero
wouldn't be on the critical line. But it would also fail if a zero has a
multiplicity greater than 1, since the integral would count it more times than
the sign changes. Fortunately, as it turns out, the Riemann Hypothesis has
been verified up to N = 10000000000000, and no one has yet found a zero of the
zeta function yet that has a multiplicity greater than 1, so we should not
expect that to happen (no one has yet found a counterexample to the Riemann
Hypothesis either).&lt;/p&gt;
&lt;h2&gt;Verification with SymPy and mpmath&lt;/h2&gt;
&lt;p&gt;We now use SymPy and mpmath to compute the above quantities. We use
&lt;a href="https://www.sympy.org/"&gt;SymPy&lt;/a&gt; to do symbolic manipulation for us, but the
heavy work is done by &lt;a href="http://mpmath.org/doc/current/index.html"&gt;mpmath&lt;/a&gt;.
mpmath is a pure Python library for arbitrary precision numerics. It is used
by SymPy under the hood, but it will be easier for us to use it directly. It
can do, among other things, numeric integration. When I first tried to do
this, I tried using the &lt;a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.zeta.html"&gt;&lt;code&gt;scipy.special&lt;/code&gt; zeta
function&lt;/a&gt;,
but unfortunately, it does not support complex arguments.&lt;/p&gt;
&lt;p&gt;First we do some basic imports&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; import mpmath
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; import matplotlib.pyplot as plt
&amp;gt;&amp;gt;&amp;gt; s = symbols('s')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Define the completed zeta function $Z = \pi^{-s/2}\Gamma(s/2)\zeta(s)$.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Z = pi**(-s/2)*gamma(s/2)*zeta(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can verify that Z is indeed real for $s = \frac{1}{2} + it.$&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; Z.subs(s, 1/2 + 0.5j).evalf()
-1.97702795164031 + 5.49690501450151e-17*I
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get a small imaginary part due to the way floating point arithmetic works.
Since it is below &lt;code&gt;1e-15&lt;/code&gt;, we can safely ignore it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;D&lt;/code&gt; will be the logarithmic derivative of &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; D = simplify(Z.diff(s)/Z)
&amp;gt;&amp;gt;&amp;gt; D
polygamma(0, s/2)/2 - log(pi)/2 + Derivative(zeta(s), s)/zeta(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is $$\frac{\operatorname{polygamma}{\left(0,\frac{s}{2} \right)}}{2} -
\frac{\log{\left(\pi \right)}}{2} + \frac{
\zeta'\left(s\right)}{\zeta\left(s\right)}.$$&lt;/p&gt;
&lt;p&gt;Note that logarithmic derivatives behave similar to logarithms. The
logarithmic derivative of a product is the sum of logarithmic derivatives (the
$\operatorname{polygamma}$ function is the derivative of $\Gamma$).&lt;/p&gt;
&lt;p&gt;We now use
&lt;a href="https://docs.sympy.org/latest/modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify"&gt;&lt;code&gt;lambdify&lt;/code&gt;&lt;/a&gt;
to convert the SymPy expressions &lt;code&gt;Z&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; into functions that are evaluated
using mpmath. A technical difficulty here is that the derivative of the zeta
function $\zeta'(s)$ does not have a closed-form expression. &lt;a href="http://mpmath.org/doc/current/functions/zeta.html?highlight=zeta#mpmath.zeta"&gt;mpmath's &lt;code&gt;zeta&lt;/code&gt;
can evaluate
$\zeta'$&lt;/a&gt;
but it doesn't yet work with &lt;code&gt;sympy.lambdify&lt;/code&gt; (see &lt;a href="https://github.com/sympy/sympy/issues/11802"&gt;SymPy issue
11802&lt;/a&gt;). So we have to manually
define &lt;code&gt;"Derivative"&lt;/code&gt; in lambdify, knowing that it will be the derivative of
&lt;code&gt;zeta&lt;/code&gt; when it is called. Beware that this is only correct for this specific
expression where we know that &lt;code&gt;Derivative&lt;/code&gt; will be &lt;code&gt;Derivative(zeta(s), s)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; Z_func = lambdify(s, Z, 'mpmath')
&amp;gt;&amp;gt;&amp;gt; D_func = lambdify(s, D, modules=['mpmath',
...     {'Derivative': lambda expr, z: mpmath.zeta(z, derivative=1)}])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now define a function to use the argument principle to count the number of
zeros up to $Ni$. Due to the symmetry $Z(s) = Z(1 - s)$, it is only necessary
to count zeros in the top half-plane.&lt;/p&gt;
&lt;p&gt;We have to be careful about the poles of $Z(s)$ at 0 and 1. We can either
integrate right above them, or expand the contour to include them. I chose to
do the former, starting at $0.1i$. It is known that there $\zeta(s)$ has no
zeros near the real axis on the critical strip. I could have also expanded the
contour to go around 0 and 1, and offset the result by 2 to account for the
integral counting those points as poles.&lt;/p&gt;
&lt;p&gt;It has also been shown that there are no zeros on the lines $\mathrm{Re}(s) =
0$ or $\mathrm{Re}(s) = 1$, so we do not need to worry about that. If the
upper point of our contour happens to have zeros exactly on it, we would be
very unlucky, but even if this were to happen we could just adjust it up a
little bit.&lt;/p&gt;
&lt;img alt="Our contour" src="https://asmeurer.com/blog/contour-c.svg" width="608" /&gt;
&lt;p&gt;(Our contour with $N=10$. Created with &lt;a href="https://www.geogebra.org/graphing/nmnsaywd"&gt;Geogebra&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mpmath.org/doc/current/calculus/integration.html#mpmath.quad"&gt;&lt;code&gt;mpmath.quad&lt;/code&gt;&lt;/a&gt;
can take a list of points to compute a contour. The &lt;code&gt;maxdegree&lt;/code&gt; parameter
allows us to increase the degree of the quadrature if it becomes necessary to
get an accurate result.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def argument_count(func, N, maxdegree=6):
...     return 1/(2*mpmath.pi*1j)*(mpmath.quad(func,
...         [1 + 0.1j, 1 + N*1j, 0 + N*1j, 0 + 0.1j,  1 + 0.1j],
...         maxdegree=maxdegree))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let's test it. Lets count the zeros of $$s^2 - s + 1/2$$ in the box
bounded by the above rectangle ($N = 10$).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; expr = s**2 - s + S(1)/2
&amp;gt;&amp;gt;&amp;gt; argument_count(lambdify(s, expr.diff(s)/expr), 10)
mpc(real='1.0', imag='3.4287545414000525e-24')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The integral is 1. We can confirm there is indeed one
zero in this box, at $\frac{1}{2} + \frac{i}{2}$.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; solve(s**2 - s + S(1)/2)
[1/2 - I/2, 1/2 + I/2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now compute points of $Z$ along the critical line so we can count the sign
changes. We also make provisions in case we have to increase the precision of
mpmath to get correct results here. &lt;code&gt;dps&lt;/code&gt; is the number of digits of precision
the values are computed to. The default is 15, but mpmath can compute values
to any number of digits.
&lt;a href="http://mpmath.org/doc/current/general.html#chop"&gt;&lt;code&gt;mpmath.chop&lt;/code&gt;&lt;/a&gt; zeros out
values that are close to &lt;code&gt;0&lt;/code&gt;, which removes any numerically insignificant
imaginary parts that arise from the floating point evaluation.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def compute_points(Z_func, N, npoints=10000, dps=15):
...     import warnings
...     old_dps = mpmath.mp.dps
...     points = np.linspace(0, N, npoints)
...     try:
...         mpmath.mp.dps = dps
...         L = [mpmath.chop(Z_func(i)) for i in 1/2 + points*1j]
...     finally:
...         mpmath.mp.dps = old_dps
...     if L[-1] == 0:
...         # mpmath will give 0 if the precision is not high enough, since Z
...         # decays rapidly on the critical line.
...         warnings.warn("You may need to increase the precision")
...     return L
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next define a function to count the number of sign changes in a list of real
values.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def sign_changes(L):
...     """
...     Count the number of sign changes in L
...
...     Values of L should all be real.
...     """
...     changes = 0
...     assert im(L[0]) == 0, L[0]
...     s = sign(L[0])
...     for i in L[1:]:
...         assert im(i) == 0, i
...         s_ = sign(i)
...         if s_ == 0:
...             # Assume these got chopped to 0
...             continue
...         if s_ != s:
...             changes += 1
...         s = s_
...     return changes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, for $\sin(s)$ from -10 to 10, there are 7 zeros ($3\pi\approx
9.42$).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; sign_changes(lambdify(s, sin(s))(np.linspace(-10, 10)))
7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can check how many zeros of $Z(s)$ (and hence non-trivial zeros of
$\zeta(s)$) we can find. According to
&lt;a href="https://en.wikipedia.org/wiki/Riemann_hypothesis"&gt;Wikipedia&lt;/a&gt;, the first few
non-trivial zeros of $\zeta(s)$ in the upper half-plane are 14.135, 21.022,
and 25.011.&lt;/p&gt;
&lt;p&gt;First try up to $N=20$.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; argument_count(D_func, 20)
mpc(real='0.99999931531867581', imag='-3.2332902529067346e-24')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mathematically, the above value &lt;em&gt;must&lt;/em&gt; be an integer, so we know it is 1.&lt;/p&gt;
&lt;p&gt;Now check the number of sign changes of $Z(s)$ from $\frac{1}{2} + 0i$ to
$\frac{1}{2} + 20i$.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; L = compute_points(Z_func, 20)
&amp;gt;&amp;gt;&amp;gt; sign_changes(L)
1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it checks out. There is one zero between $0$ and $20i$ on the critical
strip, and it is in fact on the critical line, as expected!&lt;/p&gt;
&lt;p&gt;Now let's verify the other two zeros from Wikipedia.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; argument_count(D_func, 25)
mpc(real='1.9961479945577916', imag='-3.2332902529067346e-24')
&amp;gt;&amp;gt;&amp;gt; L = compute_points(Z_func, 25)
&amp;gt;&amp;gt;&amp;gt; sign_changes(L)
2
&amp;gt;&amp;gt;&amp;gt; argument_count(D_func, 30)
mpc(real='2.9997317058520916', imag='-3.2332902529067346e-24')
&amp;gt;&amp;gt;&amp;gt; L = compute_points(Z_func, 30)
&amp;gt;&amp;gt;&amp;gt; sign_changes(L)
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both check out as well.&lt;/p&gt;
&lt;p&gt;Since we are computing the points, we can go ahead and make a plot as well.
However, there is a technical difficulty. If you naively try to plot $Z(1/2 +
it)$, you will find that it decays rapidly, so fast that you cannot really
tell where it crosses 0:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def plot_points_bad(L, N):
...     npoints = len(L)
...     points = np.linspace(0, N, npoints)
...     plt.figure()
...     plt.plot(points, L)
...     plt.plot(points, [0]*npoints, linestyle=':')
&amp;gt;&amp;gt;&amp;gt; plot_points_bad(L, 30)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src="https://asmeurer.com/blog/riemann-bad.svg" width="608" /&gt;
&lt;p&gt;So instead of plotting $Z(1/2 + it)$, we plot $\log(|Z(1/2 + it)|)$. The
logarithm will make the zeros go to $-\infty$, but these will be easy to see.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def plot_points(L, N):
...     npoints = len(L)
...     points = np.linspace(0, N, npoints)
...     p = [mpmath.log(abs(i)) for i in L]
...     plt.figure()
...     plt.plot(points, p)
...     plt.plot(points, [0]*npoints, linestyle=':')
&amp;gt;&amp;gt;&amp;gt; plot_points(L, 30)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src="https://asmeurer.com/blog/riemann-30.svg" width="608" /&gt;
&lt;p&gt;The spikes downward are the zeros.&lt;/p&gt;
&lt;p&gt;Finally, let's check up to N=100. &lt;a href="https://oeis.org/A072080"&gt;OEIS A072080&lt;/a&gt;
gives the number of zeros of $\zeta(s)$ in upper half-plane up to $10^ni$.
According to it, we should get 29 zeros between $0$ and $100i$.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; argument_count(D_func, 100)
mpc(real='28.248036536895913', imag='-3.2332902529067346e-24')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not near an integer. This means we need to increase the precision of
the quadrature (the &lt;code&gt;maxdegree&lt;/code&gt; argument).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; argument_count(D_func, 100, maxdegree=9)
mpc(real='29.000000005970151', imag='-3.2332902529067346e-24')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the sign changes...&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; L = compute_points(Z_func, 100)
__main__:11: UserWarning: You may need to increase the precision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our guard against the precision being too low was triggered. Try raising it
(the default dps is 15).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; L = compute_points(Z_func, 100, dps=50)
&amp;gt;&amp;gt;&amp;gt; sign_changes(L)
29
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They both give 29. So we have verified the Riemann Hypothesis up to $100i$!&lt;/p&gt;
&lt;p&gt;Here is a plot of these 29 zeros.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; plot_points(L, 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src="https://asmeurer.com/blog/riemann-100.svg" width="608" /&gt;
&lt;p&gt;(remember that the spikes downward are the zeros)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;$N=100$ takes a few minutes to compute, and I imagine larger and larger values
would require increasing the precision more, slowing it down even further, so
I didn't go higher than this. But it is clear that this method works.&lt;/p&gt;
&lt;p&gt;This was just me playing around with SymPy and mpmath, but if I wanted to
actually verify the Riemann Hypothesis, I would try to find a more efficient
method of computing the above quantities. For the sake of simplicity, I used
$Z(s)$ for both the argument principle and sign changes computations, but it
would have been more efficient to use $\zeta(s)$ for the argument principle
integral, since it has a simpler formula. It would also be useful if there
were a formula with similar properties to $Z(s)$ (real on the critical line
with the same zeros as $\zeta(s)$), but that did not decay as rapidly.&lt;/p&gt;
&lt;p&gt;Furthermore, for the argument principle integral, I would like to see precise
error estimates for the integral. We saw above with $N=100$ with the default
quadrature that we got a value of 28.248, which is not close to an integer.
This tipped us off that we should increase the quadrature, which ended up
giving us the right answer, but if the original number happened to be close to
an integer, we might have been fooled. Ideally, one would like know the exact
quadrature degree needed. If you can get error estimates guaranteeing the
error for the integral will be less than 0.5, you can always round the answer
to the nearest integer. For the sign changes, you don't need to be as
rigorous, because simply seeing as many sign changes as you have zeros is
sufficient. However, one could certainly be more efficient in computing the
values along the interval, rather than just naively computing 10000 points and
raising the precision until it works, as I have done.&lt;/p&gt;
&lt;p&gt;One would also probably want to use a faster integrator than mpmath (like one
written in C), and perhaps also find a faster to evaluate expression than the
one I used for $Z(s)$. It is also possible that one could special-case the
quadrature algorithm knowing that it will be computed on $\zeta'(s)/\zeta(s)$.&lt;/p&gt;
&lt;p&gt;In this post I described the Riemann zeta function and the Riemann Hypothesis,
and showed how to computationally verify it. But I didn't really go over the
details of why the Riemann Hypothesis matters. I encourage you to watch the
videos in my &lt;a href="https://www.youtube.com/playlist?list=PLrFrByaoJbcqKjzgJvLs2-spSmzP7jolT"&gt;YouTube
playlist&lt;/a&gt;
if you want to know this. Among other things, the truth of the Riemann
Hypothesis would give a very precise bound on the distribution of prime
numbers. Also, the non-trivial zeros of $\zeta(s)$ are, in some sense, the
"spectrum" of the prime numbers, meaning they exactly encode the position of
every prime on the number line.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=122</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): Everything about SymPy&#x2019;s Column module</title>
      <pubDate>Thu, 28 Nov 2019 19:56:42 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/11/29/everything-about-sympys-column-module/</link>
      <description>&lt;p&gt;The Column class implemented in &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt; enables the
continuum mechanics module of SymPy to deal with column buckling related
calculations. The Column module can calculate the moment equation, deflection
equation, slope equation and the critical load for a column defined by a user.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Example use-case of Column class:&lt;/strong&gt;&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.column import Column
&amp;gt;&amp;gt;&amp;gt; from sympy import Symbol, symbols
&amp;gt;&amp;gt;&amp;gt; E, I, P = symbols('E, I, P', positive=True)
&amp;gt;&amp;gt;&amp;gt; c = Column(3, E, I, 78000, top="pinned", bottom="pinned")
&amp;gt;&amp;gt;&amp;gt; c.end_conditions
{'bottom': 'pinned', 'top': 'pinned'}
&amp;gt;&amp;gt;&amp;gt; c.boundary_conditions
{'deflection': [(0, 0), (3, 0)], 'slope': [(0, 0)]}
&amp;gt;&amp;gt;&amp;gt; c.moment()
78000*y(x)
&amp;gt;&amp;gt;&amp;gt; c.solve_slope_deflection()
&amp;gt;&amp;gt;&amp;gt; c.deflection()
C1*sin(20*sqrt(195)*x/(sqrt(E)*sqrt(I)))
&amp;gt;&amp;gt;&amp;gt; c.slope()
20*sqrt(195)*C1*cos(20*sqrt(195)*x/(sqrt(E)*sqrt(I)))/(sqrt(E)*sqrt(I))
&amp;gt;&amp;gt;&amp;gt; c.critical_load()
pi**2*E*I/9
&lt;/pre&gt;



&lt;h1&gt;&lt;strong&gt;The Column class&lt;/strong&gt;&lt;/h1&gt;



&lt;p&gt;The Column class is non-mutable,&lt;span id="more-122"&gt;&lt;/span&gt; which means unlike the Beam class, a user cannot change the attributes of the class once they are defined along with the object definition. Therefore to change the attribute values one will have to define a new object.&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;Reasons for creating a non-mutable class&lt;/strong&gt;&lt;/h3&gt;



&lt;ul&gt;&lt;li&gt; From a backward-compatibility perspective, it is always possible to  adopt a different plan and add mutability later but not the other way  around. &lt;/li&gt;&lt;li&gt;Most things are immutable in SymPy which is useful for caching etc. Matrix is an example where allowing mutability has lead to many problems that are now impossible to fix without breaking backwards compatibility.&lt;/li&gt;&lt;/ul&gt;



&lt;h2&gt;&lt;strong&gt;Working of the column class:&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;
The &lt;strong&gt;governing equation&lt;/strong&gt; for column buckling is:&lt;/p&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/qfv6QbVnotFKUPebBoLgBNPjNz5uhN6g2-mbfBzDTR13Cb5z4BkAM7RHGerTtvqEzMzjQFL8r44iYeIVTm0OpYX6f0QWn2rCuz1qxKNVnvM6LHnTX9mfJ9pyBzPmBaFGZPrdiy-p" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;If we determine the the &lt;strong&gt;moment equation&lt;/strong&gt; of the column ,on which the buckling load is applied, and place it in the above equation,  we might be able to get the deflection by further solving the differential equation for &lt;strong&gt;y&lt;/strong&gt;. &lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Step-1: To determine the internal moment.&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;This is simply done by assuming deflection at any arbitrary cross section at a distance&lt;strong&gt; x&lt;/strong&gt; from the bottom as &lt;strong&gt;y &lt;/strong&gt;and then multiplying this by the load &lt;strong&gt;P&lt;/strong&gt; and for eccentric load another moment of magnitude &lt;strong&gt;P*e&lt;/strong&gt; is added to the moment.&lt;/p&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-129" src="https://ishanaj.files.wordpress.com/2019/11/image-2.png?w=641" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Simple load&lt;/strong&gt; &lt;strong&gt;is given by&lt;/strong&gt;:&amp;#160;&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/mY4nhR2YWfTEITzlL8LFRGnPq2KXPcwbyAGajOWtTkMEBYtTKGya0n4r62RolTLImOGjXazs0RqAjOyAy3K94vrM4G_xZxRKV-GBdG2uULX9qap7xPsgI6ahIY4-tXbx1zYH2LNR" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Eccentric load is given by:&amp;#160;&lt;/strong&gt;&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/vIfQDO151xRZO2hcDi9pSPeyafqlYmTUBnr_zszHjiZiv07cOA6xnuu__5EslONxpPtQFY5RaUGLXefgY0AtHip6Y6LgANv3XZ1uo790QctxO-Q5qTledCkiTuKzmpaMzJ5LBt-e" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Step-2: &lt;/strong&gt;This moment can then be substituted in the governing equation and the resulting differential equation can be solved using SymPy&amp;#8217;s &lt;strong&gt;dsolve()&lt;/strong&gt; for the &lt;strong&gt;deflection y&lt;/strong&gt;.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Applying different end-conditions&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;The above steps considers a simple example of a column pinned at both of its ends. But the end-condition of the column can vary, which will cause the moment equation to to vary.&lt;/p&gt;



&lt;p&gt;Currently &lt;strong&gt;four&lt;/strong&gt; basic supports are implemented:&amp;#160; Pinned-pinned, fixed-fixed, fixed-pinned, one pinned-other free.&lt;/p&gt;



&lt;p&gt;Depending on the supports the moment due to applied load would change as:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Pinned-Pinned:&lt;/strong&gt;&amp;nbsp; no change in moment&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/1rNjrJP3SC6q80sWh9m5-EAj80_YLYSmCECNYMqGh0n24r7EAqP5D8b-joCrvjhV0pnoQeD5EWrcStUufFj8zgHGSIMkk-lrnRPfkxYIJP42RIzh6pCNxthuEP83wWDdhAAZ8I30" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter is-resized"&gt;&lt;img alt="" height="218" src="https://lh4.googleusercontent.com/ki5Fbllhkj2xCcEJiRQxPyuTDlJnQGPfjcvk2GNjnJq5tNd83--zKWRKMck4v9TRx7SINESjNxcmdsXaXh6Le1-fBp8pQLY7pVTy-H_o895Ts_813cFmjlQDfbp34i3RJ3Qvb9RR" width="217" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Fixed-fixed&lt;/strong&gt;: reaction moment M is included&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/76IEGW9i83Am9oy_YQC7xm2BVGnEw_BcgM_bQxUgnVdWY4hBpgIIbhE4bG0C8FLpNYpajyoi7F_z8g4uVLfEZOfjv3dQBQ9fvLnIFVZUJvsIaleRSUVA7B1vrQsBj5FY3Ln3H6sx" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/8jXG4tyFMgAzJOanpHqj-d_f37-OkFrntfuhulynED1JjhNT6h_UkHmcAtDyN3Rem95uYIoKuhHUkslItdgIictxZC8dS_6mA9xbW-YxcDgMtyJ-L46UExUNH8VR8octca5v7RWa" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Fixed-pinned:&lt;/strong&gt;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/zphyPG-BZaoTYFrhY1NVWVza7oBX85d-K3HIDXF02bpcG_3gMsA8zMD-T6UO1X7GX4ssJYeok9IFCILq18GZMDkztjLdA_IA_Otq-qSM30Us22gwqPjPwPnhubYPG3jwtwzq0yML" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;Here &lt;strong&gt;M&lt;/strong&gt; is the restraint moment at &lt;strong&gt;B (&lt;/strong&gt;which is fixed&lt;strong&gt;). &lt;/strong&gt;To counter this, another moment is considered by applying a horizontal force &lt;strong&gt;F&lt;/strong&gt; at point A.&lt;/p&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/2Wlvbp1qFbq2p9uf057TCNM7StusOl0J5VAFU-qMQ0BhKTDDdtvP_l-tPgSkC9vmmsAaJd3QR8sEddl_z4LsAqo5FBKEvQNVF6eEssYdex61ENPUb4qWf6nFV7OkZV1Hy5ftDCdJ" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;One pinned- other free:&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/8vG470fp-wb2CzGMHfR5_chDnr4SqLGM0pAaRXXLSiDklpxXlcCoVOAh8q4dc97ZjWF3GM5-HvPGO1RzRhevUpDxl-cM6pHhztiTxJY-P7Ft04bfciVYK-FnzYJTZr4TvNqqX_wJ" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/eoHyQWUNWNOTFDsofRof215piNvdk9OqETpA4YQWRlp904vpTx69eKRxW12NdAHGxTBNRs63oyP87cMT36DE5judlZWoVeh_7zpP7Vxq5MZ_RkUieecAZGgxSm8Hj5RpKrZIk87g" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;h2&gt; &lt;strong&gt;Solving for slope and critical load&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;Once we get the deflection equation we can solve for the slope by differentiating the deflection equation with respect to &lt;strong&gt;x&lt;/strong&gt;. This is done by SymPy&amp;#8217;s &lt;strong&gt;diff()&lt;/strong&gt; function&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
self._slope = self._deflection.diff(x)
&lt;/pre&gt;



&lt;h2&gt;&lt;strong&gt;Critical load&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;Critical load for single bow buckling condition can be easily determined by the substituting the boundary conditions in the deflection equation and solving it for &lt;strong&gt;P&lt;/strong&gt; i.e the load.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Even if the user provides the applied load, during the entire calculation, we consider the  load to be &lt;strong&gt;P&lt;/strong&gt;. Whenever the &lt;strong&gt;moment()&lt;/strong&gt;, &lt;strong&gt;slope(), deflection(),&lt;/strong&gt; &lt;strong&gt;etc&lt;/strong&gt;. methods are called the variable &lt;strong&gt;P &lt;/strong&gt;is replaced with the users value. This is done so that it is easier for us to calculate the critical load in the end.&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
defl_eqs = []
# taking last two bounndary conditions which are actually
# the initial boundary conditions.
for point, value in self._boundary_conditions['deflection'][-2:]:
    defl_eqs.append(self._deflection.subs(x, point) - value)

# C1, C2 already solved, solve for P
self._critical_load = solve(defl_eqs, P, dict=True)[0][P]
&lt;/pre&gt;



&lt;p&gt;The case of the pinned-pinned end condition is a bit tricky.  On solving the differential equation via &lt;strong&gt;dsolve()&lt;/strong&gt;, the deflection comes out to be zero. This problem has been described in &lt;a href="https://ishanaj.wordpress.com/2019/07/08/gsoc19-week-6-completing-the-column-class/#more-56"&gt;this&lt;/a&gt; blog. Its calculation is handled a bit differently in the &lt;a href="https://github.com/sympy/sympy/pull/17122/files#diff-00c8ee080a295764f42be4b0e448935dR225"&gt;code&lt;/a&gt;. Instead of directly solving it via &lt;strong&gt;dsolve()&lt;/strong&gt;, it is solved in steps, and the trivial solutions are removed. This technique not only solves for the deflection of the column, but simultaneously also calculates the critical load it can bear.&lt;/p&gt;



&lt;p&gt;Although this may be considered as a hack to the problem. I think in future it would be better if &lt;strong&gt;dsolve()&lt;/strong&gt; gets the ability to remove the trivial solutions. But this seems to be better as of now.&lt;/p&gt;



&lt;p&gt;A problem that still persists is the calculation of critical load for pinned-fixed end condition. Currently, it has been made as an XFAIL, since to resolve that either &lt;strong&gt;solve()&lt;/strong&gt; or &lt;strong&gt;solveset() &lt;/strong&gt;has to return the solution in the required form. An &lt;a href="https://github.com/sympy/sympy/issues/17162"&gt;issue &lt;/a&gt;has been raised on GitHub, regarding the same.&lt;/p&gt;



&lt;p&gt;Hope that gives a crisp idea about the functioning of SymPy&amp;#8217;s Column module.&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.com/blog/posts/quansight-labs-work-update-for-september-2019/</guid>
      <author>Aaron Meurer (asmeurer)</author>
      <title>Aaron Meurer (asmeurer): Quansight Labs Work Update for September, 2019</title>
      <pubDate>Mon, 07 Oct 2019 05:00:00 GMT</pubDate>
      <link>https://asmeurer.com/blog/posts/quansight-labs-work-update-for-september-2019/</link>
      <description>&lt;div&gt;&lt;p&gt;&lt;em&gt;This post has been cross-posted on the &lt;a href="https://labs.quansight.org/blog/2019/10/quansight-labs-work-update-for-september-2019/"&gt;Quansight Labs
Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As of November, 2018, I have been working at
&lt;a href="https://www.quansight.com/"&gt;Quansight&lt;/a&gt;. Quansight is a new startup founded by
the same people who started Anaconda, which aims to connect companies and open
source communities, and offers consulting, training, support and mentoring
services. I work under the heading of &lt;a href="https://www.quansight.com/labs"&gt;Quansight
Labs&lt;/a&gt;. Quansight Labs is a public-benefit
division of Quansight. It provides a home for a "PyData Core Team" which
consists of developers, community managers, designers, and documentation
writers who build open-source technology and grow open-source communities
around all aspects of the AI and Data Science workflow.&lt;/p&gt;
&lt;p&gt;My work at Quansight is split between doing open source consulting for various
companies, and working on SymPy.
&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, for those who do not know, is a
symbolic mathematics library written in pure Python. I am the lead maintainer
of SymPy.&lt;/p&gt;
&lt;p&gt;In this post, I will detail some of the open source work that I have done
recently, both as part of my open source consulting, and as part of my work on
SymPy for Quansight Labs.&lt;/p&gt;
&lt;h3&gt;Bounds Checking in Numba&lt;/h3&gt;
&lt;p&gt;As part of work on a client project, I have been working on contributing code
to the &lt;a href="https://numba.pydata.org"&gt;numba&lt;/a&gt; project. Numba is a just-in-time
compiler for Python. It lets you write native Python code and with the use of
a simple &lt;code&gt;@jit&lt;/code&gt; decorator, the code will be automatically sped up using LLVM.
This can result in code that is up to 1000x faster in some cases:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
In [1]: import numba

In [2]: import numpy

In [3]: def test(x):
   ...:     A = 0
   ...:     for i in range(len(x)):
   ...:         A += i*x[i]
   ...:     return A
   ...:

In [4]: @numba.njit
   ...: def test_jit(x):
   ...:     A = 0
   ...:     for i in range(len(x)):
   ...:         A += i*x[i]
   ...:     return A
   ...:

In [5]: x = numpy.arange(1000)

In [6]: %timeit test(x)
249 &amp;#181;s &amp;#177; 5.77 &amp;#181;s per loop (mean &amp;#177; std. dev. of 7 runs, 1000 loops each)

In [7]: %timeit test_jit(x)
336 ns &amp;#177; 0.638 ns per loop (mean &amp;#177; std. dev. of 7 runs, 1000000 loops each)

In [8]: 249/.336
Out[8]: 741.0714285714286
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Numba only works for a subset of Python code, and primarily targets code that
uses NumPy arrays.&lt;/p&gt;
&lt;p&gt;Numba, with the help of LLVM, achieves this level of performance through many
optimizations. One thing that it does to improve performance is to remove all
bounds checking from array indexing. This means that if an array index is out
of bounds, instead of receiving an &lt;code&gt;IndexError&lt;/code&gt;, you will get garbage, or
possibly a segmentation fault.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; from numba import njit
&amp;gt;&amp;gt;&amp;gt; def outtabounds(x):
...     A = 0
...     for i in range(1000):
...         A += x[i]
...     return A
&amp;gt;&amp;gt;&amp;gt; x = np.arange(100)
&amp;gt;&amp;gt;&amp;gt; outtabounds(x) # pure Python/NumPy behavior
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
  File "&amp;lt;stdin&amp;gt;", line 4, in outtabounds
IndexError: index 100 is out of bounds for axis 0 with size 100
&amp;gt;&amp;gt;&amp;gt; njit(outtabounds)(x) # the default numba behavior
-8557904790533229732
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In numba pull request &lt;a href="https://github.com/numba/numba/pull/4432"&gt;#4432&lt;/a&gt;, I am
working on adding a flag to &lt;code&gt;@njit&lt;/code&gt; that will enable bounds checks for array
indexing. This will remain disabled by default for performance purposes. But
you will be able to enable it by passing &lt;code&gt;boundscheck=True&lt;/code&gt; to &lt;code&gt;@njit&lt;/code&gt;, or by
setting the &lt;code&gt;NUMBA_BOUNDSCHECK=1&lt;/code&gt; environment variable. This will make it
easier to detect out of bounds issues like the one above. It will work like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-pycon"&gt;&amp;gt;&amp;gt;&amp;gt; @njit(boundscheck=True)
... def outtabounds(x):
...     A = 0
...     for i in range(1000):
...         A += x[i]
...     return A
&amp;gt;&amp;gt;&amp;gt; x = np.arange(100)
&amp;gt;&amp;gt;&amp;gt; outtabounds(x) # numba behavior in my pull request #4432
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
IndexError: index is out of bounds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pull request is still in progress, and many things such as the quality of
the error message reporting will need to be improved. This should make
debugging issues easier for people who write numba code once it is merged.&lt;/p&gt;
&lt;h3&gt;removestar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.asmeurer.com/removestar/"&gt;removestar&lt;/a&gt; is a new tool I wrote to
automatically replace &lt;code&gt;import *&lt;/code&gt; in Python modules with explicit imports.&lt;/p&gt;
&lt;p&gt;For those who don't know, Python's &lt;code&gt;import&lt;/code&gt; statement supports so-called
"wildcard" or "star" imports, like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;from sympy import *
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will import every public name from the &lt;code&gt;sympy&lt;/code&gt; module into the current
namespace. This is often useful because it saves on typing every name that is
used in the import line. This is especially useful when working interactively,
where you just want to import every name and minimize typing.&lt;/p&gt;
&lt;p&gt;However, doing &lt;code&gt;from module import *&lt;/code&gt; is generally frowned upon in Python. It is
considered acceptable when working interactively at a &lt;code&gt;python&lt;/code&gt; prompt, or in
&lt;code&gt;__init__.py&lt;/code&gt; files (removestar skips &lt;code&gt;__init__.py&lt;/code&gt; files by default).&lt;/p&gt;
&lt;p&gt;Some reasons why &lt;code&gt;import *&lt;/code&gt; is bad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It hides which names are actually imported.&lt;/li&gt;
&lt;li&gt;It is difficult both for human readers and static analyzers such as
pyflakes to tell where a given name comes from when &lt;code&gt;import *&lt;/code&gt; is used. For
example, pyflakes cannot detect unused names (for instance, from typos) in
the presence of &lt;code&gt;import *&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there are multiple &lt;code&gt;import *&lt;/code&gt; statements, it may not be clear which names
come from which module. In some cases, both modules may have a given name,
but only the second import will end up being used. This can break people's
intuition that the order of imports in a Python file generally does not
matter.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import *&lt;/code&gt; often imports more names than you would expect. Unless the module
you import defines &lt;code&gt;__all__&lt;/code&gt; or carefully &lt;code&gt;del&lt;/code&gt;s unused names at the module
level, &lt;code&gt;import *&lt;/code&gt; will import every public (doesn't start with an
underscore) name defined in the module file. This can often include things
like standard library imports or loop variables defined at the top-level of
the file. For imports from modules (from &lt;code&gt;__init__.py&lt;/code&gt;), &lt;code&gt;from module import *&lt;/code&gt; will include every submodule defined in that module. Using &lt;code&gt;__all__&lt;/code&gt; in
modules and &lt;code&gt;__init__.py&lt;/code&gt; files is also good practice, as these things are
also often confusing even for interactive use where &lt;code&gt;import *&lt;/code&gt; is
acceptable.&lt;/li&gt;
&lt;li&gt;In Python 3, &lt;code&gt;import *&lt;/code&gt; is syntactically not allowed inside of a function
definition.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some official Python references stating not to use &lt;code&gt;import *&lt;/code&gt; in
files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/faq/programming.html?highlight=faq#what-are-the-best-practices-for-using-import-in-a-module"&gt;The official Python
FAQ&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, don&amp;#8217;t use &lt;code&gt;from modulename import *&lt;/code&gt;. Doing so clutters the
importer&amp;#8217;s namespace, and makes it much harder for linters to detect
undefined names.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/#imports"&gt;PEP 8&lt;/a&gt; (the official
Python style guide):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wildcard imports (&lt;code&gt;from &amp;lt;module&amp;gt; import *&lt;/code&gt;) should be avoided, as they
make it unclear which names are present in the namespace, confusing both
readers and many automated tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, if you come across a file in the wild that uses &lt;code&gt;import *&lt;/code&gt;, it
can be hard to fix it, because you need to find every name in the file that is
imported from the &lt;code&gt;*&lt;/code&gt; and manually add an import for it. Removestar makes this
easy by finding which names come from &lt;code&gt;*&lt;/code&gt; imports and replacing the import
lines in the file automatically.&lt;/p&gt;
&lt;p&gt;As an example, suppose you have a module &lt;code&gt;mymod&lt;/code&gt; like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mymod/
  | __init__.py
  | a.py
  | b.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;# mymod/a.py
from .b import *

def func(x):
    return x + y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;# mymod/b.py
x = 1
y = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then &lt;code&gt;removestar&lt;/code&gt; works like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ removestar -i mymod/
$ cat mymod/a.py
# mymod/a.py
from .b import y

def func(x):
    return x + y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; flag causes it to edit &lt;code&gt;a.py&lt;/code&gt; in-place. Without it, it would just
print a diff to the terminal.&lt;/p&gt;
&lt;p&gt;For implicit star imports and explicit star imports from the same module,
&lt;code&gt;removestar&lt;/code&gt; works statically, making use of
&lt;a href="https://github.com/PyCQA/pyflakes"&gt;pyflakes&lt;/a&gt;. This means none of the code is
actually executed. For external imports, it is not possible to work statically
as external imports may include C extension modules, so in that case, it
imports the names dynamically.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;removestar&lt;/code&gt; can be installed with pip or conda:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install removestar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you use conda&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install -c conda-forge removestar
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;sphinx-math-dollar&lt;/h3&gt;
&lt;p&gt;In SymPy, we make heavy use of LaTeX math in our documentation. For example,
in our &lt;a href="https://docs.sympy.org/dev/modules/functions/special.html#sympy.functions.special.hyper.hyper"&gt;special functions
documentation&lt;/a&gt;,
most special functions are defined using a LaTeX formula, like &lt;img alt="The docs for besselj" src="https://asmeurer.com/blog/besselj_docs.png" /&gt;&lt;/p&gt;
&lt;p&gt;(from &lt;a href="https://docs.sympy.org/dev/modules/functions/special.html#sympy.functions.special.bessel.besselj"&gt;https://docs.sympy.org/dev/modules/functions/special.html#sympy.functions.special.bessel.besselj&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;However, the source for this math in the docstring of the function uses RST
syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;class besselj(BesselBase):
    """
    Bessel function of the first kind.

    The Bessel `J` function of order `\nu` is defined to be the function
    satisfying Bessel's differential equation

    .. math ::
        z^2 \frac{\mathrm{d}^2 w}{\mathrm{d}z^2}
        + z \frac{\mathrm{d}w}{\mathrm{d}z} + (z^2 - \nu^2) w = 0,

    with Laurent expansion

    .. math ::
        J_\nu(z) = z^\nu \left(\frac{1}{\Gamma(\nu + 1) 2^\nu} + O(z^2) \right),

    if :math:`\nu` is not a negative integer. If :math:`\nu=-n \in \mathbb{Z}_{&amp;lt;0}`
    *is* a negative integer, then the definition is

    .. math ::
        J_{-n}(z) = (-1)^n J_n(z).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, in SymPy's documentation we have configured it so that text
between `single backticks` is rendered as math. This was originally done for
convenience, as the alternative way is to write &lt;code&gt;:math:`\nu`&lt;/code&gt; every
time you want to use inline math. But this has lead to many people being
confused, as they are used to Markdown where `single backticks` produce
&lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A better way to write this would be if we could delimit math with dollar
signs, like &lt;code&gt;$\nu$&lt;/code&gt;. This is how things are done in LaTeX documents, as well
as in things like the Jupyter notebook.&lt;/p&gt;
&lt;p&gt;With the new &lt;a href="https://www.sympy.org/sphinx-math-dollar/"&gt;sphinx-math-dollar&lt;/a&gt;
Sphinx extension, this is now possible. Writing &lt;code&gt;$\nu$&lt;/code&gt; produces $\nu$, and
the above docstring can now be written as&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;class besselj(BesselBase):
    """
    Bessel function of the first kind.

    The Bessel $J$ function of order $\nu$ is defined to be the function
    satisfying Bessel's differential equation

    .. math ::
        z^2 \frac{\mathrm{d}^2 w}{\mathrm{d}z^2}
        + z \frac{\mathrm{d}w}{\mathrm{d}z} + (z^2 - \nu^2) w = 0,

    with Laurent expansion

    .. math ::
        J_\nu(z) = z^\nu \left(\frac{1}{\Gamma(\nu + 1) 2^\nu} + O(z^2) \right),

    if $\nu$ is not a negative integer. If $\nu=-n \in \mathbb{Z}_{&amp;lt;0}$
    *is* a negative integer, then the definition is

    .. math ::
        J_{-n}(z) = (-1)^n J_n(z).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also plan to add support for &lt;code&gt;$$double dollars$$&lt;/code&gt; for display math so that &lt;code&gt;.. math ::&lt;/code&gt; is no longer needed either .&lt;/p&gt;
&lt;p&gt;For end users, the documentation on &lt;a href="https://docs.sympy.org"&gt;docs.sympy.org&lt;/a&gt;
will continue to render exactly the same, but for developers, it is much
easier to read and write.&lt;/p&gt;
&lt;p&gt;This extension can be easily used in any Sphinx project. Simply install it
with pip or conda:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install sphinx-math-dollar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install -c conda-forge sphinx-math-dollar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then enable it in your &lt;code&gt;conf.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;extensions = ['sphinx_math_dollar', 'sphinx.ext.mathjax']
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Google Season of Docs&lt;/h3&gt;
&lt;p&gt;The above work on sphinx-math-dollar is part of work I have been doing to
improve the tooling around SymPy's documentation. This has been to assist our
technical writer Lauren Glattly, who is working with SymPy for the next three
months as part of the new &lt;a href="https://developers.google.com/season-of-docs/"&gt;Google Season of
Docs&lt;/a&gt; program. Lauren's project
is to improve the consistency of our docstrings in SymPy. She has already
identified many key ways our docstring documentation can be improved, and is
currently working on a style guide for writing docstrings. Some of the issues
that Lauren has identified require improved tooling around the way the HTML
documentation is built to fix. So some other SymPy developers and I have been
working on improving this, so that she can focus on the technical writing
aspects of our documentation.&lt;/p&gt;
&lt;p&gt;Lauren has created a draft style guide for documentation at
&lt;a href="https://github.com/sympy/sympy/wiki/SymPy-Documentation-Style-Guide"&gt;https://github.com/sympy/sympy/wiki/SymPy-Documentation-Style-Guide&lt;/a&gt;. Please
take a moment to look at it and if you have any feedback on it, comment below
or write to the SymPy mailing list.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
