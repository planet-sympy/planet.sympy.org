<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=780</guid>
      <title>GSoC Week 10</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Mon, 01 Aug 2016 07:31:06 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/08/01/gsoc-week-10/</link>
      <description>&lt;p&gt;Started off this week by continuing my work on &lt;a href="https://github.com/sympy/sympy/pull/11422"&gt;#11422&lt;/a&gt;. I added support for singular initial conditions in multiplication and made some amendments in addition too. They now can return a Holonomic function with singular initial condition. The input functions can have singular initial condition both or one of them can have singular one and the other one with ordinary initial condition.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
# one function have singular initial condition and the other have ordinary.
In [4]: expr_to_holonomic(x) + expr_to_holonomic(sqrt(x))
Out[4]: HolonomicFunction((1/2) + (-x/2)Dx + (x**2)Dx**2, x), {1/2: [1], 1: [1]}

In [5]: _4.to_expr()
Out[5]: &amp;#8730;x + x

In [6]: expr_to_holonomic(x) * expr_to_holonomic(sqrt(x))
Out[6]: HolonomicFunction((-3/2) + (x)Dx, x), {3/2: [1]}

In [7]: _6.to_expr()
Out[7]:
 3/2
x

# both have singular initial conditions.
In [9]: expr_to_holonomic((x)**(S(1)/3)) + expr_to_holonomic(sqrt(x))
Out[9]: HolonomicFunction((1/6) + (x/6)Dx + (x**2)Dx**2, x), {1/3: [1], 1/2: [1]}

In [10]: _9.to_expr()
Out[10]:
3 ___
&amp;#9586;&amp;#9585; x  + &amp;#8730;x
In [11]: expr_to_holonomic((x)**(S(1)/3))*expr_to_holonomic(sqrt(x))
Out[11]: HolonomicFunction((-5/6) + (x)Dx, x), {5/6: [1]}

In [12]: _11.to_expr()
Out[12]:
 5/6
x
&lt;/pre&gt;
&lt;p&gt;I found some problems in coding because of storing these initial conditions in two different attributes. So I merged them to a single attribute and instead added methods to check which one is stored and refactored the existing code using it.&lt;/p&gt;
&lt;p&gt;I opened a new PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11451"&gt;#11451&lt;/a&gt;&amp;#160;majorly focused on adding singular initial conditions to the result of &lt;code&gt;.expr_to_holonomic()&lt;/code&gt;&amp;#160;when necessary. At first I added it in converting polynomials. Here are some examples:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [14]: expr_to_holonomic(3*x**3+4*x**2)
Out[14]: HolonomicFunction((-9*x - 8) + (3*x**2 + 4*x)Dx, x), {2: [4, 3]}

In [15]: _14.to_expr()
Out[15]:
 2
x &amp;#8901;(3&amp;#8901;x + 4)

In [16]: expr_to_holonomic(x)
Out[16]: HolonomicFunction((-1) + (x)Dx, x), {1: [1]}

In [17]: _16.to_expr()
Out[17]: x
&lt;/pre&gt;
&lt;p&gt;I also a found a bug in &lt;code&gt;.to_hyper()&lt;/code&gt;&amp;#160;when the recurrence relation has order &lt;code&gt;0&lt;/code&gt;. Added its fix too. Earlier the output also considered negative exponents which weren&amp;#8217;t needed.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
# previously
In [18]: expr_to_holonomic(y*x, x).integrate(x).to_expr()
Out[18]:
 2
x &amp;#8901;y
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + C&amp;#8321;
 2
# after fix
In [19]: expr_to_holonomic(y*x, x).integrate(x).to_expr()
Out[19]:
 2
x &amp;#8901;y
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
 2  

&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What Next:&lt;/p&gt;
&lt;p&gt;&lt;/strong&gt;I hope to add singular initial conditions to more types of functions in &lt;code&gt;.expr_to_holonomic()&lt;/code&gt;.&lt;br /&gt;
&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/780/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/780/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=780&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-10</guid>
      <title>Coding Period Week 10</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Sat, 30 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-10/</link>
      <description>&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;eliminate() continue:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;issue &lt;a href="https://github.com/sympy/sympy/issues/2720"&gt;#2720&lt;/a&gt; : We need some kind of eliminate function, like &lt;a href="http://reference.wolfram.com/mathematica/ref/Eliminate.html"&gt;http://reference.wolfram.com/mathematica/ref/Eliminate.html&lt;/a&gt;. See also &lt;a href="http://stackoverflow.com/q/20826969/161801"&gt;http://stackoverflow.com/q/20826969/161801 &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am trying to use &lt;code class="highlighter-rouge"&gt;subs&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt; to get answer. May be one can use &lt;code class="highlighter-rouge"&gt;replace&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;xreplace&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;match&lt;/code&gt; to eliminate some kind of same sub expression.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There can be ans in &lt;code class="highlighter-rouge"&gt;Imageset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Finiteset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Intersection&lt;/code&gt; when we use &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt;. So there should be a technique to handle it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Still need some good idea and technique. WIP.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Output of solveset should be of one type:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Amit discussed about it. Solution we see in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; should be in one type of set. Right now we may have solution in &lt;code class="highlighter-rouge"&gt;Imageset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Finiteset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Intersection&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;. So there would be problem for user to handle these many solution type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think there should be something that separate &lt;code class="highlighter-rouge"&gt;Complements&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Intersections&lt;/code&gt;,&lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; and main solution in &lt;code class="highlighter-rouge"&gt;Finiteset&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;E.g. if solveset solution is &lt;code class="highlighter-rouge"&gt;Intersection(Complement(FiniteSet(x), {y}), {z})&lt;/code&gt; then
soln : &lt;code class="highlighter-rouge"&gt;FiniteSet(x)&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;x != {y}&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;intersect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;z&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue Simplified Trig soln&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11188"&gt;#11188&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;According to the &lt;a href="https://github.com/sympy/sympy/pull/11188#issuecomment-234789616"&gt;Harsh comments/review&lt;/a&gt; I modified the PR. Now it seems it is
returning more simplified solution( &lt;a href="https://github.com/sympy/sympy/pull/11188/commits/beaac312f03819bd7221887eb2b4cbe5d49bed5e#diff-85baa04bbf4e1dfd9128782738e45424R1141"&gt;one case is here&lt;/a&gt;) .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To understand the changes I did in the &lt;code class="highlighter-rouge"&gt;_solve_trig&lt;/code&gt; method, one should check &lt;a href="https://gist.github.com/Shekharrajak/17fdcd2320f572fc9fc8674823137e20"&gt;this gist&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To see the advantage of imageset union, One good example is in &lt;a href="https://gist.github.com/Shekharrajak/a5efc840d9a7d3062289f2d9c5f20b16"&gt;this gist&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=985</guid>
      <title>GSoC Week 10</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 29 Jul 2016 11:20:44 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/29/gsoc-week-10/</link>
      <description>&lt;p&gt;Hello, guys. Welcome back.&amp;#160;It&amp;#8217;s been ten weeks into the coding period. I had a meeting with Jason on 25th of this month. We discussed many new changed on the API that I had implemented before this week. Now, the beam bending module is almost ready to solve beam bending problems.&lt;/p&gt;
&lt;p&gt;Let us see how to solve a beam bending problem using this module.&lt;/p&gt;
&lt;p&gt;Problem Statement :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Loaded beam.svg" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Loaded_beam.svg/650px-Loaded_beam.svg.png" /&gt;&lt;/p&gt;
&lt;p&gt;The deflection is restricted at the end of the beam.&lt;/p&gt;
&lt;p&gt;Solution :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam

&amp;gt;&amp;gt;&amp;gt; from sympy import Symbol, Piecewise
 
&amp;gt;&amp;gt;&amp;gt; x = Symbol('x')

&amp;gt;&amp;gt;&amp;gt; E = Symbol('E')

&amp;gt;&amp;gt;&amp;gt; I = Symbol('I')

&amp;gt;&amp;gt;&amp;gt; b = Beam(4, E, I)

&amp;gt;&amp;gt;&amp;gt; b.apply_load(value=-9, start=4, order=-1)

&amp;gt;&amp;gt;&amp;gt; b.apply_load(value=-3, start=0, order=-1)

&amp;gt;&amp;gt;&amp;gt; b.apply_load(order=0, start=2, value=6)

&amp;gt;&amp;gt;&amp;gt; b.bc_deflection = [(4, 0)]

&amp;gt;&amp;gt;&amp;gt; b.boundary_conditions
 {'deflection': [(4, 0)], 'moment': [], 'slope': []}

&amp;gt;&amp;gt;&amp;gt; b.load
 -3*SingularityFunction(x, 0, -1) + 6*SingularityFunction(x, 2, 0) - 9*SingularityFunction(x, 4, -1)

&amp;gt;&amp;gt;&amp;gt; b.shear_force()
 -3*SingularityFunction(x, 0, 0) + 6*SingularityFunction(x, 2, 1) - 9*SingularityFunction(x, 4, 0)

&amp;gt;&amp;gt;&amp;gt; b.bending_moment()
 3*SingularityFunction(x, 0, 1) - 3*SingularityFunction(x, 2, 2) + 9*SingularityFunction(x, 4, 1)

&amp;gt;&amp;gt;&amp;gt; b.slope()
 (3*SingularityFunction(x, 0, 2)/2 - SingularityFunction(x, 2, 3) + 9*SingularityFunction(x, 4, 2)/2 - 7)/(E*I)

&amp;gt;&amp;gt;&amp;gt; b.deflection()
 (-7*x + SingularityFunction(x, 0, 3)/2 - SingularityFunction(x, 2, 4)/4 + 3*SingularityFunction(x, 4, 3)/2)/(E*I)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the user wants to represent the deflection in the piecewise form, then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b.deflection().rewrite(Piecewise)
 (-7*x + Piecewise((x**3, x &amp;gt; 0), (0, True))/2
 + 3*Piecewise(((x - 4)**3, x - 4 &amp;gt; 0), (0, True))/2
 - Piecewise(((x - 2)**4, x - 2 &amp;gt; 0), (0, True))/4)/(E*I)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next week&amp;#160;&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Add the end argument in the apply_load method.&lt;/li&gt;
&lt;li&gt;Add Sphinx documentations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/985/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/985/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=985&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/07/29/GSoC-week-11.html</guid>
      <title>GSoC Week 11</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 29 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/07/29/GSoC-week-11.html</link>
      <description>&lt;p&gt;Somehow I think I was off by a week. I think last week&amp;#8217;s blog post covers week
9 and 10 and this week&amp;#8217;s covers week 11. This week I created a full draft for
all components of the &lt;code class="highlighter-rouge"&gt;SymbolicSystem&lt;/code&gt; class that will take the place of a
equations of motion generator &amp;#8220;base class&amp;#8221; that was discussed in my project
proposal. I began by creating all of the docstrings for the class followed by
the test code. With the documentation and test code written it was a simple
matter to finish off the code for the class itself. Lastly I added
documentation to two places in sympy, one place contains the autogenerated
documentation from the docstrings and the other place I adapted an example from
pydy to show how to use the new class.&lt;/p&gt;

&lt;p&gt;After working on &lt;code class="highlighter-rouge"&gt;SymbolicSystem&lt;/code&gt; I decided to try to finish off an old PR of
mine regarding the init_printing code that Jason and I had discussed at Scipy.
The idea was to build separate dictionaries to pass to the different printers
in ipython based on the parameters that the specific printers take. The idea
was to find this information using inspect.getargs(). The problem arose when
trying to implement this solution because each separate printer has an expr
argument and a **settings argument and the different possible paramters are
processed internally by the printer. This means that there would not be an
elegant way to build dictionaries for each printer.&lt;/p&gt;

&lt;p&gt;The next thing I worked on this week was looking into Jain&amp;#8217;s version of the
order(N) method as suggested last week. When I started looking over his book,
however, I found that uses a rather different set of notion than Featherstone
and had some additional terms. I have decided to move forward with
Featherstone&amp;#8217;s method due to the summer coming to an end and I am already
familiar with his version of the method. To that end I reread the first part of
chapter 7 in Featherstone&amp;#8217;s book where he discusses the articulated body
method.&lt;/p&gt;

&lt;p&gt;I reviewed two PR&amp;#8217;s this week. This work was rather quick as they were simply
documentation additions. I verified the method docstrings matched what the
mehtod actually does and that the modual docstring included the different
functions present in the file. Determining that they were correct I gave the +1
to merge and they have both since been merged.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;The plan for next week is to focus entirely on the order(N) articulated body
method of forming the equations of motion. I plan on writing the three passes
for the method as if I have all of the information and methods I need in order
to make it work. I expect this to be the best way to determine what additional
code I will need in addition to finding my weak points in how well I understand
the method. Once I have a skeleton of the of how the algorithm is supposed to
work I will stop working directly on the algorithm itself and start working on
the peripheral code such as the joints and body code or spatial vector
processing methods.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Open) [WIP] Added system.py to physics/mechanics &lt;a href="https://github.com/sympy/sympy/pull/11431"&gt;PR
  #11431&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Added docstrings to delta and mid property methods &lt;a href="https://github.com/sympy/sympy/pull/11432"&gt;PR
  #11432&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Added top-level docstring for singularities.py &lt;a href="https://github.com/sympy/sympy/pull/11440"&gt;PR
  #11440&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Ninth-Week</guid>
      <title>GSoC Ninth Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Thu, 28 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Ninth-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Previous week I had implemented the &lt;strong&gt;Shoup&amp;#8217;s Algorithm&lt;/strong&gt; in &lt;a href="https://github.com/symengine/symengine/pull/1045"&gt;this&lt;/a&gt; PR. During the review we came to realise that it is better to use &lt;code class="highlighter-rouge"&gt;unsigned int&lt;/code&gt; instead of &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt; because we didn&amp;#8217;t need big numbers. 
&lt;br /&gt;&lt;br /&gt;
Working on the same PR, I found a bug in &lt;code class="highlighter-rouge"&gt;negate&lt;/code&gt; and similar function where we were doing:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;for (auto &amp;amp;a : dict_) {
  a *= -1;
  a += modulo_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here: if the &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; is &lt;code class="highlighter-rouge"&gt;[0, 0, 10]&lt;/code&gt;, it will negate to &lt;code class="highlighter-rouge"&gt;[11, 11, 1]&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;GF(11)&lt;/code&gt;. So, it was needed to add a check when the value is &lt;code class="highlighter-rouge"&gt;0&lt;/code&gt;. So, the method was changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;for (auto &amp;amp;a : dict_) {
  a *= -1;
  if (a != 0_z)
    a += modulo_;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Along with it I was working on the &lt;code class="highlighter-rouge"&gt;gf_factor&lt;/code&gt; &lt;a href="https://github.com/symengine/symengine/pull/1036"&gt;PR&lt;/a&gt; and it eventually got merged. It introduced &lt;strong&gt;Zassenhaus&amp;#8217;s algorithm&lt;/strong&gt; and &lt;code class="highlighter-rouge"&gt;gf_factor()&lt;/code&gt; function. In coming days, we will have to change &lt;code class="highlighter-rouge"&gt;gf_factor&lt;/code&gt; to switch between &lt;code class="highlighter-rouge"&gt;gf_zassenhaus&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;gf_shoup&lt;/code&gt; according to the degree of polynomial.
&lt;br /&gt;&lt;br /&gt;
We made one more design change, we changed the factor container from &lt;code class="highlighter-rouge"&gt;std::pair&amp;lt;GaloisFieldDict, integer_class&amp;gt;&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;std::pair&amp;lt;GaloisFieldDict, unsigned&amp;gt;&lt;/code&gt; because we didn&amp;#8217;t need large numbers as power.
&lt;br /&gt;&lt;br /&gt;
Then I started working on change of base class of &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; class from &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;UIntPolyBase&lt;/code&gt;, this needed implementation of &lt;code class="highlighter-rouge"&gt;eval&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;multi_eval&lt;/code&gt; method, then I implemented the iterator for &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; class and the &lt;code class="highlighter-rouge"&gt;pow&lt;/code&gt; method. The &lt;a href="https://github.com/symengine/symengine/pull/1047/files"&gt;PR&lt;/a&gt; is under review.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=663</guid>
      <title>GSoC Week 8 and 9</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sun, 24 Jul 2016 18:28:08 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/07/24/gsoc-week-8-and-9/</link>
      <description>&lt;p&gt;I couldn&amp;#8217;t write a blog post last week so including progress of week 8 and 9 both here.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Week 8&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;I continued working on the PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11360"&gt;#11360&lt;/a&gt;. We added functionality to store a different type of initial condition for regular singular points other than the usual &lt;code&gt;[y(0), y'(0), ...]&lt;/code&gt;. The exact format is described &lt;a href="https://github.com/sympy/sympy/blob/master/sympy/holonomic/holonomic.py#L354"&gt;here&lt;/a&gt;&amp;#160;in master, though it is changed to a more elegant form in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11422"&gt;#11422&lt;/a&gt;.&amp;#160;This type of initial condition provides more information at regular singular points and is helpful in converting to expressions. Examples on how to use it:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [22]: expr_to_holonomic(sin(x)/x**2, singular_ics={-1: [1, 0, -1]}).to_expr()
Out[22]:
sin(x)
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
   2
  x
&lt;/pre&gt;
&lt;p&gt;I also added method to compute this type of initial condition for algebraic functions of the form &lt;code&gt;P^r&lt;/code&gt;, for some Polynomial &lt;code&gt;P&lt;/code&gt;&amp;#160;and a Rational Number &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [25]: expr_to_holonomic(sqrt(x**2+x))
Out[25]: HolonomicFunction((-x - 1/2) + (x**2 + x)Dx, x), {1/2: [1]}

In [26]: _25.to_expr()
Out[26]:
     _______
&amp;#8730;x&amp;#8901;&amp;#9586;&amp;#9585; x + 1
&lt;/pre&gt;
&lt;p&gt;After that I made some changes in `to_meijerg()` to return the polynomial itself if the `meijerg` function represents a polynomial instead of raising `NotImplementedError`.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [40]: expr_to_holonomic(4*x**3 + 2*x**2, lenics=3).to_meijerg().expand()
Out[40]:
   3      2
4&amp;#8901;x  + 2&amp;#8901;x
&lt;/pre&gt;
&lt;p&gt;I also added code to return the general solution in `_frobenius()` if none of the roots of indicial equation differ by an integer.&lt;/p&gt;
&lt;h1&gt;Week 9&lt;/h1&gt;
&lt;p&gt;I wasn&amp;#8217;t able to do much this week because my college started. I travelled back and had some college related stuff to do.&lt;/p&gt;
&lt;p&gt;I opened &lt;a href="https://github.com/sympy/sympy/pull/11422"&gt;#11422&lt;/a&gt;&amp;#160;and&amp;#160;first added a basic method to determine the domain for polynomial coefficients in the differential equation.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [77]: expr_to_holonomic(sqrt(y*x+z), x=x, lenics=2).to_expr()
Out[77]:
  _________
&amp;#9586;&amp;#9585; x&amp;#8901;y + z 

In [78]: expr_to_holonomic(1.1329138213*x)
Out[78]: HolonomicFunction((-1.1329138213) + (1.1329138213*x)Dx, x), f(0) = 0
&lt;/pre&gt;
&lt;p&gt;Then I added support for the new type of initial condition on regular singular points in &lt;code&gt;.integrate()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [83]: expr_to_holonomic(sin(x)/x**3, singular_ics={-2: [1, 0, -1]}).integrate(x).to_expr()
Out[83]:
 &amp;#9115; 2                          &amp;#9118;
-&amp;#9117;x &amp;#8901;Si(x) + x&amp;#8901;cos(x) + sin(x)&amp;#9120;
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
                 2
              2&amp;#8901;x               

&lt;/pre&gt;
&lt;p&gt;Also added support for the same in addition.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [6]: expr_to_holonomic(sqrt(x)) + expr_to_holonomic(sqrt(2*x))
Out[6]: HolonomicFunction((-1/2) + (x)Dx, x), {1/2: [1 + sqrt(2)]}

In [7]: _6.to_expr()
Out[7]: &amp;#8730;x&amp;#8901;(1 + &amp;#8730;2)
&lt;/pre&gt;
&lt;p&gt;I plan to continue my work on this PR and add more support for this initial condition.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/663/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/663/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=663&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=416</guid>
      <title>GSoC Week 9 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sun, 24 Jul 2016 18:26:27 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/07/24/gsoc-week-9-progress/</link>
      <description>&lt;p&gt;In the &lt;a href="https://rajithsays.wordpress.com/2016/07/16/gsoc-week-8-progress/"&gt;last blog post&lt;/a&gt; I reported that lambdify function was fully wrapped. Yes, that&amp;#8217;s what I thought at the time! But it did indeed dragged on quite a bit, requiring many changes, which were very educative for me in terms of how Ruby looks at user experience. Several changes were done, including structural changes on calling lambdify, and for supporting older Ruby versions. The really interesting and long discussions on this can be viewed in the &lt;a href="https://github.com/symengine/symengine.rb/pull/61" target="_blank"&gt;PR 61&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apart from that, simultaneously I started reading and exchanging ideas on exception handling. It was agreed that in the C wrappers, an error code to be returned, which can be accessed from the Ruby wrapper, which in turn can raise a Ruby exception. The preliminary model can be seen in &lt;a href="https://github.com/symengine/symengine/pull/1044" target="_blank"&gt;PR 1044&lt;/a&gt; in SymEngine and &lt;a href="https://github.com/symengine/symengine.rb/pull/64" target="_blank"&gt;PR 64&lt;/a&gt; in SymEngine Ruby wrapper.&lt;/p&gt;
&lt;p&gt;Right now any exception is caught and sent to the Ruby Wrapper with an error code of -1, which raises a generic Runtime Error in Ruby. Although not very informative, this is helpful in prevention of crashing the Ruby runtime.&lt;/p&gt;
&lt;p&gt;To illustrate, when the following code (a division by zero) is run before and after is shown.&lt;/p&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;pre&gt;irb(main):001:0&amp;gt; require 'symengine'
=&amp;gt; true
irb(main):002:0&amp;gt; x = SymEngine(1)
=&amp;gt; #&amp;lt;SymEngine::Integer(1)&amp;gt;
irb(main):003:0&amp;gt; y = SymEngine(0)
=&amp;gt; #&amp;lt;SymEngine::Integer(0)&amp;gt;
irb(main):004:0&amp;gt; x/y
terminate called after throwing an instance of 'Teuchos::NullReferenceError'
&amp;#160; what():&amp;#160; /home/rajith/Development/symengine/symengine/utilities/teuchos/Teuchos_RCPNode.cpp:720:

Throw number = 1

Throw test that evaluated to true: true

Teuchos::RCP&amp;lt;SymEngine::Basic const&amp;gt; : You can not call operator-&amp;gt;() or operator*() if getRawPtr()==0!

Abort caught. Printing stacktrace:

Traceback (most recent call last):

Done.
[2]&amp;#160;&amp;#160;&amp;#160; 590 abort (core dumped)&amp;#160; irb&lt;/pre&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;pre&gt;irb(main):001:0&amp;gt; require 'symengine'
=&amp;gt; true
irb(main):002:0&amp;gt; x = SymEngine(1)
=&amp;gt; #&amp;lt;SymEngine::Integer(1)&amp;gt;
irb(main):003:0&amp;gt; y = SymEngine(0)
=&amp;gt; #&amp;lt;SymEngine::Integer(0)&amp;gt;
irb(main):004:0&amp;gt; x/y
RuntimeError: Runtime Error
&amp;#160;&amp;#160; &amp;#160;from (irb):4:in `/'
&amp;#160;&amp;#160; &amp;#160;from (irb):4
&amp;#160;&amp;#160; &amp;#160;from /usr/bin/irb:11:in `&amp;lt;main&amp;gt;'
irb(main):005:0&amp;gt;&lt;/pre&gt;
&lt;p&gt;This is a good improvement overall, but as it&amp;#8217;s nicer to have a more descriptive error shown to the user, that part will be the continuation of exception handling during the 10th week.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/416/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/416/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=416&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://kshitij10496.github.io//2016/07/24/GSoC-Week-09/</guid>
      <title>GSoC Week 09 - The One with Inequalities</title>
      <author>Kshitij Saraogi(kshitij10496)</author>
      <pubDate>Sun, 24 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://kshitij10496.github.io//2016/07/24/GSoC-Week-09/</link>
      <description>&lt;p&gt;This week I worked on solving trigonometric inequalities.&lt;/p&gt;

&lt;h3 id="trigonometric-inequalities"&gt;&lt;strong&gt;Trigonometric inequalities&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The primary univariate inequality solver - &lt;code class="highlighter-rouge"&gt;solve_univariate_inequality&lt;/code&gt;,&lt;br /&gt;
depends upon the results of &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; in order to solve the given inequality.
Taking a cue from &lt;a href="https://github.com/sympy/sympy/pull/10022"&gt;PR#10022&lt;/a&gt; on incorporating &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; for inequalities, I worked on developing an approach for replacing the use of &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; 
with &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; in solving inequalities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Convert &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt;-type output from &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;list&lt;/code&gt; objects similar to that returned by &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most striking difference between both the APIs is the uniform &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; output returned by &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;. 
Hence, the prime concern while transitioning from &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; should be handling the various type of solutions.&lt;/p&gt;

&lt;p&gt;Here are a few implementation ideas on the same:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FiniteSet&lt;/strong&gt; : finite number of solutions&lt;br /&gt;
Using the &lt;code class="highlighter-rouge"&gt;list&lt;/code&gt; constructor on these type of objects works extremely well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ImageSet&lt;/strong&gt; : infinite number of solutions&lt;br /&gt;
This is generally the case with trigonometric functions as most of them are periodic in nature.
We need to limit the number of solutions to be finite.&lt;br /&gt;
For this, I intend to use the a periodic interval: &lt;code class="highlighter-rouge"&gt;[0, period]&lt;/code&gt; as the basis for filtering the solution set.
This returns a simplified &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; of solutions which can be used to solve inequalities in a restricted interval.
Following which we can generalise the output over the entire domain of the function.&lt;/p&gt;

    &lt;p&gt;A major issue here is the representation of the final solution set.&lt;br /&gt;
For example:&lt;/p&gt;

    &lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;&amp;#9121;&lt;/span&gt;         &lt;span class="err"&gt;&amp;#960;&lt;/span&gt;           &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;&amp;#8901;&amp;#960;&lt;/span&gt;         &lt;span class="err"&gt;&amp;#9124;&lt;/span&gt;
&lt;span class="err"&gt;&amp;#9122;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#9472;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#9472;&amp;#9472;&amp;#9472;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="err"&gt;&amp;#8714;&lt;/span&gt; &lt;span class="err"&gt;&amp;#8484;&amp;#9125;&lt;/span&gt;
&lt;span class="err"&gt;&amp;#9123;&lt;/span&gt;         &lt;span class="mi"&gt;2&lt;/span&gt;            &lt;span class="mi"&gt;2&lt;/span&gt;          &lt;span class="err"&gt;&amp;#9126;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Currently, we do not have a &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; object for representing this.&lt;br /&gt;
For this, we need to implement an &lt;em&gt;Indexed Union&lt;/em&gt; : &lt;code class="highlighter-rouge"&gt;Union(X(a) for a in I)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;We can symbolically represent the above solution as &lt;code class="highlighter-rouge"&gt;BigUnion(Interval(2*n*pi + pi/2, 2*n*pi + 3*pi/2), n, S.Intgers)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;After thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, this week my &lt;a href="https://github.com/sympy/sympy/pull/11277"&gt;PR#11277&lt;/a&gt; on periodicity got merged finally.
I have updated the corresponding &lt;a href="https://github.com/sympy/sympy/pull/11141"&gt;PR#11141&lt;/a&gt; which has been stalled for some time now.
Hopefully, it will get merged soon.&lt;/p&gt;

&lt;p&gt;The next week I will devote my time to the implementation part of solving inequalities.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/07/23/Rational-Polynomials-ft-Bugs</guid>
      <title>Rational Polynomials ft. Bugs</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sat, 23 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/07/23/Rational-Polynomials-ft-Bugs/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;Sorry I haven&amp;#8217;t been able to report my work for about two weeks now. Things have become slower mainly due to the fact that my university has resumed and along with it a heavily packed timetable and assignments in the first week don&amp;#8217;t help. I also caught a bad fever the past week which really hindered my progress, but it&amp;#8217;s dying down and I will resume my work with full vigor eventually.&lt;/p&gt;

&lt;p&gt;The work I did do has been summarized below.&lt;/p&gt;

&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;/h3&gt;

&lt;p&gt;While writing the code for the rational polynomials, as mentioned in the last blogpost, I encountered various bugs. Some of them caused other bugs to be exposed, which took a lot of time for me to debug.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;pow(Poly, uint)&lt;/code&gt; was throwing a segmentation fault. After digging in and wasting more than four hours on unrelated checks I figured out that the &lt;code class="highlighter-rouge"&gt;eq&lt;/code&gt; inside the polynomial class was incorrect. Without checking whether the other parameter was a &lt;code class="highlighter-rouge"&gt;Poly&lt;/code&gt; or not, I was &lt;code class="highlighter-rouge"&gt;static_cast&lt;/code&gt;ing it which posed a problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The happiness was shortlived, as the bug persisted. On further inspection I found that the polynomial was being treated as a number! This was because &lt;code class="highlighter-rouge"&gt;is_a_Number&lt;/code&gt; relied on typecodes, and the polynomial types were defined before the &lt;code class="highlighter-rouge"&gt;NUMBERWRAPPER&lt;/code&gt; class, which deemed them numbers. The fix for this was simple, just move the polynomial type code definitions after the numbers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class="highlighter-rouge"&gt;pow&lt;/code&gt; tests pass, but what&amp;#8217;s this? All the &lt;code class="highlighter-rouge"&gt;MSVC&lt;/code&gt; builds on appveyor fail. They all fail a &lt;code class="highlighter-rouge"&gt;coeff&lt;/code&gt; test. Wow, I had not changed any code related to &lt;code class="highlighter-rouge"&gt;coeff&lt;/code&gt; at all, how does it affect that specific test and only on the &lt;code class="highlighter-rouge"&gt;MSVC&lt;/code&gt; compiler? This kept me wondering and looking at the source for a day. Finally, I had to login to the VM of appveyor running the tests. I was not familiar with windows development environment at all, which was the reason I failed a couple of times before I gave up debugging. The next morning I woke up determined to fix this Windows bug, I set the break points in Visual Studio and started the code execution. I found it! It was a bug in the &lt;code class="highlighter-rouge"&gt;CoeffVisitor&lt;/code&gt; itself. The code for the &lt;code class="highlighter-rouge"&gt;coeff&lt;/code&gt; function was incomplete. Why wasn&amp;#8217;t this bug being captured before? Probably because the previous change (in the typecodes) caused a reordering in  a map, which no other compiler was doing. Do read up &lt;a href="https://github.com/symengine/symengine/pull/1033#issuecomment-232973025"&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An appveyor build was failing for unknown reason, which had to be shifted to allowed failures&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was basically the components of &lt;a href="https://github.com/symengine/symengine/pull/1033"&gt;#1033&lt;/a&gt;. Less quantity of changes, but really important none the less.&lt;/p&gt;

&lt;h3 id="rational-polynomials"&gt;Rational Polynomials&lt;/h3&gt;

&lt;p&gt;The work with rational polynomials continues. I had underestimated the amount of work required, and I also feel that I should have broken down rational polynomials into three parts each, just like integer polynomials. Right now, the work continues in &lt;a href="https://github.com/symengine/symengine/pull/1028"&gt;#1028&lt;/a&gt;, but it&amp;#8217;s soon going to become huge with all varieties of changes.&lt;/p&gt;

&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;

&lt;p&gt;I finally benchmarked &lt;a href="https://github.com/sakra/cotire"&gt;cotire&lt;/a&gt; to see how much speedup it was providing to SymEngine builds. &lt;a href="https://github.com/symengine/symengine/issues/1023"&gt;Here&lt;/a&gt; is the short summary of the speedups obtained, and the work to include it is in &lt;a href="https://github.com/symengine/symengine/pull/1041"&gt;#1041&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also a small bug was present in our flint and gmp rational number wrappers. We were not canonicalizing on construction from two integers. It was fixed in &lt;a href="https://github.com/symengine/symengine/pull/1031"&gt;#1031&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Laters!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=942</guid>
      <title>GSoC Week 9</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 22 Jul 2016 19:48:05 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/22/gsoc-week-9/</link>
      <description>&lt;p&gt;Hello, guys. Welcome back.&amp;#160;It&amp;#8217;s been nine weeks into the coding period. I had a meeting with Jason on 17&lt;sup&gt;th&amp;#160;&lt;/sup&gt; of this month. He was attending the code sprints at Scipy and I am very glad to meet other Sympy developers.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I have closed the PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11266"&gt;11266&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11374"&gt;11374&lt;/a&gt;, I have removed the use of mechanics Point.&lt;/li&gt;
&lt;li&gt;I have made boundary_conditions as property and the inputs are no longer as **kwargs. Each of the inputs namely moment, slope and deflection are initiated as an empty list. But I have some doubts regarding the behaviour of this method. I feel that this should be used only in the case when a full new set of boundary conditions are given as input. Since to input dynamically, there exists some methods already which would handle each of the cases explicitly. Those methods appends the new inputs whereas this method would delete the existing boundary conditions and apply the newer one. This way the property of being mutable would remain.&lt;/li&gt;
&lt;li&gt;Replaced the solve function by linsolve. Since solve is going to be depreciated in the mear future.&lt;/li&gt;
&lt;li&gt;I have added the docstrings for slope and deflection method as well as for the beam class.&lt;/li&gt;
&lt;li&gt;In deflection method, I have added a new case where if there is no slope boundary condition but there is deflection boundary conditions, it would give operate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I will be working on adding a documentation file for this beam bending problem module exclusively.&lt;/li&gt;
&lt;li&gt;Add some more test for checking the corner cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/942/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/942/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=942&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/07/22/GSoC-week-8-9.html</guid>
      <title>GSoC Week 8 &amp; 9</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 22 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/07/22/GSoC-week-8-9.html</link>
      <description>&lt;p&gt;Last week I did not end up writing a blog post and so I am combining that
week&amp;#8217;s post with this week. Last week I attended the SciPy 2016 conference and
was able to meet my mentor, and many other contributers to SymPy, in person. I
was also able to help out with the Pydy tutorial.  During this time at the
conference (and this current week) I was able to flesh out the remaining
details on the different portions of the project. I have updated &lt;a href="https://github.com/pydy/pydy/pull/353"&gt;PR
#353&lt;/a&gt; to reflect the api decisions for
SymbolicSystem (previously eombase.EOM).&lt;/p&gt;

&lt;p&gt;In line with trying to put the finishing touches on implementation details
before diving in to code, Jason and I met with someone who has actually
implemented the algorithm in the past to help us with details surrounding
Featherstone&amp;#8217;s method. He also pointed me to a different description of the
same algorithm that may be easier to implement.&lt;/p&gt;

&lt;p&gt;This week I also worked on rewriting the docstrings in
physics/mechanics/body.py because I found the docstrings currently there to be
somewhat confusing. I also did a review on one of Jason&amp;#8217;s PR&amp;#8217;s where he reduces
the amount of work that *method.rhs() has to do when inverting the mass matrix
by pulling out the kinematical information before the inversion takes place.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;With the work these past two weeks being focused on implementing the different
parts of the projects, I will start implementing these various parts next week.
I will first work on finishing off the SymbolicSystem object and then move
towards implementing the OrderNMethod. This work should be very straight
forward with all the work that has been put into planning the api&amp;#8217;s.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Merged) Speeds up the linear system solve in KanesMethod.rhs() &lt;a href="https://github.com/sympy/sympy/pull/10965"&gt;PR
  #10965&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Docstring cleanup of physics/mechanics/body.py &lt;a href="https://github.com/sympy/sympy/pull/11416"&gt;PR
  #11416&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) [WIP] Created a basis on which to discuss EOM class &lt;a href="https://github.com/pydy/pydy/pull/353"&gt;PR
  #353&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Eighth-Week</guid>
      <title>GSoC Eighth Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Wed, 20 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Eighth-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;After completing the work on &lt;code class="highlighter-rouge"&gt;gf_factor&lt;/code&gt;, I moved on to implement Gathen-Shoup&amp;#8217;s factorization algorithm. Like Zassenhaus&amp;#8217;s agorithm, it is also a probabilistic algorithm.
&lt;br /&gt;
The paper is available &lt;a href="http://www.shoup.net/papers/frobenius.pdf"&gt;here&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;First question: Why this algorithm ?&lt;/strong&gt;
&lt;br /&gt;
&amp;gt; Because, it is kind of faster than zassenhaus&amp;#8217;s algorithm.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Second question: What is &amp;#8220;kind of&amp;#8221; here ?&lt;/strong&gt;
&lt;br /&gt;
&amp;gt; Well, it is faster when a specific condition satisfies.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Its asymptotic runtime is &lt;code class="highlighter-rouge"&gt;O(n**2 + n log q).(log n)**2.loglog n&lt;/code&gt;, where &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt; is degree of polynomial and &lt;code class="highlighter-rouge"&gt;q&lt;/code&gt; is the field characteristics.
&lt;br /&gt;
In &lt;a href="https://en.wikipedia.org/wiki/&amp;#213;#Mathematical_use"&gt;&amp;#8220;Soft O&amp;#8221; notation&lt;/a&gt;, it is &lt;code class="highlighter-rouge"&gt;O~(n**2 + n log q)&lt;/code&gt;. While the cantor zassenhaus&amp;#8217;s algorithm has &lt;code class="highlighter-rouge"&gt;O~(n**2 log q)&lt;/code&gt; asymptotic runtime.
&lt;br /&gt;
So when &lt;code class="highlighter-rouge"&gt;log q&lt;/code&gt; approaches &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt;, the difference is remarkable.
&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Algorithm&lt;/th&gt;
      &lt;th style="text-align: center;"&gt;Asymptotic Runtime&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Shoup&lt;/td&gt;
      &lt;td style="text-align: center;"&gt;&lt;code class="highlighter-rouge"&gt;O~(n**2)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Zassenhaus&lt;/td&gt;
      &lt;td style="text-align: center;"&gt;&lt;code class="highlighter-rouge"&gt;O~(n**3)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It also works in three parts, firstly square free factorization, then distinct degree and finally equal degree factorization.
&lt;br /&gt;
I have completed the implementation of this algorithm on &lt;a href="https://github.com/nishnik/symengine/tree/shoup_factorization"&gt;shoup_factorization&lt;/a&gt; branch.
And also, I changed the container (which stores factors) type to &lt;code class="highlighter-rouge"&gt;set&lt;/code&gt;.&lt;br /&gt;
Will send a PR soon.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-9</guid>
      <title>Coding Period Week 9</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Wed, 20 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-9/</link>
      <description>&lt;p&gt;&lt;strong&gt;Some points regarding trigonometric and inverse trigonometric functions in solveset :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are many issues in solveset &lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt;.More inverse trigonometric formula and trigonometric identities should be defined/added or improved.
Also &lt;code class="highlighter-rouge"&gt;simplify&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; and in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt; methods should be improved accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some links, that is helpful to improve these functions.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions"&gt;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Proofs_of_trigonometric_identities"&gt;https://en.wikipedia.org/wiki/Proofs_of_trigonometric_identities&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://owlcation.com/stem/List-of-Inverse-Trig-Function-Identities-Integrals-and-Derivatives"&gt;https://owlcation.com/stem/List-of-Inverse-Trig-Function-Identities-Integrals-and-Derivatives&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; must be more powerful so that &lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt; get simplified eq. (which solves trig equation by converting them into its &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt; solves the trig eq. using its &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form. There may be cases when that &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form is complicated and solveset fail to handle that form.
There should be technique to convert that complicated form to simpler form(if possible) and then call the &lt;code class="highlighter-rouge"&gt;solveset_complex&lt;/code&gt;. That may help to improve the &lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt; method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can use &lt;code class="highlighter-rouge"&gt;_osbornei&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;hyper_as_trig&lt;/code&gt; methods defined in &lt;code class="highlighter-rouge"&gt;simplify/fu.py&lt;/code&gt; to convert hyperbolic function to trigonometric function, then we can use &lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; (we can&amp;#8217;t use &lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; for hyperbolic functions).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;First need to improve basic concepts and add more identities. I opened a new PR to improve &lt;code class="highlighter-rouge"&gt;rewrite&lt;/code&gt; for trigonometric functions , PR is &lt;a href="https://github.com/sympy/sympy/pull/11424/"&gt;#11424&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;eliminate() :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;issue &lt;a href="https://github.com/sympy/sympy/issues/2720"&gt;#2720&lt;/a&gt; : We need some kind of eliminate function, like &lt;a href="http://reference.wolfram.com/mathematica/ref/Eliminate.html"&gt;http://reference.wolfram.com/mathematica/ref/Eliminate.html&lt;/a&gt;. See also &lt;a href="http://stackoverflow.com/q/20826969/161801"&gt;http://stackoverflow.com/q/20826969/161801 &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It looks something related to &lt;a href="https://github.com/sympy/sympy/pull/11111/files#diff-eec0422923e8f100745c015cd8fdd6cfR1135"&gt;substitution&lt;/a&gt; function.
But they are not same. Using &lt;code class="highlighter-rouge"&gt;eliminate()&lt;/code&gt; we will try to remove the variable(s) from the each equations(not solving the eq).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Plan : First choose eq that have min. variables and get the value of the variable, to be eliminated. Go further and &lt;code class="highlighter-rouge"&gt;subs&lt;/code&gt; the value to next min. variable eq., and so on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Work in progress.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Meanwhile :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I found some basic issues in &lt;code class="highlighter-rouge"&gt;ComplexInfinity&lt;/code&gt; and trying to solve them in this PR &lt;a href="https://github.com/sympy/sympy/pull/11409"&gt;#11409&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;there may be many things to be added about &lt;code class="highlighter-rouge"&gt;ComplexInfinity&lt;/code&gt;, one can refer this link to implement them :
&lt;a href="http://reference.wolfram.com/language/ref/ComplexInfinity.html"&gt;http://reference.wolfram.com/language/ref/ComplexInfinity.html&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-8</guid>
      <title>Coding Period Week 8</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Mon, 18 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-8/</link>
      <description>&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Continue - Diophantine in Solveset :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11234"&gt;11234&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For general Pythagorean diop_type (Diophantine eq type), it seems diophantine always returns parameterized solution so I did some changes in the PR. &lt;a href="https://github.com/sympy/sympy/pull/11334/commits/6af46fc35db3a74dfda78b6d8e2a0f7d4ec65afe"&gt;commit&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can refer this &lt;a href="https://github.com/sympy/sympy/pull/11334#issuecomment-230334645"&gt;comment&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue Simplified Trig soln&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11188"&gt;#11188&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After some changes, the PR is ready for review.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue nonlinsolve :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11111"&gt;#11111&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Added some XFAIL test-cases of system of Trigonometric equations. &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; trig solver (&lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt;) is not smart enough(&lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; returns &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;, where soln can be simply inverse trig functions using &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt; or inverse Trigonometric functions). So &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; returns &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; that means &lt;code class="highlighter-rouge"&gt;substitution&lt;/code&gt; is not getting soln.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is better to replace trigonometric functions or other &lt;code class="highlighter-rouge"&gt;Function&lt;/code&gt; with symbols&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(e.g. &lt;code class="highlighter-rouge"&gt;sin(x)&lt;/code&gt; &amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;u&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;sin(y)&lt;/code&gt;&amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;v&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;f(x)&lt;/code&gt;&amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;f_x&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;g(x)&lt;/code&gt; &amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;g_x&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;and then solve for the symbols. After getting solution from &lt;code class="highlighter-rouge"&gt;nonlinsolve&lt;/code&gt; user can invert or do &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(e.g. solveset(Eq(sin(x), soln_u), x, domain) to get value of &lt;code class="highlighter-rouge"&gt;x&lt;/code&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ready for review.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Meanwhile :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We already know that solveset need improved &lt;code class="highlighter-rouge"&gt;invert_real&lt;/code&gt; , &lt;code class="highlighter-rouge"&gt;invert_complex&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Imageset&lt;/code&gt; Intersections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;previous work is in this PR &lt;a href="https://github.com/sympy/sympy/pull/10971"&gt;10971&lt;/a&gt;. Trying to improve them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some cases is here :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# In 2, 4, 5 intersection is not needed.

In [1]: img = ImageSet(Lambda(n, x/n), S.Complexes)

In [2]: Intersection(img, S.Complexes)
Out[2]:
    &amp;#9127;x        &amp;#9131;
&amp;#8450; &amp;#8745; &amp;#9128;&amp;#9472; | n &amp;#8714; &amp;#8450;&amp;#9132;
    &amp;#9129;n        &amp;#9133;

In [3]: img = ImageSet(Lambda(n, x/n), S.Integers)

In [4]: Intersection(img, S.Complexes)
Out[4]:
&amp;#9127;x        &amp;#9131;    
&amp;#9128;&amp;#9472; | n &amp;#8714; &amp;#8484;&amp;#9132; &amp;#8745; &amp;#8450;
&amp;#9129;n        &amp;#9133;    

In [5]: Intersection(ImageSet(Lambda(n, 2*n*I*pi), S.Integers), S.Complexes)
Out[5]: {2&amp;#8901;&amp;#8520;&amp;#8901;&amp;#960;&amp;#8901;n | n &amp;#8714; &amp;#8484;} &amp;#8745; &amp;#8450;

# ImageSet Intersection is not implemented when inverter returns multiple values.
# here ans should be {0, 1}
In [6]: img1 = ImageSet(Lambda(n, n**2), S.Integers)

In [7]: Intersection(img1, Interval(0,2))
Out[7]:
         &amp;#9127; 2        &amp;#9131;
[0, 2] &amp;#8745; &amp;#9128;n  | n &amp;#8714; &amp;#8484;&amp;#9132;
         &amp;#9129;          &amp;#9133;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=393</guid>
      <title>GSoC Week 8 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sat, 16 Jul 2016 16:09:06 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/07/16/gsoc-week-8-progress/</link>
      <description>&lt;p&gt;When this week started, most of the work up to week 7 were done. In the first couple of days this week, code for parsing was merged, and I started looking into wrapping lambdification of SymEngine Basic expressions.&lt;/p&gt;
&lt;p&gt;This was a seemingly easy task, with two options ahead of me. One was to directly wrap C++&amp;#8217;s lambdify_double method, while the other was to create Ruby lambdas directly.&lt;/p&gt;
&lt;p&gt;After considering various aspects, and with feedback from other contributors, I decided to go ahead with writing them directly in Ruby.&lt;/p&gt;
&lt;p&gt;It is now completed, and undergoing review.&lt;/p&gt;
&lt;p&gt;The code implemented allows lamdifying SymEngine::Basic expressions with free symbols.&lt;/p&gt;
&lt;p&gt;i.e. let, f = x + y, where x and y are SymEngine::Symbols,&lt;/p&gt;
&lt;p&gt;a lambda is expected, such that it can be called, f_lambda.call(3, 4) which would return 7.&lt;/p&gt;
&lt;p&gt;For expressions with single or multiple symbols, it works as following:&lt;/p&gt;
&lt;pre&gt;f = x + y
f_lambda = SymEngine::lambdify(f, [x, y])&lt;/pre&gt;
&lt;p&gt;For expressions with a single symbol, it can be used through the to_proc method, using a &amp;amp; call.&lt;/p&gt;
&lt;pre&gt;f_diam = 2 * SymEngine::PI * r
radii = [2, 3, 4]
diams = radii.map(&amp;amp;f_diam)&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;With another day left already, I am looking at Exception Handling, which I expect to be complicated in implementing.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/393/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/393/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=393&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=841</guid>
      <title>GSoC Week 8</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 15 Jul 2016 19:47:56 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/15/gsoc-week-8/</link>
      <description>&lt;p&gt;Hello, guys. Welcome back.&amp;#160;It&amp;#8217;s been eight weeks into the coding period and this week I enjoyed a lot while working. I learned to build a list without using a loop, in case, it can be done&amp;#160;more concisely with a &lt;b&gt;&lt;em&gt;list comprehension&lt;/em&gt;&amp;#160;&lt;/b&gt;such as:&lt;/p&gt;
&lt;p&gt;Instead of doing :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In [ ]: b = []
In [ ]: for x in a:
       b.append(10 * x)
 ....:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can do :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In [ ]: b = [&lt;span class="lit"&gt;10&lt;/span&gt; &lt;span class="pun"&gt;*&lt;/span&gt;&lt;span class="pln"&gt; x &lt;/span&gt;&lt;span class="kwd"&gt;for&lt;/span&gt;&lt;span class="pln"&gt; x &lt;/span&gt;&lt;span class="kwd"&gt;in&lt;/span&gt;&lt;span class="pln"&gt; a]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I came to know about stuff , like using zip for transposing a matrix and dividing a list into groups of&lt;em&gt;&lt;strong&gt;&amp;#160;&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;n&lt;/em&gt; .&amp;#160;&lt;/strong&gt;&lt;/strong&gt;This week I had my weekly meeting with Jason and Sartaj on 13th of this month.&amp;#160;They were in&amp;#160;Austin, Texas attending &lt;a href="http://scipy2016.scipy.org/ehome/index.php?eventid=146062&amp;amp;tabid=332930&amp;amp;"&gt;Scipy 2016&lt;/a&gt;,&amp;#160;the 15th annual Scientific Computing with Python conference.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;&amp;#160;got merged. So, now the&amp;#160;master branch is updated with a module of singularity functions which can handle almost all the mathematical operations.&lt;/li&gt;
&lt;li&gt;I have used the Singularity Functions &amp;#160;to continue developing the beam bending module at &lt;a href="https://github.com/sympy/sympy/pull/11374"&gt;PR 11374&lt;/a&gt;. I have added the following methods:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;load_as_SingularityFunction&lt;/strong&gt; &lt;/em&gt;: This is a private method which represents a PointLoad and DistributedLoad object into a Singularity Function object and stores in the load beam object attribute.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;load_distribution&lt;/strong&gt;&lt;/em&gt; : This is a public method which outputs a load distribution curve of a beam.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;shear_force :&amp;#160;&lt;/strong&gt;&lt;/em&gt;This is also a public method. It at first checks whether the moment list in boundary conditions dictionary have elements. If it has then it call the bending_moment method and then differentiate the output w.r.t to the free symbol else it just integrates the output of load_distribution method.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;bending_moment&lt;/strong&gt;&lt;/em&gt; : The initial part of this method is similar to the method shear_force. If the test passes then it integrates the load_distibution twice using contants of integrations and later the contants are solved else&amp;#160;it just integrates the output of shear_force method.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;slope&lt;/strong&gt;&lt;/em&gt; : It outputs the slope of a beam by solving the constants.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;deflection&lt;/strong&gt;&lt;/em&gt; : It outputs the elastic curve of the beam.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify the Beam Module.&lt;/li&gt;
&lt;li&gt;Add Sphinx documentations.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="entry-content"&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
&lt;/div&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/841/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/841/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=841&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Seventh-Week</guid>
      <title>GSoC Seventh Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Wed, 13 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Seventh-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Previous week, I had started the work on Equal degree factorization &lt;a href="https://github.com/symengine/symengine/pull/1026"&gt;here&lt;/a&gt;. Here I was storing the factors in a vector and then sorting the factors. Certik pointed out that its better to use some other data structure instead of &lt;code class="highlighter-rouge"&gt;vector&lt;/code&gt;. So I have changed the container type to &lt;code class="highlighter-rouge"&gt;set&lt;/code&gt;.
&lt;br /&gt;Then after both Distinct degree factorization and Equal degree factorization being implemented, I started to work on factoring a polynomial in finite field, this needed integrating square free factorization with these two. I worked on &lt;code class="highlighter-rouge"&gt;gf_factor()&lt;/code&gt; method. In this method we take a polynomial in a given field as input, and return all the factors and their respective powers, and polynomial&amp;#8217;s leading coefficient as output.
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;GaloisFieldDict::gf_factor() const
{
  integer_class lc;
  GaloisFieldDict monic;
  gf_monic(lc, outArg(monic));
  if (monic.degree() &amp;lt; 1)
      return std::make_pair(lc, factors);
  std::vector&amp;lt;std::pair&amp;lt;GaloisFieldDict, integer_class&amp;gt;&amp;gt; sqf_list
      = monic.gf_sqf_list();
  for (auto a : sqf_list) {
      auto temp = (a.first).gf_zassenhaus();
      for (auto f : temp)
          factors.insert({f, a.second});
  }
  return factors;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a given polynomial firstly we get its monic representation and it leading coefficient. Then we find the Square free factors of the monic representation. And on each of the square free factor we run the &lt;code class="highlighter-rouge"&gt;zassenhaus&lt;/code&gt;&amp;#8217;s algorithm.
&lt;br /&gt;
I have been working on &lt;a href="https://github.com/nishnik/symengine/tree/gf_factor"&gt;this&lt;/a&gt; branch, will create a PR after the Equal degree factorization PR gets merged.
&lt;br /&gt;
Then I have started working on Shoup&amp;#8217;s algorithm for polynomial factorization, will post about it in the coming weeks.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC Week 7</guid>
      <title>GSoC Week 7</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sun, 10 Jul 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc_week_7.html</link>
      <description>&lt;p&gt;
Hi everyone.
&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;
Here's what we have been doing for &lt;i&gt;7th&lt;/i&gt; week of &lt;i&gt;GSoC&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
Kalevi mentioned about the $LaTex$ not getting rendered on Planet Sympy website, thought it works fine on my website. Following the conversation Aaron opened issue &lt;a href="https://github.com/sympy/planet-sympy/issues/45"&gt;planet-sympy/issues/45&lt;/a&gt;, though it hasn't been fixed.
&lt;/p&gt;

&lt;p&gt;
This week we completed PR &lt;a href="https://github.com/sympy/sympy/pull/11295"&gt;#11295&lt;/a&gt; on Reidemeister Schreier algorithm. Remember the &lt;a href="https://gitter.im/sympy/GroupTheory?at=5776b220cdab7a1f4fbebd34"&gt;blog issue&lt;/a&gt; I asked on our gitter channel. Kalevi suggested to be more on the 'descriptive' side.
&lt;/p&gt;

&lt;p&gt;
&lt;h4&gt;What do we do this week?&lt;/h4&gt;
Implemented the Reidemeister Schreier algorithm (shortly RS algorithm) and Titze Transformations (shortly TT) in PR #11295 . Most of the pseudo code for RS algorithm is there in the Handbook [1], perhaps majority of the time was spent working with TT. There isn't any pseudo code available for making that work, but we gathered detailed information from [1] combined with Havas Paper [2].

What issues were there?
In the both [1] and [2], there a few assumptions made, like

&lt;pre&gt;
&gt; shall assume that all relators are always cyclically reduced; that is, that
whenever a relator is changed, it is immediately replaced by its cyclic reduction.
&lt;/pre&gt;

&lt;/p&gt;

&lt;p&gt;I opened the issue &lt;a href="https://github.com/sympy/sympy/issues/11352"&gt;#11352&lt;/a&gt; regarding a typo I left in &lt;code&gt;coset_enumeration_c&lt;/code&gt;. Though I didn't expect a PR, @kritkaran94 fixed it. Perhaps a good test case which makes use of different value of &lt;code&gt;max_stack_size&lt;/code&gt; was suggested by Kalevi. One thing came back to me, "everthing is an object in Python", the fact that initially &lt;code&gt;CosetTableDefaultMaxLimit&lt;/code&gt; was a module level variable initially and we changed it to &lt;code&gt;CosetTable.CosetTableDefaultMaxLimit&lt;/code&gt;, module is an object so is a &lt;code&gt;class&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;h4&gt;What hasn't been done?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No testing for a few of techniques, for example currently no tests exist for &lt;code&gt;elimination_technique_2&lt;/code&gt;, which is a variant of the elimination procedures.
&lt;li&gt;TT doesn't produce the best possible result.
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
Though doing this seemed easy at first. But I didn't wanted to apply &lt;code&gt;identity_cyclic_reduction&lt;/code&gt; every change as there can be a few instance where it not necessary to do this, perhaps because of the property of &lt;i&gt;words&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
The good thing about this week was that I could now understand the limitations that will remain after my GSoC project. The scope of Computational Group Theory is more than what I expected. Apart from that I will be leaving for my college this week stars from &lt;i&gt;15th&lt;/i&gt; of &lt;i&gt;July&lt;/i&gt;, perhaps I don't know how things will shift regarding time for GSoC. Let's be realistic :)
&lt;/p&gt;
&lt;p&gt;
&amp;#2309;&amp;#2354;&amp;#2357;&amp;#2367;&amp;#2342;&amp;#2366;
&lt;/p&gt;
          &lt;h4&gt;References&lt;/h4&gt;
                    &lt;i&gt;

                    &lt;ul&gt;
                      &lt;li&gt;1. Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O'Brien, "Handbook of computational group theory", Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-5848-372-3 .&lt;/li&gt;

                      &lt;li&gt;2.&lt;a href="http://staff.itee.uq.edu.au/havas/1974h.pdf"&gt; George Havas, "Reidemeister-Schreier program"&lt;/a&gt;&lt;/li&gt;
                    &lt;/i&gt;
                    &lt;br /&gt;
                    &lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=604</guid>
      <title>GSoC Week 7</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sun, 10 Jul 2016 17:19:17 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/07/10/gsoc-week-7/</link>
      <description>&lt;p&gt;I started working on the support for additional symbolic parameters in the module. So I added an extra argument in the method&amp;#160;&lt;code&gt;expr_to_holonomic&lt;/code&gt; for using custom domains. This will be helpful in integrations. For instance:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [5]: expr_to_holonomic(sin(x*y), x=x, domain=QQ[y]).integrate(x).to_expr()
Out[5]:
-cos(x&amp;#8901;y) + 1
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
     y
In [15]: expr_to_holonomic(log(x*y), x=x, domain=QQ[y]).integrate((x, 1, x)).to_expr()
Out[15]: x&amp;#8901;log(x) + x&amp;#8901;log(y) - x - log(y) + 1
&lt;/pre&gt;
&lt;p&gt;Code upto here was merged at&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11330"&gt;#11330&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that I implemented the &lt;code&gt;Frobenius method&lt;/code&gt;&amp;#160;to support functions where the series may have negative or fractional exponents. Although there are limitations in the algorithm. First one being that we don&amp;#8217;t have an algorithm to compute the general solution. There doesn&amp;#8217;t seem to be a direct algorithm if roots of the &lt;code&gt;indicial equation&lt;/code&gt;&amp;#160;differ by an integer. Second one is the initial conditions. Initial conditions of the function (most of the times they won&amp;#8217;t even exist) can&amp;#8217;t be used if the exponents are fractional or negative.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [23]: expr_to_holonomic(sqrt(x**2-x)).series()
Out[23]:
            3/2       5/2       7/2         9/2         11/2
        C&amp;#8320;&amp;#8901;x      C&amp;#8320;&amp;#8901;x      C&amp;#8320;&amp;#8901;x      5&amp;#8901;C&amp;#8320;&amp;#8901;x      7&amp;#8901;C&amp;#8320;&amp;#8901;x        &amp;#9115; 6&amp;#9118;
C&amp;#8320;&amp;#8901;&amp;#8730;x - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + O&amp;#9117;x &amp;#9120;
           2         8         16        128         256            

In [28]: expr_to_holonomic(cos(x)**2/x**2, initcond=False).series()
Out[28]:
         2         4                       3         5
     C&amp;#8322;&amp;#8901;x    2&amp;#8901;C&amp;#8322;&amp;#8901;x    C&amp;#8321;   2&amp;#8901;C&amp;#8321;&amp;#8901;x   2&amp;#8901;C&amp;#8321;&amp;#8901;x    4&amp;#8901;C&amp;#8321;&amp;#8901;x    C&amp;#8320;    &amp;#9115; 6&amp;#9118;
C&amp;#8322; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; + O&amp;#9117;x &amp;#9120;
       3        45     x      3         15       315      2
                                                         x
&lt;/pre&gt;
&lt;p&gt;I will be working more on this and hope to add more functionality in this method.&lt;/p&gt;
&lt;p&gt;Right now I am working on an algorithm to convert a given Holonomic Function to Meijer G-function. This also doesn&amp;#8217;t look so straightforward. Kalevi helped me with the theory and we wrote a basic that works for some cases. We hope to add more things in it.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [17]: hyperexpand(expr_to_holonomic(exp(x)).to_meijerg())
Out[17]:
 x
&amp;#8495;
In [19]: hyperexpand(expr_to_holonomic(log(x)).to_meijerg()).simplify()
Out[19]: log(x)
&lt;/pre&gt;
&lt;p&gt;These are at&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11360"&gt;#11360&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/604/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/604/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=604&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=761</guid>
      <title>GSoc Week 7</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sat, 09 Jul 2016 16:52:24 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/09/gsoc-week-7/</link>
      <description>&lt;p&gt;Hi there! It&amp;#8217;s been seven weeks into the coding period&amp;#160;and the&amp;#160;second half has started now. I had a meeting with Jason on 3&lt;sup&gt;rd&lt;/sup&gt; of July. We discussed some modifications that were needed to be done in the existing PRs. Further, we had a conversation on the beam bending module. We ended up with some good ideas regarding the&amp;#160;implementation of beam object.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In PR&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;, I have added the suggested modifications.&lt;/li&gt;
&lt;li&gt;In PR&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11266"&gt;11266&lt;/a&gt;, I have done some modifications in the DistributedLoad class. Initially, it had &amp;#8220;start&amp;#8221;,&amp;#8221; end&amp;#8221; and &amp;#8220;value&amp;#8221; as its attribute but Jason suggested me to add an attribute which would denote the order of the load. This attribute would help while representing a load in the&amp;#160;form of Singularity Functions. Such as:
&lt;ul&gt;
&lt;li&gt;Order = 0 will denote Step Function,&lt;/li&gt;
&lt;li&gt;Order = 1 will denote Ramp Function,&lt;/li&gt;
&lt;li&gt;Order = 2 will denote Parabolic Ramp Function and&lt;/li&gt;
&lt;li&gt;so on &amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the same PR, I have added some more method for taking boundary conditions explicitly for different cases such as for deflection, slope and moment as inputs. I made a private attribute &lt;em&gt;_boundary_conditions&lt;/em&gt; and initiated as an empty dictionary of lists with keywords&amp;#160;&amp;#160;deflection, slope and moment. Later on each of the methods, namely,
&lt;ul&gt;
&lt;li&gt;apply_boundary_conditions&lt;/li&gt;
&lt;li&gt;apply_moment_boundary_conditions&lt;/li&gt;
&lt;li&gt;apply_slope_boundary_conditions&lt;/li&gt;
&lt;li&gt;apply_deflection_boundary_conditions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;just updates that dictionary. The method &lt;em&gt;boundary_conditions&lt;/em&gt; would return the dictionary itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I will try to get&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;&amp;#160;merged.&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;apply_load&lt;/em&gt; method to the Beam class.&lt;/li&gt;
&lt;li&gt;Successfully convert all the load inputs through the &amp;#160;&lt;em&gt;apply_load&lt;/em&gt; method into Singularity Functions.&lt;/li&gt;
&lt;li&gt;Write methods which would output load curve, shear curve and moment curve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/761/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/761/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=761&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=362</guid>
      <title>GSoC Weeks 6 &amp; 7 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sat, 09 Jul 2016 11:50:05 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/07/09/gsoc-weeks-6-7-progress/</link>
      <description>&lt;p&gt;Week 6 was quite a rush, with many other things happening, and the work getting lagged behind. But with week 7, I was able to put much extra time into the project and get more or less up-to date with the time-line.&lt;/p&gt;
&lt;p&gt;Since, the end of week 5, the progress is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Completed and merged Matrix CWrappers in &lt;a href="https://github.com/symengine/symengine/pull/992" target="_blank"&gt;PR #992&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Completed and merged Parser CWrapper in &lt;a href="https://github.com/symengine/symengine/pull/1029" target="_blank"&gt;PR #1029&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Completed and merged &lt;a href="https://github.com/symengine/symengine/pull/1027" target="_blank"&gt;PR #1027&lt;/a&gt; which had wrappers for various functions for Number class, needed for the tests in Ruby to function properly.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/56" target="_blank"&gt;PR #56&lt;/a&gt; in the Ruby Wrapper for Matrices is almost ready, with several review feedback to be incorporated.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/60" target="_blank"&gt;PR #60&lt;/a&gt; in the Ruby Wrapper for Parser is ready to be merged.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/59" target="_blank"&gt;PR #59&lt;/a&gt; contains the updates for the IRuby Notebooks, which will be used by @certik for SciPy 2016&amp;#8217;s SymEngine talk.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/55" target="_blank"&gt;PR #55&lt;/a&gt; with the Ruby wrappers for evalf was finally merged after quite a time going into accmmodating floating point tests.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/issues/57"&gt;Issue #57&lt;/a&gt; was closed in the Ruby Wrapper.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the proposal, I had promised an auxiliary feature of LaTeX friendly outputs for SymEngine Expresions, given I am on time. But considering I am barely hanging on to the time line, I decided to push this to the end of the time line.&lt;/p&gt;
&lt;p&gt;So I will immediately start working on the lambdify functions, and hopefully start exception catching in the same week. This will give me time to come back to the LaTeX friendly expressions in the last weeks.&lt;/p&gt;
&lt;p&gt;See you!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/362/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/362/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=362&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/07/09/Rational-Polynomials</guid>
      <title>Rational Polynomials</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sat, 09 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/07/09/Rational-Polynomials/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;This last week was divided into two parts. The first half was spent in fixing miscellaneous issue with the last PR, regarding the basic to polynomial converisons. The second half was spent in thinking of how SymEngine should store rational polynomials (polynomials with rational coefficients) and how infact should they be implemented.&lt;/p&gt;

&lt;h3 id="leftovers-from-basic-conversions"&gt;Leftovers from Basic Conversions&lt;/h3&gt;

&lt;p&gt;As mentioned, the first half of my week was spent finalizing the basic to polynomial conversions PR.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Using &lt;code class="highlighter-rouge"&gt;divnum&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;mulnum&lt;/code&gt; methods instead of using &lt;code class="highlighter-rouge"&gt;rcp_cast&amp;lt;Number&amp;gt;&lt;/code&gt; on &lt;code class="highlighter-rouge"&gt;mul&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;div&lt;/code&gt; respectively. These made the code much more readable too.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class="highlighter-rouge"&gt;static_cast&amp;lt;const Rational &amp;amp;&amp;gt;(*rat_rcp).get_den()&lt;/code&gt; instead of &lt;code class="highlighter-rouge"&gt;rcp_static_cast&amp;lt;const Rational&amp;gt;(rat_rcp)-&amp;gt;get_den()&lt;/code&gt;. The logic behind this is, that in the second case, another &lt;code class="highlighter-rouge"&gt;RCP&lt;/code&gt; is being constructed, and the &lt;code class="highlighter-rouge"&gt;get_den&lt;/code&gt; function is called on this new RCP. This is unecessary and can be avoided using the former approach.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At many places within the visitor pattern, I was calling the external function &lt;code class="highlighter-rouge"&gt;basic_to_poly&lt;/code&gt;. This was not wrong, but caused necessary overhead and recursion, which is not usually desired. Isuru suggested that I can reuse the visitor and successfully avoid the recursion. Here&amp;#8217;s an example&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;dict_type&lt;/span&gt; &lt;span class="nf"&gt;_basic_to_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;	
    &lt;span class="n"&gt;BasicToPolyV&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// dict is the answer we will be returning
&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;BasicToPolyV&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;bvisit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// unnecessary overhead
&lt;/span&gt;        &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;_basic_to_upoly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;becomes this&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dict is the answer we will be returning
&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;BasicToPolyV&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;bvisit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;	
    &lt;span class="n"&gt;dict_type&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// no overhead
&lt;/span&gt;        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;BasicToPolyV&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;There was also a &lt;a href="https://github.com/symengine/symengine/pull/1003#discussion_r69408888"&gt;discussion&lt;/a&gt; on how the visitor for &lt;code class="highlighter-rouge"&gt;Pow&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;find_gen_pow&lt;/code&gt; was implemented. Isuru pointed out, how it would give wrong answers in the cases he put forward. But I had thought of other cases (like &lt;code class="highlighter-rouge"&gt;2**(2**(x+1))&lt;/code&gt;) which would would then not work, if the code was changed. These were special type of cases where the expression could be &amp;#8216;simplified&amp;#8217;. There&amp;#8217;s some discussion on the issue &lt;a href="https://github.com/symengine/symengine/issues/1021"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="starting-rational-polynomials"&gt;Starting Rational Polynomials&lt;/h3&gt;

&lt;p&gt;I began thinking of how the polynomials with rational coefficients class should be implemented. In Flint, the &lt;code class="highlighter-rouge"&gt;fmpq_poly&lt;/code&gt; class is implemented as a &lt;code class="highlighter-rouge"&gt;fmpz_poly&lt;/code&gt; class with another just another integer acting as the common denominatior. This kind of implementation saves up on a lot of time! (think of canonicalization of coefficients, after multiplication) But this kind of implementation would require a lot of extra code be written, and we could not reuse any of the code we have already written. So, after discussion with Isuru, he suggested that I can go ahead with the trivial implementation of using a map from &lt;code class="highlighter-rouge"&gt;uint&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;rational_class&lt;/code&gt;.&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;URatDict&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ODictWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rational_class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add in some constructors and that&amp;#8217;s it! The internal container for rational polynomials in SymEngine is ready, because of the way we had strcutured the earlier code.&lt;/p&gt;

&lt;p&gt;Now the question was how the end classes should be implemented (i.e. &lt;code class="highlighter-rouge"&gt;URatPoly&lt;/code&gt;) If you think about it, the methods of both the rational and integer polynomials will look exactly the same. &lt;code class="highlighter-rouge"&gt;from_vec&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;container_from_dict&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;eval&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;compare&lt;/code&gt; will all look the same with minor differences. The minor differences are only what type of container is being used (&lt;code class="highlighter-rouge"&gt;URatDict&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;UIntDict&lt;/code&gt;?) and what coefficient class is being used (&lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;rational_class&lt;/code&gt;?) Infact, I checked this for our other polynomial types Flint and Piranha and it holds true over there too!&lt;/p&gt;

&lt;p&gt;So, what came to mind was that all the methods had to be reused! Thus I formed a &lt;code class="highlighter-rouge"&gt;USymEnginePoly&lt;/code&gt; class which acts as the &amp;#8216;SymEngine&amp;#8217; implementation of polynomials. You can pass it a &lt;code class="highlighter-rouge"&gt;BaseType&lt;/code&gt; from which it will deduce what type of polynomial would be constructed. Ideally, all you need to do now for implenting end polynomial classes is choose a implementation type (SymEngine or Piranha or Flint?) and a polynomial type (Integer or Rational?)&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s some pseudo code for the class structure aimed at&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the base
&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UPolyBase&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Basic&lt;/span&gt;

&lt;span class="c1"&gt;// super class for all non-expr polys, all methods which are
// common for all non-expr polys go here eg. degree, eval etc.
&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Cont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UNonExprPoly&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cont&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// the specialized non-expr classes
&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyBase&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UNonExprPoly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer_class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// and
&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;URatPolyBase&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UNonExprPoly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rational_class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// a specific implementation
// similar classes like UPiranhaPoly/UFlintPoly
&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;USymEnginePoly&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BaseType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// end classes (few examples)
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPoly&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;USymEnginePoly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UIntDict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIntPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;URatPoly&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;USymEnginePoly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;URatDict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URatPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyPir&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPiranhaPoly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;piranha&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;poly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIntPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;URatPolyFlint&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UFlintPoly&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;flint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;poly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URatPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here&amp;#8217;s a bonus picture!&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="http://srajangarg.github.io/assets/class.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I hope to get all the rational polynomials ready and tested in the next two to three days. The existing work can be seen in &lt;a href="https://github.com/symengine/symengine/pull/1028"&gt;#1028&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tata!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/07/08/GSoC-week-7.html</guid>
      <title>GSoC Week 7</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 08 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/07/08/GSoC-week-7.html</link>
      <description>&lt;p&gt;This week the focus was on the support code for the featherstone method.
I finished adding examples to the docstrings of every function I made. I
then wrote up test code for all of the new functions primarily focusing
on expected outputs but included some expected error messages for one of
the functions. Lastly I have coded up the functions themselves. This
work can be seen in &lt;a href="https://github.com/sympy/sympy/pull/11331"&gt;PR
#11331&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I continued following the PR I reviewed last week and give suggestions
as he worked on it. The PR is now in my opinion ready to be merged and
is a beneficial addition to the sympy codebase.&lt;/p&gt;

&lt;p&gt;The last thing I did this week was have a meeting about the presentation
that I will be aiding in on Monday. After the meeting I have spent some
time looking over my portions of the presentation and making sure I am
prepared to speak.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;Next week is the SciPy conference were I will be aiding in PyDy&amp;#8217;s
tutorial. Also I will be meeting with my mentor in person and during our
time there I suspect we will work on a variety of things from
Featherstone&amp;#8217;s articulated body method to the base class.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Open) Added docstrings to ast.py &lt;a href="https://github.com/sympy/sympy/pull/11333"&gt;PR
  #11333&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) [WIP] Featherstones EOM support &lt;a href="https://github.com/sympy/sympy/pull/11331"&gt;PR
  #11331&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://kshitij10496.github.io//2016/07/07/GSoC-Week-07/</guid>
      <title>GSoC Week 07 - The One With Generalised Periodicity</title>
      <author>Kshitij Saraogi(kshitij10496)</author>
      <pubDate>Thu, 07 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://kshitij10496.github.io//2016/07/07/GSoC-Week-07/</link>
      <description>&lt;p&gt;This week I updated my &lt;a href="https://github.com/sympy/sympy/pull/11277"&gt;PR#11277&lt;/a&gt; to find the period of a &lt;strong&gt;general function&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id="periodicity"&gt;&lt;strong&gt;&lt;em&gt;Periodicity&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In the past few weeks, I dedicated a lot of my time reading about the property of periodicity of a function.
Earlier, I had implemented a trivial(and restricted) functionality for this task.
This motivated me to study this topic as I planned to generalise the function.&lt;/p&gt;

&lt;p&gt;Here are my notes on periodicity which were the literature reference for the development of the method:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Note that &lt;code class="highlighter-rouge"&gt;2&amp;#960;&lt;/code&gt; is a period of &lt;code class="highlighter-rouge"&gt;sin(x)&lt;/code&gt;.
But &lt;code class="highlighter-rouge"&gt;sin(x)&lt;/code&gt; has many other periods, such as &lt;code class="highlighter-rouge"&gt;4&amp;#960;&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;6&amp;#960;&lt;/code&gt;, and so on. 
However, &lt;code class="highlighter-rouge"&gt;sin(x)&lt;/code&gt; has no (positive) period shorter than &lt;code class="highlighter-rouge"&gt;2&amp;#960;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;If &lt;code class="highlighter-rouge"&gt;p&lt;/code&gt; is a period of &lt;code class="highlighter-rouge"&gt;f(x)&lt;/code&gt;, and &lt;code class="highlighter-rouge"&gt;H&lt;/code&gt; is any function, then &lt;code class="highlighter-rouge"&gt;p&lt;/code&gt; is a period of &lt;code class="highlighter-rouge"&gt;H(f(x))&lt;/code&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;For sums and products, the general situation is complicated.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Let &lt;code class="highlighter-rouge"&gt;p&lt;/code&gt; be a period of &lt;code class="highlighter-rouge"&gt;f(x)&lt;/code&gt; and let &lt;code class="highlighter-rouge"&gt;q&lt;/code&gt; be a period of &lt;code class="highlighter-rouge"&gt;g(x)&lt;/code&gt;. 
Suppose that there are positive integers &lt;code class="highlighter-rouge"&gt;a&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;b&lt;/code&gt; such that &lt;code class="highlighter-rouge"&gt;ap=bq=r&lt;/code&gt;.&lt;br /&gt;
Then &lt;code class="highlighter-rouge"&gt;r&lt;/code&gt; is a period of &lt;code class="highlighter-rouge"&gt;f(x)+g(x)&lt;/code&gt;, and also of &lt;code class="highlighter-rouge"&gt;f(x)g(x)&lt;/code&gt;.&lt;br /&gt;
However, the point to note here is that &lt;code class="highlighter-rouge"&gt;r&lt;/code&gt; need not be the shortest period of &lt;code class="highlighter-rouge"&gt;f(x)+g(x)&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;f(x)g(x)&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;For example: 
The shortest period of &lt;code class="highlighter-rouge"&gt;sin(x)&lt;/code&gt; is &lt;code class="highlighter-rouge"&gt;2&amp;#960;&lt;/code&gt;, while the shortest period of &lt;code class="highlighter-rouge"&gt;(sinx)**2&lt;/code&gt; is &lt;code class="highlighter-rouge"&gt;&amp;#960;&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Another example: Let &lt;code class="highlighter-rouge"&gt;f(x)=sin(x)&lt;/code&gt;, and &lt;code class="highlighter-rouge"&gt;g(x)=&amp;#8722;sin(x)&lt;/code&gt;.
Each function has smallest period &lt;code class="highlighter-rouge"&gt;2&amp;#960;&lt;/code&gt;. But their sum is the &lt;code class="highlighter-rouge"&gt;0&lt;/code&gt;-function, which has every positive number &lt;code class="highlighter-rouge"&gt;p&lt;/code&gt; as a period!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;If &lt;code class="highlighter-rouge"&gt;p&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;q&lt;/code&gt; are periods of &lt;code class="highlighter-rouge"&gt;f(x)&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;g(x)&lt;/code&gt; respectively, then any common multiple of &lt;code class="highlighter-rouge"&gt;p&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;q&lt;/code&gt; is a period of &lt;code class="highlighter-rouge"&gt;H(f(x),g(x))&lt;/code&gt; 
for any function &lt;code class="highlighter-rouge"&gt;H(u,v)&lt;/code&gt;, in particular when &lt;code class="highlighter-rouge"&gt;H&lt;/code&gt; is addition, multiplication or division. However, it need not be the smallest period.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The sum of two periodic functions need not be periodic.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;For example: Let &lt;code class="highlighter-rouge"&gt;f(x)=sin(x)+cos(2&amp;#960;x)&lt;/code&gt;. 
The function is not periodic. &lt;br /&gt;
The problem is that &lt;code class="highlighter-rouge"&gt;1&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;2&amp;#960;&lt;/code&gt; are incommensurable. There do not exist positive integers &lt;code class="highlighter-rouge"&gt;a&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;b&lt;/code&gt; 
such that &lt;code class="highlighter-rouge"&gt;(a)(1)=(b)(2&amp;#960;)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="issues"&gt;&lt;strong&gt;&lt;em&gt;Issues&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I am abstracting the details of implementation so as not to make the post even further boring.&lt;/p&gt;

&lt;p&gt;During the period of development, I faced few issues and had a lot of queries to make.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The new implementation returns a value which might not be the &lt;strong&gt;fundamental period&lt;/strong&gt; of the given function.
The previous implementation, though limited, returned the fundamental period of the given function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The ability to find the LCM of irrationals.
We will be dealing with the iconic &lt;code class="highlighter-rouge"&gt;&amp;#960;&lt;/code&gt;(and its multiples) in many of our cases(as is evident from the example above).
Currently, we donot have the functionality to find the LCM of
irrational numbers. A method needs to be developed to handle this issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Issue with automatic simplification while verifying the result.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;After Thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am looking forward to addressing all these issues in tonight&amp;#8217;s meeting.
Apart from that, implementing this was a lot of fun.
I got to learn about inheritance and abstraction while implementing instance methods for periodic functions.&lt;/p&gt;

&lt;p&gt;Hopefully, all my effort doesn&amp;#8217;t go in vain.&lt;/p&gt;

&lt;p&gt;Till next time !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Sixth-Week</guid>
      <title>GSoC Sixth Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Thu, 07 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Sixth-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;After Distinct degree factorization being merged in this &lt;a href="https://github.com/symengine/symengine/pull/995"&gt;PR&lt;/a&gt;, I started working on Equal degree factorization.
&lt;br /&gt;
Following up from previous example, we had:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x**5 + 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x**10 + x**5 + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;as distinct degree factors.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now we run Equal degree factorization on both of the above given polynomial, from
&lt;code class="highlighter-rouge"&gt;
x**10 + x**5 + 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We get:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x**2 + x + 1
x**2 + 3x + 9
x**2 + 4x + 5
x**2 + 5x + 3
x**2 + 9x + 4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And for:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x**5 + 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We get:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x + 2
x + 6
x + 7
x + 8
x + 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See that the first one gave degree two factors and the second one gave degree one factors.&lt;/p&gt;

&lt;p&gt;I have implemented the algorithm in &lt;a href="https://github.com/symengine/symengine/pull/1026"&gt;this&lt;/a&gt; PR.
&lt;br /&gt;
Combining the distinct degree and equal degree factorization, we get the factors of a polynomial in finite field.
For factorizing a polynomial in integral fielf we need to convert it to some finite field polynomial, factor it and then lift it back to integral field. This is &lt;a href="https://en.wikipedia.org/wiki/Hensel%27s_lemma"&gt;Hensel&amp;#8217;s Lifting&lt;/a&gt;, I will write about it in the coming blog posts.
&lt;br /&gt;&lt;br /&gt;
I am sorry that I couldn&amp;#8217;t work this week as I was at &lt;em&gt;&lt;a href="http://www.robocup2016.org/en/"&gt;Robo Cup&lt;/a&gt;&lt;/em&gt;. Looking forward to a good week ahead.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-7</guid>
      <title>Coding Period Week 7</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Mon, 04 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-7/</link>
      <description>&lt;p&gt;&lt;strong&gt;ImageSet.put_values() :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11343"&gt;#11343&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;After the discussion Harsh told that it is better to use like &lt;code class="highlighter-rouge"&gt;imageset.lamda(values_for_lambda_var)&lt;/code&gt; directly, also don&amp;#8217;t make lambda variables public , it should be local and before doing &lt;code class="highlighter-rouge"&gt;imageset.lamda(values_for_lambda_var)&lt;/code&gt; this one need to check whether values are in ` base_set` or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can see the previous code here : &lt;a href="https://gist.github.com/Shekharrajak/d70a36c95eefaca5c684497e039c5632"&gt;gist&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I updated the docs stating how to put certain values in ImageSet lambda variables.(reverted my changes and edited the ImageSet docs in the PR.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Continue nonlinsolve :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11111"&gt;#11111&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How Intersections and Complements are handled :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;see these examples:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In [ ]: intr = Intersection(FiniteSet(x), Interval(1,10))

In [ ]: comp = Complement(FiniteSet(x), Interval(1,10))

In [ ]: intr
Out[ ]: [1, 10] &amp;#8745; {x}

In [ ]: comp
Out[ ]: {x} \ [1, 10]

In [ ]: type( Intersection(comp, Interval(1,11)))
Out[ ]: sympy.sets.sets.Complement

In [ ]: type(Complement(intr, Interval(1,2)))
Out[ ]: sympy.sets.sets.Complement


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So first handling the Complements and then intersection will be checked in solveset soln.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;nonlinsolve&lt;/code&gt; can handle simple trigonometric system of equations but when complex equations
is used then it will return &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; since &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; trig solver is not smart enough right now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trying to break the code into the functions to make the code better.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue Simplified Trig soln&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11188"&gt;#11188&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I was getting problem in ImageSet union when you run test. Sometimes it pass all the cases but not always.
I found the problem (most probably because order of args in union.reduce is not always same for all the python version
I am using FiniteSet so I hope it is good way to handle this.) Now it passes all the checks all time.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Meanwhile :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I found that &lt;code class="highlighter-rouge"&gt;Mod&lt;/code&gt; is not defined for complex numbers. e.g.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In [1]: g = Mod(-log(3), 2*I*pi)

In [2]: g
Out[2]: Mod(-log(3), 2&amp;#8901;&amp;#8520;&amp;#8901;&amp;#960;)

In [3]: simplify(g)
Out[3]: Mod(-log(3), 2&amp;#8901;&amp;#8520;&amp;#8901;&amp;#960;)

In [4]: simplify(g)
Out[4]: Mod(-log(3), 2&amp;#8901;&amp;#8520;&amp;#8901;&amp;#960;)

In [5]: g2 = Mod(-log(3), 2*pi)

In [6]: simplify(g2)
Out[6]: -log(3) + 2&amp;#8901;&amp;#960;

In [7]: simplify(Mod(I,I))
Out[7]: 0

In [8]: simplify(Mod(2*I,I))
Out[8]: 0

In [9]: simplify(Mod(2*I,3*I))
Out[9]: 5&amp;#8901;&amp;#8520;

In [10]: simplify(Mod(2*I,1+3*I))
Out[10]: Mod(2&amp;#8901;&amp;#8520;, 1 + 3&amp;#8901;&amp;#8520;)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Need to implement &lt;code class="highlighter-rouge"&gt;Mod&lt;/code&gt; for complex number as well. There is concept og Gaussian Integers&lt;/p&gt;

&lt;p&gt;Some resources I found is this :
&lt;a href="http://math.stackexchange.com/questions/274694/modulo-complex-number"&gt;link1&lt;/a&gt;,
&lt;a href="http://www.freemathhelp.com/forum/threads/76383-Modulo-of-complex-numbers"&gt;link2&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Gaussian_integer"&gt;link3&lt;/a&gt;
&lt;a href="http://fermatslasttheorem.blogspot.in/2005/06/division-algorithm-for-gaussian.html"&gt;link4&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One can see the issue &lt;a href="https://github.com/sympy/sympy/issues/11391"&gt;11391&lt;/a&gt; for detail discussion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tried to fix the bug of &lt;code class="highlighter-rouge"&gt;is_zero_dimensional&lt;/code&gt; in this PR &lt;a href="https://github.com/sympy/sympy/pull/11371"&gt;#11371&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/07/03/Generators-Poly-Conversions</guid>
      <title>Finding Generators &amp; Polynomial Conversions</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sun, 03 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/07/03/Generators-Poly-Conversions/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;This week I continued my work from last week, but in a cleaner and structured fashion. The PR with last week&amp;#8217;s work was closed in favour of a new PR, with better and scalable code. I&amp;#8217;ll briefly explain how the functionality is implemented and the main ideas behind it. All the work is in &lt;a href="https://github.com/symengine/symengine/pull/1003"&gt;#1003&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="finding-generators"&gt;Finding Generators&lt;/h3&gt;

&lt;p&gt;You can refer to last week&amp;#8217;s post to know what a generator for a polynomial is at a preliminary level. An expression may have any number of generators, but our job is to get the least number of generators which will be able to construct the given expression. The only rule is that a generator cannot be a &lt;code class="highlighter-rouge"&gt;Number&lt;/code&gt; (ie &lt;code class="highlighter-rouge"&gt;Rational&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;Integer&lt;/code&gt;). So &lt;code class="highlighter-rouge"&gt;sqrt(3)&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;pi&lt;/code&gt; can be generators but &lt;code class="highlighter-rouge"&gt;2&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;1/2&lt;/code&gt; can&amp;#8217;t.&lt;/p&gt;

&lt;p&gt;Initially, the approach I was trying out was not general (as I catered to only the Univariate Int case), and expanding it to other polynomials would prove to be immensely difficult. Isuru suggested that the function should return all the possible generators. This will be the most general case for this function, and we can adapt to specific cases based on how many / which generators the function returns. I will try and summarize how the function works at a high level.&lt;/p&gt;

&lt;p&gt;If the expression passed to &lt;code class="highlighter-rouge"&gt;find_gen&lt;/code&gt; is a&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;Add&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Mul&lt;/code&gt; : We can just call &lt;code class="highlighter-rouge"&gt;find_gen&lt;/code&gt; recursively on each of the expressions being added/multiplied. &lt;code class="highlighter-rouge"&gt;x + y&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;x*y&lt;/code&gt; will return both &lt;code class="highlighter-rouge"&gt;x&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;y&lt;/code&gt; as the generators. This follows from the fact that polynomials can be multiplied or added up to give the resultant polynomial.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;Number&lt;/code&gt; : Do nothing, as numbers can never act as generators of polynomials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;Pow&lt;/code&gt; : Few cases arise in if the expression is a &lt;code class="highlighter-rouge"&gt;Pow&lt;/code&gt;. If the exponent is a positive integer, it suffices to find the generators of only the base of the expression. If it is a negative integer, we update the current generator set with &lt;code class="highlighter-rouge"&gt;base**(-1)&lt;/code&gt;. For eg.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the exponent is not an integer, the situation becomes a little complicated. It would seem intuitive that the generators in this case would be the base powered to the generators of the exponent. Like so,&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would seem to be working, but actually the same &lt;code class="highlighter-rouge"&gt;find_gen&lt;/code&gt; function cannot be used to get the generators of the exponent expression. The &lt;code class="highlighter-rouge"&gt;find_gen&lt;/code&gt; works in a different way once we are &amp;#8220;inside&amp;#8221; an exponent. Take for example :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Incorrect
&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="c1"&gt;// Correct
&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;find_gen_pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;find_gen_pow&lt;/code&gt; is another function which returns generators keeping in mind that the current expression it is dealing with is actually the exponent of another expression. So, it&amp;#8217;s behaviour varies from the simple &lt;code class="highlighter-rouge"&gt;find_gen&lt;/code&gt;. Here is another example :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Incorrect
&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="c1"&gt;// Correct
&lt;/span&gt;&lt;span class="n"&gt;find_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;find_gen_pow&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;Basic&lt;/code&gt; : For all other structures like &lt;code class="highlighter-rouge"&gt;Symbol&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Function&lt;/code&gt;, they themselves act as generators of the polynomial. We just need to update the generator set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is to be kept in mind that whenever we obtain a new potential generator, we update the current generator set. This may lead to modification of an already existing generator or add in a new one. This method thus takes care of some cases, not done by SymPy. A similar updation rule is followed for &lt;code class="highlighter-rouge"&gt;find_gen_pow&lt;/code&gt; where this is done on the coefficients of each expression instead of their powers.&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;find_gen&lt;/code&gt; :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// addition
&lt;/span&gt;&lt;span class="n"&gt;update_gen_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// modification
&lt;/span&gt;&lt;span class="n"&gt;update_gen_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// no change
&lt;/span&gt;&lt;span class="n"&gt;update_gen_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;find_gen_pow&lt;/code&gt; :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c1"&gt;// "find_gen_pow"
&lt;/span&gt;&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// addition
&lt;/span&gt;&lt;span class="n"&gt;update_gen_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// modification
&lt;/span&gt;&lt;span class="n"&gt;update_gen_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// no change
&lt;/span&gt;&lt;span class="n"&gt;update_gen_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gen_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have a short description on the storage of these generators in the PR description and subsequent comments. Please do have a look!&lt;/p&gt;

&lt;h3 id="polynomial-conversions"&gt;Polynomial Conversions&lt;/h3&gt;

&lt;p&gt;The next half of the week&amp;#8217;s work involved actually converting a &lt;code class="highlighter-rouge"&gt;Basic&lt;/code&gt; into a polynomial. The API is too look as follows&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;RCP&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Basic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;UIntPoly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_basic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Basic&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;RCP&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Basic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;UIntPoly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_basic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Basic&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Basic&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The user can either supply a generator or one will automatically be deduced and used. The functions will throw of exactly one generator is not found, as we are dealing with univariate polynomials. Initially, I planned to write two different functions for &lt;code class="highlighter-rouge"&gt;UIntPoly&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;UExprPoly&lt;/code&gt; conversions, but soon I realized that most of the code was going to be identical. So, I formed a template function base with most of the common code, while the specific visitors inherit from this template base class with special methods.&lt;/p&gt;

&lt;p&gt;The actual conversion was not too difficult, it just had to be broken down into cases like the &lt;code class="highlighter-rouge"&gt;find_gen&lt;/code&gt; problem. I leave it to the reader to try and theorize how this can be done. For eg. Imagine an &lt;code class="highlighter-rouge"&gt;Add&lt;/code&gt;, you can call &lt;code class="highlighter-rouge"&gt;b2poly&lt;/code&gt; on each expression added and add up the resulting polynomials. The code right now is scalable, and if we add in more polynomial classes like &lt;code class="highlighter-rouge"&gt;URatPoly&lt;/code&gt; there will be no issues in adding them in.&lt;/p&gt;

&lt;h3 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Templatized &lt;code class="highlighter-rouge"&gt;pow_upoly&lt;/code&gt; so that it can be used by any general polynomial class. Also removed some redundant code in the &lt;code class="highlighter-rouge"&gt;ExpandVisitor&lt;/code&gt; related to said function. Can be seen in &lt;a href="https://github.com/symengine/symengine/pull/1010"&gt;#1010&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was just testing out how the parser is working out with the basic to polynomial conversions. It is working very seamlessly, constructing polynomials has never been easier! It&amp;#8217;s as simple as&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2*(x+1)**10 + 3*(x+2)**5"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIntPoly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_basic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"((x+1)**5)*(x+2)*(2*x + 1)**3"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIntPoly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_basic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Laters!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=491</guid>
      <title>GSoC: Week 6</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sat, 02 Jul 2016 20:00:42 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/07/02/gsoc-week-6/</link>
      <description>&lt;p&gt;This week was majorly focused on fixing issues. Thanks to Ondrej, Aaron and Kalevi for testing the module and pointing them out. Some of the issues required a new functionality to be added and some were just plain technical bugs.&lt;/p&gt;
&lt;p&gt;I started by writing a method which allows the user to change the point &lt;code&gt;x0&lt;/code&gt;&amp;#160;where the initial conditions are stored. Firstly it tries converting to SymPy and then convert back to holonomic i.e.&amp;#160;&lt;code&gt;from_sympy(self.to_sympy(), x0=b)&lt;/code&gt;. If the process fails somewhere then the method numerically integrates the differential equation to the point &lt;code&gt;b&lt;/code&gt;. This method was then used in&amp;#160;adding support for initial conditions at different points in addition and multiplication. Issues are &amp;#160;&lt;a href="https://github.com/sympy/sympy/issues/11292"&gt;#11292&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/issues/11293"&gt;#11293&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that I implemented differentiation for a holonomic function. The algorithm is described &lt;a href="https://github.com/sympy/sympy/pull/11297#issuecomment-229461674"&gt;here&lt;/a&gt;. A limitation is that sometimes it&amp;#8217;s not able to compute sufficient initial conditions (mainly if the point &lt;code&gt;x0&lt;/code&gt;&amp;#160;is singular).&lt;/p&gt;
&lt;p&gt;There was also a bug in&amp;#160;&lt;code&gt;to_sequence()&lt;/code&gt;&amp;#160;method. Apparently, whenever there weren&amp;#8217;t sufficient initial conditions for the recurrence relation, &amp;#160;&lt;code&gt;to_sympy()&lt;/code&gt;&amp;#160;would fail. So I changed it to make &lt;code&gt;to_recurrence()&lt;/code&gt;&amp;#160;return unknown symbols &lt;code&gt;C_j&lt;/code&gt;&amp;#160;, where &lt;code&gt;C_j&lt;/code&gt; representing the coefficient of &lt;code&gt;x^j&lt;/code&gt;&amp;#160;in the power series. So now even if we don&amp;#8217;t have enough initial conditions,&amp;#160;&lt;code&gt;to_sympy()&lt;/code&gt;&amp;#160;will return an answer with arbitrary symbols in it. This is also useful in power series expansion.&lt;/p&gt;
&lt;p&gt;Earlier the method &lt;code&gt;to_sympy()&lt;/code&gt;&amp;#160;would only work if initial conditions are stored at &lt;code&gt;0&lt;/code&gt;&amp;#160;which is a big limitation. Thanks to Kalevi for the solution we now can find the &lt;code&gt;hyper()&lt;/code&gt;&amp;#160;representation of a holonomic function for&amp;#160;any point &lt;code&gt;x0&lt;/code&gt;&amp;#160;.(of course only if it exists.) This is further used by &lt;code&gt;to_sympy()&lt;/code&gt;&amp;#160;to convert to expressions. There is also something interesting Kalevi said &amp;#8220;The best points to search for a hypergeometric series are the regular singular points&amp;#8221;. I observed this turned out to be true a lot of times. We should keep this in mind when using &lt;code&gt;to_sympy()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Later I added functionality to convert an algebraic function of the form &lt;code&gt;p^(m/n)&lt;/code&gt;&amp;#160;, for a polynomial&amp;#160;&lt;code&gt;p&lt;/code&gt;&amp;#160;. Thanks to Aaron and Ondrej for the solution. Also&amp;#160;added custom &lt;code&gt;Exception&lt;/code&gt;&amp;#160;to use in the holonomic module. Some small bugs&amp;#160;&lt;a href="https://github.com/sympy/sympy/issues/11319"&gt;#11319&lt;/a&gt;,&amp;#160;&lt;a href="https://github.com/sympy/sympy/issues/11316"&gt;#11316&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/issues/11318"&gt;11318&lt;/a&gt;&amp;#160;were also fixed.&lt;/p&gt;
&lt;p&gt;Currently I am trying&amp;#160;to make &lt;code&gt;from_sympy()&lt;/code&gt;&amp;#160;work&amp;#160;if&amp;#160;additional &lt;code&gt;symbols&lt;/code&gt; are given in the expression and also support other types of fields (&lt;code&gt;floats&lt;/code&gt;, &lt;code&gt;rationals&lt;/code&gt; (default right now), &lt;code&gt;integers&lt;/code&gt;&amp;#160; ). This involves extending the ground domain of the Polynomials used internally. Hopefully this should&amp;#160;be done in the next couple of days.&lt;/p&gt;
&lt;p&gt;The unmerged fixes are at&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11330"&gt;#11330&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/491/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/491/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=491&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=688</guid>
      <title>GSoc Week 6</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 01 Jul 2016 18:21:44 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/01/gsoc-week-6/</link>
      <description>&lt;p style="text-align: justify;"&gt;Hi there! It&amp;#8217;s been six weeks into the coding period, and it marks the half of GSoC.&amp;#160;The Midterm evaluations have been done now and I have passed the mid-term evaluations. I am very much thankful to my mentors. This week I was having some physical illness due to this reason I was not able to attend the meeting with my mentors. This affected my workflow too. I was not able to work for almost 3 days. I will try to compensate&amp;#160;the time lag by working some extra hours in the upcoming days.&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style="text-align: justify;"&gt;Until last week, I have completed the implementation of&amp;#160;&lt;em&gt;PointLoad&amp;#160;&lt;/em&gt;and &amp;#160;&lt;em&gt;DistributedLoad.&amp;#160;&lt;/em&gt;This week I started implementing the class for&amp;#160;the principle object of the Beam Bending problems. I have implemented the Beam class. The work is not completed yet. I have initiated the class with &lt;em&gt;length&lt;/em&gt;, &lt;em&gt;Young&amp;#8217;s Modulus&lt;/em&gt; and &lt;em&gt;Moment of Inertia.&amp;#160;&lt;/em&gt;I have to discuss with the mentor about the mutability of this class.&lt;/li&gt;
&lt;li style="text-align: justify;"&gt;&lt;em&gt;&lt;strong&gt;BoundaryConditions&lt;/strong&gt; &lt;/em&gt;:- It is a public method of the beam class which takes the boundary conditions of the beam bending problem as input. I found out that there are only three types of boundary conditions : Deflection, Shear and Moment. So, I made them input in the form of keyword arguments and for each key, the value would be a list of tuples where each of the tuples would contain location and value in this format : (location, value). This method returns the boundary conditions in the form of a python dictionary. For example: &amp;#160;Let a problem have boundary conditions as: Moment(x = 0) = 1, Deflection(x = 0) = 0,&amp;#160;Deflection(x = 4) = 0. Then the API is:&lt;/li&gt;
&lt;li style="text-align: justify;"&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import Symbol
&amp;gt;&amp;gt;&amp;gt; E = Symbol('E')
&amp;gt;&amp;gt;&amp;gt; I = Symbol('I')
&amp;gt;&amp;gt;&amp;gt; b = Beam(4, E, I)
&amp;gt;&amp;gt;&amp;gt; b.BoundaryConditions(moment = [(0, 1)], deflection = [(0, 0), (4, 0)])
{'deflection': &lt;/code&gt;&lt;code&gt;[(0, 0), (4, 0)]&lt;/code&gt;&lt;code&gt;, 'moment': &lt;/code&gt;&lt;code&gt;[(0, 1)]}&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I will try to get&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;&amp;#160;merged.&lt;/li&gt;
&lt;li&gt;Modify the Beam class with new methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/688/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/688/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=688&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/07/01/GSoC-week-6.html</guid>
      <title>GSoC Week 6</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 01 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/07/01/GSoC-week-6.html</link>
      <description>&lt;p&gt;The main theme of this week is Featherstone&amp;#8217;s method. I have finished reading
all of the text book that I feel I need to in order to finish my project. After
reading I realize that I have been improper about addressing my project.
Instead of saying I am introducing Featherstone&amp;#8217;s method to SymPy, it would be
more accurate to say that I am introducing one of Featherstone&amp;#8217;s methods. The
book introduced two equations of motion generation methods for open loop
kinematic trees and one method for a closed loop kinematic tree (I stopped
reading after chapter 8 and so there may have been even more methods). For my
project I have decided to focus on the articulated body method of equation of
motion generation for kinematic trees. This method is presented as being more
efficient than the composite body method and the closed loop method seems
rather complicated.&lt;/p&gt;

&lt;p&gt;With this in mind I began digging deeper into the articulated body method and
better learning how it works. With this mindset I went over the three passes
that the method uses and looked for places where code would be needed that
isn&amp;#8217;t specifically part of the method. I compiled a list of these functions and
have written docstrings and presented them in &lt;a href="https://github.com/sympy/sympy/pull/11331"&gt;PR
#11331&lt;/a&gt;. The support code for the
method includes operations for spatial (6D) vectors and a function and library
for extracing relevant joint information.&lt;/p&gt;

&lt;p&gt;This week I reviewed &lt;a href="https://github.com/sympy/sympy/pull/11333"&gt;PR #11333&lt;/a&gt;.
The pull request adds docstrings to method that did not have them previously
which is a big plus but the docstrings that were added were minimal and vague.
I asked that the contributer add more information to the docstrings and he said
he will get to it.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;Next week I plan on furthering my work on the articulated body method. I hope
to have the support functions completely written up and to begin writing the
equation of motion generator itself. These plans may be set aside, however, as
my most active mentor will be coming back from traveling next week and so work
may resume on the base class.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Open) Added docstrings to ast.py &lt;a href="https://github.com/sympy/sympy/pull/11333"&gt;PR
  #11333&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) [WIP] Featherstones EOM support &lt;a href="https://github.com/sympy/sympy/pull/11331"&gt;PR
  #11331&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
