<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">https://divyanshu132.github.io//gsoc-week-10</guid>
      <author>Divyanshu Thakur (divyanshu132)</author>
      <title>Divyanshu Thakur (divyanshu132): GSoC 2019 - Week 10 - Induced Pcgs for polycyclic subgroups</title>
      <pubDate>Mon, 05 Aug 2019 00:00:00 GMT</pubDate>
      <link>https://divyanshu132.github.io//gsoc-week-10</link>
      <description>&lt;p&gt;The tenth week of coding period has ended and a new PR&lt;a href="https://github.com/sympy/sympy/pull/17317"&gt;sympy/sympy#17317&lt;/a&gt; has been introduced. The PR implements induced Pcgs and exponent vector for polycyclic subgroups with respect to the original pcgs of the group.
Below is an example to show the functionality.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics import *
&amp;gt;&amp;gt;&amp;gt; S = SymmetricGroup(8)
&amp;gt;&amp;gt;&amp;gt; G = S.sylow_subgroup(2)
&amp;gt;&amp;gt;&amp;gt; gens = [G[0], G[1]]
&amp;gt;&amp;gt;&amp;gt; PcGroup = G.polycyclic_group()
&amp;gt;&amp;gt;&amp;gt; collector = PcGroup.collector
&amp;gt;&amp;gt;&amp;gt; ipcgs = collector.induced_pcgs(gens)
&amp;gt;&amp;gt;&amp;gt; [gen.order() for gen in ipcgs]
[2, 2, 2]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Further it can also be used to implement &lt;code class="highlighter-rouge"&gt;Canonical polycyclic sequence&lt;/code&gt; which can be used to check if two subgroups of polycyclic presented group &lt;code class="highlighter-rouge"&gt;G&lt;/code&gt; are equal or not.&lt;/p&gt;

&lt;p&gt;For the next week I&amp;#8217;ll try to complete the documentation work on polycyclic groups and open a PR for the same.&lt;/p&gt;

&lt;p&gt;Till then, good byee..&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shubhamkjha.github.io/2019/07/31/GSoC-Week-9</guid>
      <author>Shubham Kumar Jha (ShubhamKJha)</author>
      <title>Shubham Kumar Jha (ShubhamKJha): GSoC 2019: Week 9</title>
      <pubDate>Wed, 31 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://shubhamkjha.github.io/2019/07/31/GSoC-Week-9.html</link>
      <description>&lt;p&gt;I spent most of this week getting &lt;a href="https://github.com/sympy/sympy/pull/17144"&gt;#17144&lt;/a&gt; ready to be merged. I had to change a lot of things from the last attempt. One of such was an attempt on &lt;strong&gt;early encoding&lt;/strong&gt;, I had tried it on &lt;strong&gt;Literals&lt;/strong&gt;. They were eventually going to be encoded so I tried to do this when &lt;strong&gt;Literals&lt;/strong&gt; were created only. But as Aaron suggested, my approach had left encodings in the global space and hence could leak memory. During the week, I tried to attach encoding to the &lt;strong&gt;CNF&lt;/strong&gt; object itself but it would have needed a lot of refactoring, since &lt;strong&gt;CNF&lt;/strong&gt; objects interacted with other such objects. So, after some attempts, at the end I left the encoding to be done at last in &lt;strong&gt;EncodedCNF&lt;/strong&gt; object. Currently, this is ready to be merged.&lt;/p&gt;

&lt;p&gt;For the coming weeks, I would try to improve over this.&lt;/p&gt;

&lt;p&gt;This was also the week for second monthly evaluation and I feel happy to announce that I passed it. From this week my college has also started but I am still able to give the required time to this project and complete it.&lt;/p&gt;

&lt;p&gt;Will keep you updated. Thank you !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=74</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-9- Analyzing the draw() function</title>
      <pubDate>Mon, 29 Jul 2019 05:43:20 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/29/gsoc19-week-9-analyzing-the-draw-function/</link>
      <description>&lt;p&gt;With the
end of this week the third phase officially ends. &lt;/p&gt;



&lt;p&gt;There has been some discussions in the &lt;a href="https://github.com/sympy/sympy/pull/17240"&gt;PR #17240&lt;/a&gt; which implements the &lt;strong&gt;draw() &lt;/strong&gt;function. We might change the name of the function to &lt;strong&gt;plot() &lt;/strong&gt;which is more consistent with the previous beam methods &lt;strong&gt;plot_shear_force()&lt;/strong&gt;, &lt;strong&gt;plot_bending_moment(), &lt;/strong&gt;etc.&lt;/p&gt;



&lt;p&gt;Another discussion was about making this beam diagram a part of the &lt;strong&gt;plot_loading_results(), &lt;/strong&gt;which basically intends to plot all the beam related plots. Although currently the beam diagram uses &lt;strong&gt;matplotlib &lt;/strong&gt;as an external module, whereas the &lt;strong&gt;plot_loading_results()&lt;/strong&gt; uses &lt;strong&gt;PlotGrid&lt;/strong&gt; which is Sympy&amp;#8217;s internal functionality. So it would be a bit tricky to merge those two.&lt;span id="more-74"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;We also discussed the idea or rather the possibility of directly making use of SymPy&amp;#8217;s own plot to create a beam diagram. SymPy&amp;#8217;s &lt;strong&gt;plot() &lt;/strong&gt;is capable to plotting Singularity functions, so the load applied on the beam can also be plotted using &lt;strong&gt;sympy.plot() &lt;/strong&gt;as beam.load is indeed in terms of singularity function. But there is a problem when it comes to point loads and moment loads as the are in terms singularity function of negative order (or exponent). Not sure whether the sympy plot for singularity functions of negative order is plotted correctly, but the current plot won&amp;#8217;t help us in drawing point loads and moment loads. We might have to deal with it separately.&lt;/p&gt;



&lt;p&gt;I have
opened a discussion in the &lt;a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/gmBNI-sffls"&gt;mailing
list&lt;/a&gt; regarding whether the plot is correct for singularity functions of negative
order, or what else should be done in order to get it corrected.&lt;/p&gt;



&lt;p&gt;Also, it will be difficult to plot a rectangle (for making beam) and markers (for making supports) via sympy.plot(). One idea is to go with the &lt;strong&gt;_backend&lt;/strong&gt; attribute of sympy.plot() which helps in directly using the &lt;strong&gt;backend &lt;/strong&gt;(i.e. matplotlib backend). I will have a look over it.&lt;/p&gt;



&lt;p&gt;Of
course if the beam diagram is made using SymPy&amp;#8217;s own plot it would surely be
preferred but for that we also need work on &lt;strong&gt;sympy.plot()&lt;/strong&gt; as currently it is limited to certain functionalities.&lt;/p&gt;



&lt;p&gt;From the
next week I will be starting with the last phase of implementing a Truss structure
and its respective calculations.&lt;/p&gt;



&lt;p&gt;Since only last few weeks are left, I think I will be able to make a draft PR for the last phase implementation by the end of the next week. And then we would only be left with minor things and leftovers of the previous phases.&lt;/p&gt;



&lt;p&gt;Also, I am glad to share that I was able to pass the second evaluations. So once again thank you mentors for all your support and guidance!&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Starting phase-IV&amp;nbsp; implementations&lt;/li&gt;&lt;li&gt;Simultaneously working and discussing previous
PR&amp;#8217;s.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will
keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://czgdp1807.github.io/week_9</guid>
      <author>Gagandeep Singh (czgdp1807)</author>
      <title>Gagandeep Singh (czgdp1807): Week 8 - Lots of reviews</title>
      <pubDate>Mon, 29 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://czgdp1807.github.io/week_9/</link>
      <description>&lt;p&gt;This week I recieved a lot of reviews from the members of community on my various PRs and this has formed the base of the work for the next week. Let me share some of those reviews with you.&lt;/p&gt;

&lt;p&gt;As I told you that the PR &lt;a href="https://github.com/sympy/sympy/pull/17146"&gt;#17146&lt;/a&gt; was pending for reviews. Well, I received a lot of comments from &lt;a href="https://github.com/oscarbenjamin"&gt;@oscarbenjamin&lt;/a&gt; and &lt;a href="https://github.com/smichr"&gt;@smichr&lt;/a&gt; on pretty printing of symbolic &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt;, the way tests are written, about &lt;code class="highlighter-rouge"&gt;inf&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;sup&lt;/code&gt; of &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt;. This in turn helped me to discover bugs in other features of &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt;, like, &lt;code class="highlighter-rouge"&gt;reversed&lt;/code&gt;. In the following week, I will work on this stuff and will correct the things. Now moving on to the random matrices, i.e., the PR &lt;a href="https://github.com/sympy/sympy/pull/17174"&gt;#17174&lt;/a&gt; has been merged but more work is to be done for &lt;code class="highlighter-rouge"&gt;Matrix&lt;/code&gt; with entries as random variables. In fact, I studied about expressions of random matrices and summarised the results &lt;a href="https://github.com/sympy/sympy/pull/17174#issuecomment-514985333"&gt;here&lt;/a&gt;. Though the findings suggest specific algorithms for specific expressions like sum. I am still looking for a more generalized technique and will update you if found any.&lt;/p&gt;

&lt;p&gt;So, coming to the learning aspect. This week I learnt about the importance of exhaustive and systematic tests. The tests which I wrote for symbolic &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; aren&amp;#8217;t so systematic and robust. I have found a way to improve them from &lt;a href="https://github.com/sympy/sympy/pull/17146#discussion_r307971324"&gt;this comment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all for now, signing off!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://divyanshu132.github.io//gsoc-week-9</guid>
      <author>Divyanshu Thakur (divyanshu132)</author>
      <title>Divyanshu Thakur (divyanshu132): GSoC 2019 - Week 9 - Merged Polycyclic groups</title>
      <pubDate>Mon, 29 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://divyanshu132.github.io//gsoc-week-9</link>
      <description>&lt;p&gt;Hello everyone, the ninth week of coding period has ended and there is a really good news the polycyclic group PR &lt;a href="https://github.com/sympy/sympy/pull/16991"&gt;sympy/sympy#16991&lt;/a&gt; that we were working from the last one and half months is finally merged. This week I didn&amp;#8217;t do that much work except organizing different methods and fixing small issues in the above pr to get it merged.&lt;/p&gt;

&lt;p&gt;There has been a lot of rearrangement of methods, where most of the methods were moved to the class &lt;code class="highlighter-rouge"&gt;Collector&lt;/code&gt; from the class &lt;code class="highlighter-rouge"&gt;PolycyclicGroup&lt;/code&gt;. Now, we do not need free symbols in-hand, they can be computed by the Collector if not provided by the user. There are few more things which are changed like relative order is computed in the course of polycyclic sequence and series computation. For better look one can go through the above Pr.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m hopping to implement few things next week which are mentioned below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Induced polycyclic sequence for a subgroup.&lt;/li&gt;
  &lt;li&gt;Get started with writing docs for polycyclic groups.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till then, good byee..&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sc0rpi0n101.github.io/2019/07/week-9-its-the-evaluation-week/</guid>
      <author>Nikhil Maan (Sc0rpi0n101)</author>
      <title>Nikhil Maan (Sc0rpi0n101): Week 9: It's the Evaluation Week!!</title>
      <pubDate>Sun, 28 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://sc0rpi0n101.github.io/2019/07/week-9-its-the-evaluation-week/</link>
      <description>&lt;p&gt;Welcome everyone, this is your host Nikhil Maan aka Sc0rpi0n101 and this time we will be talking about the second evaluation for GSoC. The main objective of the week was to get the Fortran parser ready.
 The Fortran Parser Traivs and the Tests LFortran Evaluation!!! The meeting What Now  The Fortran Parser The Fortran parser is finally complete after shifting to using SymPy&amp;rsquo;s codegen AST. It can now parser all the stuff that the parser could do before shifting.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://jmig5776.github.io//gsoc-week-9</guid>
      <author>Jogi Miglani (jmig5776)</author>
      <title>Jogi Miglani (jmig5776): GSoC 2019 - Week 9</title>
      <pubDate>Sat, 27 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://jmig5776.github.io//gsoc-week-9</link>
      <description>&lt;p&gt;This was the eigth week meeting with the GSoC mentors which was scheduled on
Saturday 27th July, 2019 between 1:30 - 2:30 PM (IST). Me, Yathartha and Amit
were the attendees of the meeting.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Discussing previous week&amp;#8217;s progress&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Progress of &lt;code class="highlighter-rouge"&gt;_solve_modular&lt;/code&gt;:- In PR &lt;a href="https://github.com/sympy/sympy/pull/16976"&gt;#16976&lt;/a&gt;
I implemented the basic design of &lt;code class="highlighter-rouge"&gt;_solve_modular&lt;/code&gt;. Some very good suggestion by
Yathartha for creating &lt;code class="highlighter-rouge"&gt;_invert_modular&lt;/code&gt; were very helpful. Now basically the
&lt;code class="highlighter-rouge"&gt;_solve_modular&lt;/code&gt; first do preprocessing and invert it and then find solution and
in final domain intersection takes place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Progress of ImageSet Union:- In PR &lt;a href="https://github.com/sympy/sympy/pull/17079"&gt;#17079&lt;/a&gt;
I will be implementing an algorithm based on heurestics for performing ImageSet
Union this week. Basic code is being already written for defining a function and
only algorithm part is left which will be performed in this week.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Next week goals&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Work upon &lt;code class="highlighter-rouge"&gt;_solve_modular&lt;/code&gt; and ImageSet Union PR&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code improvement takes time!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://arighnaiitg.github.io/2019-07-23-gsoc-week8/</guid>
      <author>Arighna Chakrabarty (arighnaiitg)</author>
      <title>Arighna Chakrabarty (arighnaiitg): GSoC Week 8 !!</title>
      <pubDate>Tue, 23 Jul 2019 07:00:00 GMT</pubDate>
      <link>https://arighnaiitg.github.io/2019-07-23-gsoc-week8/</link>
      <description>&lt;p&gt;Week 8 ends.. - 
          Phase 2 of the GSoC coding period is coming to an end. !! I and Sartaj had a meeting on the 18th of July, about the timeline of the next 4 weeks. Here are the deliverables that have been completed in this week, including the minutes of the meeting. The...</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shubhamkjha.github.io/2019/07/23/GSoC-Week-8</guid>
      <author>Shubham Kumar Jha (ShubhamKJha)</author>
      <title>Shubham Kumar Jha (ShubhamKJha): GSoC 2019: Week 8</title>
      <pubDate>Tue, 23 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://shubhamkjha.github.io/2019/07/23/GSoC-Week-8.html</link>
      <description>&lt;p&gt;Now, the eighth week of official coding period has ended. I would give you a summary of my work during this week.&lt;/p&gt;

&lt;p&gt;I spent most of this week polishing and finishing my work on &lt;a href="https://github.com/sympy/sympy/pull/17144"&gt;#17144&lt;/a&gt;. The performance gain from this PR was very subtle but I had tested this only on the &lt;code class="highlighter-rouge"&gt;\assumptions\tests&lt;/code&gt; of SymPy. During this week&amp;#8217;s meeting, Aaron suggested an example that had become slower than before:&lt;/p&gt;
&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This made me realize that my strategy had a flaw. I had converted the smallest expressions into &lt;strong&gt;CNF&lt;/strong&gt; objects and applied Boolean functions (&lt;code class="highlighter-rouge"&gt;or&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;and&lt;/code&gt;, and &lt;code class="highlighter-rouge"&gt;not&lt;/code&gt;) on them keeping the CNF structure intact. The performance regression was coming from operations &lt;code class="highlighter-rouge"&gt;or&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;not&lt;/code&gt;. In case of CNF structures, the number of expressions increased exponentially for these operations. Since the test suite didn&amp;#8217;t have such examples, all the tests passed without any visible performance issue.&lt;/p&gt;

&lt;p&gt;With some research, I found that the best approach to handle this (without any kind of pruning) was to convert these expression into &lt;a href="https://en.wikipedia.org/wiki/Negation_normal_form"&gt;&lt;strong&gt;NNF&lt;/strong&gt;&lt;/a&gt; form first. So, I implemented a function &lt;code class="highlighter-rouge"&gt;to_NNF&lt;/code&gt; which works with low-level constructs (SymPy&amp;#8217;s &lt;code class="highlighter-rouge"&gt;to_nnf&lt;/code&gt; would have been too costly) and converts an expression into NNF. This is then converted into &lt;strong&gt;CNF&lt;/strong&gt; with ease. It keeps the number of clauses in check and hence also increases the performance outcome. The results are such: the above example now takes about &lt;code class="highlighter-rouge"&gt;0.4 s&lt;/code&gt; on this PR while it takes about &lt;code class="highlighter-rouge"&gt;6 s&lt;/code&gt; in master.&lt;/p&gt;

&lt;p&gt;Currently, the work on this PR is almost complete and it is under review.&lt;/p&gt;

&lt;p&gt;For the next week,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;My first priority is to get &lt;a href="https://github.com/sympy/sympy/pull/17144"&gt;#17144&lt;/a&gt; merged.&lt;/li&gt;
  &lt;li&gt;Then, work on optimizing &lt;code class="highlighter-rouge"&gt;rcall&lt;/code&gt;. This is an extension for the above work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Will keep you updated. Thank you !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=60</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-8- The draw() function in action</title>
      <pubDate>Mon, 22 Jul 2019 04:50:39 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/22/gsoc19-week-8-the-draw-function-in-action/</link>
      <description>&lt;p&gt;The 8&lt;sup&gt;th&lt;/sup&gt; week has ended and we are now in the middle of phase &amp;#8211;III.&lt;/p&gt;



&lt;p&gt;Last week was a bit of research-based, understanding &lt;strong&gt;matplotlib &lt;/strong&gt;and how it can be used to plot a beam diagram. I had a conversation with Jason Moore and Jashan where Jason shared a link of a &lt;a href="https://github.com/alfredocarella/simplebendingpractice"&gt;repository&lt;/a&gt;, which also was a bit of help as I took some hints from it for the &lt;strong&gt;draw() &lt;/strong&gt;function. After a lot of investigation and analysis, I was finally able to make a draft &lt;a href="https://github.com/sympy/sympy/pull/17240"&gt;PR # 17240&lt;/a&gt; which did the work as we intended.&lt;/p&gt;



&lt;p&gt;Here is an example of how it would function:&lt;span id="more-60"&gt;&lt;/span&gt;&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;

# This example has no prior logic involved. It just tests whether every functionality works or not

&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')

&amp;gt;&amp;gt;&amp;gt; b1 = Beam(50, E, I)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(-10, 0, -1)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(R1, 10, -1)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(R2, 30, -1)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(9, 5, 0, 23)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(9, 30, 1, 50)

&amp;gt;&amp;gt;&amp;gt; b1.apply_support(50, "pin")

&amp;gt;&amp;gt;&amp;gt; b1.apply_support(0, "fixed")

&amp;gt;&amp;gt;&amp;gt; b1.apply_support(20, "roller")

&amp;gt;&amp;gt;&amp;gt; b1.draw()

&lt;/pre&gt;



&lt;figure class="wp-block-image size-large is-resized .single-blog-image {display: none; }"&gt;&lt;img alt="" class="wp-image-62" height="387" src="https://ishanaj.files.wordpress.com/2019/07/61594696-552b5900-ac0c-11e9-96f9-4ba257dbf92c-1.png?w=467&amp;#038;h=387" width="467" /&gt;&lt;/figure&gt;



&lt;p&gt;Here we are using &lt;strong&gt;matplotlib&lt;/strong&gt; and &lt;strong&gt;numpy&lt;/strong&gt; by importing them as external modules. Of course, it would be better to have it done via &lt;strong&gt;SymPy&amp;#8217;s&lt;/strong&gt; own &lt;strong&gt;plot()&lt;/strong&gt;, but I think that is something we could work on in later stages as&lt;strong&gt; SymPy&amp;#8217;s plot()&lt;/strong&gt; is limited to work on equations and stuff (although on can use &lt;strong&gt;_backend &lt;/strong&gt;attribute for further functionalities). &amp;nbsp;Also to be noted here that &lt;strong&gt;SymPy&amp;#8217;s plot()&lt;/strong&gt; is not a replica of &lt;strong&gt;matplotib&amp;#8217;s plot()&lt;/strong&gt; but it makes it easier for SymPy equation to be plotted and it uses&amp;nbsp;&lt;strong&gt;matplotlib&lt;/strong&gt; to do so.&lt;/p&gt;



&lt;p&gt;Following are the&lt;strong&gt; m&lt;/strong&gt;&lt;strong&gt;atplotlib&lt;/strong&gt; modules/classes used:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.Rectangle.html"&gt;matplotlib.patches.Rectangle&lt;/a&gt;&amp;nbsp;-to draw the beam&lt;/li&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.annotate.html"&gt;matplotlib.pyplot.annotate&lt;/a&gt;&amp;nbsp;&amp;#8211; to draw arrows of load&lt;/li&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/3.1.1/api/markers_api.html"&gt;matplotlib.markers&lt;/a&gt;&amp;#8211; to draw supports&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Also, considering Jason&amp;#8217;s &lt;a href="https://github.com/sympy/sympy/pull/17240#issuecomment-513577696"&gt;comment&lt;/a&gt; in the PR, I will have to work on making &lt;strong&gt;SymPy&amp;#8217;s plot()&lt;/strong&gt; to accept a singularity function, so that it would be easier to plot &lt;strong&gt;loads &lt;/strong&gt;which are indeed equations of Singularity function. This is still in consideration, so I will have to look into it and of course will have a discussion on how it is to be done.&lt;/p&gt;



&lt;p&gt;Currently, I am not able to determine how to plot parabolic loads. I think this could be added later as we should currently focus on plotting simple parts and certainly work on other complexities later. But we can have a discussion on it.&lt;/p&gt;



&lt;p&gt;Other PR&amp;#8217;s are still being parallelly worked on.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Working on the idea of plotting singularity function via SymPy&amp;#8217;s plot()&lt;/li&gt;&lt;li&gt;Plotting parabolic loads&lt;/li&gt;&lt;li&gt;Writing documentation and tests&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-30-week-9.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 9: Matrices to Indexed</title>
      <pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-30-week-9.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-07-22-week-8.html"&gt;previous post&lt;/a&gt; for Week 8&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For this week, I&amp;#8217;ve started with &lt;a href="https://github.com/sympy/sympy/pull/17299"&gt;#17299&lt;/a&gt;. This pull request is meant to extend support for the &lt;code&gt;MatrixExpr&lt;/code&gt; class by allowing for conversion into an &lt;code&gt;Indexed&lt;/code&gt; class in which contractions equivalent to the matrix expression are represented.&lt;/p&gt;
&lt;h2 id="conversion-to-indexed"&gt;Conversion to &lt;code&gt;Indexed&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;as_indexed&lt;/code&gt; method that the pull request introduces is pretty self-explanatory:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; n, m &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'n m'&lt;/span&gt;, integer&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;True&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, n, m)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; B &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, m, n)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e &lt;span class="op"&gt;=&lt;/span&gt; A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e.as_indexed()&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;A[i, j]&lt;span class="op"&gt;*&lt;/span&gt;B[j, k]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A matrix multiplication between two matrix symbols is equivalent to a contraction along the index &lt;span class="math inline"&gt;&lt;em&gt;j&lt;/em&gt;&lt;/span&gt; (Since matrix multiplication is equivalent to a contraction along a single index).&lt;/p&gt;
&lt;h3 id="relationship-to-codegen"&gt;Relationship to Codegen&lt;/h3&gt;
&lt;p&gt;The purpose of the pull request is to allow conversion to help in the generation of code related to some matrix expressions. This is because there&amp;#8217;s already an existing infrastructure for code generation through contractions (something that the still-WIP &lt;a href="https://github.com/sympy/sympy/pull/17170"&gt;#17170&lt;/a&gt; addresses). The currently work in progress PR is meant to aid in extending code generation to matrix expressions instead of just &lt;code&gt;Indexed&lt;/code&gt; objects. This same conversion might also be possible using the &lt;code&gt;Codegen*&lt;/code&gt; classes in &lt;code&gt;array_utils&lt;/code&gt;, though this way seems to make more sense since it&amp;#8217;s entirely possible to use the function for non-codegen related purposes.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;My plans for this week are to continue working on the pull request and start with the new Matrix Wildcard pull request.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-22-week-8.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 8: Non-Commutative Wildcards</title>
      <pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-22-week-8.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-07-14-week-7.html"&gt;previous post&lt;/a&gt; for Week 7&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I spent most of this week rewriting the non-commutative matching code in Sympy&amp;#8217;s core as Aaron suggested. The pull request for this rewrite is available at &lt;a href="https://github.com/sympy/sympy/pull/17223"&gt;#17223&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="non-commutative-matching-in-sympy"&gt;Non-commutative matching in SymPy&lt;/h2&gt;
&lt;p&gt;SymPy already supports matching within non-commutative multiplication expressions. While I mentioned in my last blog post that this matching support was limited, I&amp;#8217;ll go into a bit more detail about what those limitations (which sometimes produce wrong results) are:&lt;/p&gt;
&lt;h3 id="no-matching-based-on-structure"&gt;No matching based on structure&lt;/h3&gt;
&lt;p&gt;Matching within commutative SymPy expressions allows for taking the structure of expressions into account. Two commutative SymPy expressions match only if both contain the same non-wildcard symbols:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; a, x, y, z&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; w &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'w'&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span class="op"&gt;=&lt;/span&gt; x&lt;span class="op"&gt;*&lt;/span&gt;y&lt;span class="op"&gt;*&lt;/span&gt;w&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m.matches(x&lt;span class="op"&gt;*&lt;/span&gt;y&lt;span class="op"&gt;*&lt;/span&gt;z)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;{w_: z}&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m.matches(a&lt;span class="op"&gt;*&lt;/span&gt;x&lt;span class="op"&gt;*&lt;/span&gt;z)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt; specifies that the expression must contain both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in addition to whatever the wildcard matches. For this reason, &lt;code&gt;m&lt;/code&gt; matches &lt;code&gt;x*y*z&lt;/code&gt; but not &lt;code&gt;a*x*z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The corresponding example for non-commutative expressions does not work as expected, as it does not match when we expect it to:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B, C, D &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'A:D'&lt;/span&gt;, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'W'&lt;/span&gt;, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M &lt;span class="op"&gt;=&lt;/span&gt; A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;W&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M.matches(A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;C)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M.matches(A&lt;span class="op"&gt;*&lt;/span&gt;D&lt;span class="op"&gt;*&lt;/span&gt;C)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="expressions-dont-respect-non-commutativity"&gt;Expressions don&amp;#8217;t respect non-commutativity&lt;/h3&gt;
&lt;p&gt;In instances where matching does seem to work, the non-commutativity of expressions is not respected:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B, C, D &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'A:D'&lt;/span&gt;, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; w &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'w'&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (w&lt;span class="op"&gt;*&lt;/span&gt;A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;C).matches(x&lt;span class="op"&gt;*&lt;/span&gt;C&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;A)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" title="5"&gt;{w_: x}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two expressions should &lt;em&gt;not&lt;/em&gt; have matched, since the order of the non-commutative expressions were different. I reported this same error for matrix expressions in issue &lt;a href="https://github.com/sympy/sympy/issues/17172"&gt;#17172&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="sub-expressions-arent-expanded"&gt;Sub-expressions aren&amp;#8217;t expanded&lt;/h3&gt;
&lt;p&gt;The matching code should be able to match portions of powers, which are represented differently in the SymPy AST. As an example, a non-commutative matcher such as &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;em&gt;W&lt;/em&gt;&lt;/span&gt; (where &lt;span class="math inline"&gt;&lt;em&gt;W&lt;/em&gt;&lt;/span&gt; is a wildcard) should match &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt; with &lt;span class="math inline"&gt;{&lt;em&gt;W&lt;/em&gt;&amp;#8196;&amp;#8614;&amp;#8196;&lt;em&gt;A&lt;/em&gt;}&lt;/span&gt;. I wasn&amp;#8217;t able create a working example of this using the existing matching code.&lt;/p&gt;
&lt;h2 id="matching-implementation"&gt;Matching Implementation&lt;/h2&gt;
&lt;p&gt;Since order needs to be taken into account for matching non-commutative expressions, the new matching code essentially does what a regular expression matcher would do, with nodes taking the place of characters and wildcards taking the place of the &lt;code&gt;.+&lt;/code&gt; regular expression.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;The matching PR still needs to be polished, and the related documentation needs to be updated, so I&amp;#8217;ll be working on that. I&amp;#8217;ll also start with extending matrix matching from this PR.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://czgdp1807.github.io/week_8</guid>
      <author>Gagandeep Singh (czgdp1807)</author>
      <title>Gagandeep Singh (czgdp1807): Week 8 - Heading towards completion</title>
      <pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://czgdp1807.github.io/week_8/</link>
      <description>&lt;p&gt;With the 8th week, the second phase of my project is complete and we are heading towards the end of GSoC 2019. 
This blog post summarises the work done between phase 1 and phase 3, in terms of PRs. Moreover, I will share with you my plans for the last phase.&lt;/p&gt;

&lt;p&gt;I worked on the following PRs(listed in chronological order) during the second phase, some of them got merged and few are open.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merged&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/16934"&gt;#16934&lt;/a&gt; : The bug fixes were complete and the further work has been handed over to my co-student, Ritesh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/16962"&gt;#16962&lt;/a&gt; : This was continuation of the work done in phase 1 for allowing symbolic dimensions in finite random variables. As I planned, this PR got merged in phase 2, after some changes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/17083"&gt;#17083&lt;/a&gt;: The work done in this PR framed the platform and reason for the next one. The algorithm that got merged was a bit difficult to extend, and maintain. Thanks to Francesco for his &lt;a href="https://github.com/sympy/sympy/pull/17083#issuecomment-508256359"&gt;comment&lt;/a&gt; for motivating me to re-think the whole framework.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/17163"&gt;#17163&lt;/a&gt; : This was one of the most challenging PRs of the project till now, because, it involved re-designing the algorithm, refactoring the code and moreover lot of thinking. The details can be found at &lt;a href="https://github.com/sympy/sympy/pull/17163#issuecomment-510939984"&gt;this comment&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Open&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/17174"&gt;#17174&lt;/a&gt; : This PR aims at adding random matrices to sympy. Currently, I am studying about the expressions involving random matrices and computing their densities.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/17146"&gt;#17146&lt;/a&gt; : This PR aims at allowing symbolic parameters to &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt;. The work is complete and I am waiting for final reviews. Hopefully it gets merged.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from the above PRs I also reviewed code written by other contributors.
Overall, according to me phase 2 was a great learning and logical experience.&lt;/p&gt;

&lt;p&gt;Let me share with you the outline of my plan for phase 3.&lt;/p&gt;

&lt;p&gt;The outline is given below,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I will work on enhancing the result generation by the stats module as was planned in the beginning.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The work on random matrices will be extended and I will add more features to them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Probably, if time permits, I will try to do some more refactoring of &lt;code class="highlighter-rouge"&gt;sympy.stats.frv&lt;/code&gt;, and will try to add some more stochastic processes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I will also try to merge my open PRs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading and see you soon in phase 3. Bye!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://divyanshu132.github.io//gsoc-week-8</guid>
      <author>Divyanshu Thakur (divyanshu132)</author>
      <title>Divyanshu Thakur (divyanshu132): GSoC 2019 - Week 8 - Phase-II Completion</title>
      <pubDate>Sat, 20 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://divyanshu132.github.io//gsoc-week-8</link>
      <description>&lt;p&gt;Phase-II has been completed and now it&amp;#8217;s time to present all the work done during this phase. This week&amp;#8217;s blog is little early in comparison to my previous blogs because I&amp;#8217;ll not be active for next 2 upcoming days. In the whole phase we worked on &lt;strong&gt;Computations with Polycyclic Groups&lt;/strong&gt; though the tasks mentioned in proposal for this phase were quite different. But let me tell you it worth that much time, Computation with Polycyclic groups(solvable groups) shows the actual development in computational group theory.&lt;/p&gt;

&lt;p&gt;Below are the functioalities that were added to the polycyclic group in this phase, Here is the PR &lt;a href="https://github.com/sympy/sympy/pull/16991"&gt;sympy/sympy#16991&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing Collector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As discussed in &lt;a href="https://divyanshu132.github.io/gsoc-week-5"&gt;week-5 blog&lt;/a&gt; at the time of Collector implementation we did not have the implementation of polycyclic presentation so some hand made tests were used. Here is an example of &lt;code class="highlighter-rouge"&gt;S(4)&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics import *
&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics.free_groups import free_group
&amp;gt;&amp;gt;&amp;gt; F, x0, x1, x2, x3 = free_group("x0, x1, x2, x3")
&amp;gt;&amp;gt;&amp;gt; pc_relators = { x0**2: (), x1**3: (), x2**2: (), x3**2: (),
...                 x0**-1*x1*x0: x1**2, x0**-1*x2*x0: x2*x3,
...                 x0**-1*x3*x0: x3, x1**-1*x2*x1: x3,
...                 x1**-1*x3*x1: x2*x3, x2**-1*x3*x2: x3
...               }
&amp;gt;&amp;gt;&amp;gt; word = x3*x2*x1*x0
&amp;gt;&amp;gt;&amp;gt; relative_order = [2, 3, 2, 2]
&amp;gt;&amp;gt;&amp;gt; group = word.group
&amp;gt;&amp;gt;&amp;gt; collector = Collector(pc_relators, relative_order, group)
&amp;gt;&amp;gt;&amp;gt; collector.collected_word(word)
x0*x1**2*x2*x3

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The final word &lt;code class="highlighter-rouge"&gt;x0*x1**2*x2*x3&lt;/code&gt; is said to be collected. For more information about collected word please look into the docstrings of the method &lt;code class="highlighter-rouge"&gt;Collector.collected_word()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Computation of Polycyclic Sequence and Series&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Polycyclic sequence and series are the building blocks of polycyclic presentation (have a look at &lt;a href="https://divyanshu132.github.io/gsoc-week-6"&gt;week-6 blog&lt;/a&gt;) . One thing to note is that, the derived series of a group may change on different course of execution so we may have different pc sequence and series for the same group.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics import *
&amp;gt;&amp;gt;&amp;gt; G = SymmetricGroup(4)
&amp;gt;&amp;gt;&amp;gt; PcGroup = G.polycyclic_group()
&amp;gt;&amp;gt;&amp;gt; PcGroup.pcgs
[Permutation(0, 1, 2, 3), Permutation(3)(0, 2, 1), Permutation(0, 3)(1, 2), Permutation(0, 1)(2, 3)]
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; PcGroup.pc_series[0] == G
True
&amp;gt;&amp;gt;&amp;gt; PcGroup.pc_series[1] == AlternatingGroup(4)
True
&amp;gt;&amp;gt;&amp;gt; PcGroup.relative_order()
[2, 3, 2, 2]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Computation of Polycyclic Presentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Few approaches were used to compute polycyclic presentation, the current implementation is discussed in &lt;a href="https://divyanshu132.github.io/gsoc-week-7"&gt;week-7 blog&lt;/a&gt;. Below is a small example to show the functionality.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics import *
&amp;gt;&amp;gt;&amp;gt; G = SymmetricGroup(4)
&amp;gt;&amp;gt;&amp;gt; PcGroup = G.polycyclic_group()
&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics.free_groups import free_group
&amp;gt;&amp;gt;&amp;gt; len(PcGroup.pcgs)
4
&amp;gt;&amp;gt;&amp;gt; free_group, x0, x1, x2, x3 = free_group("x0, x1, x2, x3")
&amp;gt;&amp;gt;&amp;gt; PcGroup.pc_presentation(free_group)
{x3**2: (), x2**2: (), x2**-1*x3*x2: x3, x1**3: (), x1**-1*x3*x1: x2*x3, x1**-1*x2*x1: x3, x0**2: x2*x3, x0**-1*x3*x0: x2, x0**-1*x2*x0: x3, x0**-1*x1*x0: x1**2*x3}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As I mentioned above &lt;code class="highlighter-rouge"&gt;pc_sequence&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;pc_series&lt;/code&gt; may change on different course of execution and hence the &lt;code class="highlighter-rouge"&gt;pc_presentation&lt;/code&gt; changes accordingly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing Presentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Due to the changing &lt;code class="highlighter-rouge"&gt;pc_presentation&lt;/code&gt; initially, it was difficult to test presentation but later on a method has been developed and a good amount of code is introduced to test the presentation. The details can be found in the module &lt;code class="highlighter-rouge"&gt;test_pc_groups.py&lt;/code&gt; in the above PR.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional methods for Polycyclic groups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There were few additional methods added to the polycyclic group.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;exponent_vector()&lt;/code&gt; :- It represents the given generator of a polycyclic group with the help of product of &lt;code class="highlighter-rouge"&gt;pcgs&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;depth()&lt;/code&gt; :- Depth of the first non-zero element in &lt;code class="highlighter-rouge"&gt;exponent_vector&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;leading_exponent()&lt;/code&gt; :- It represents the power of polycyclic generator at the above depth.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics import *
&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics.free_groups import free_group
&amp;gt;&amp;gt;&amp;gt; G = SymmetricGroup(4)
&amp;gt;&amp;gt;&amp;gt; PcGroup = G.polycyclic_group()
&amp;gt;&amp;gt;&amp;gt; pcgs = PcGroup.pcgs
&amp;gt;&amp;gt;&amp;gt; len(pcgs)
4
&amp;gt;&amp;gt;&amp;gt; free_group, x0, x1, x2, x3 = free_group("x0, x1, x2, x3")
&amp;gt;&amp;gt;&amp;gt; PcGroup.exponent_vector(G[1], F)
[1, 1, 1, 1]
&amp;gt;&amp;gt;&amp;gt; G[1] == pcgs[0]*pcgs[1]*pcgs[2]*pcgs[3]
True
&amp;gt;&amp;gt;&amp;gt; PcGroup.depth(G[1], free_group) == 1
&amp;gt;&amp;gt;&amp;gt; PcGroup.leading_exponent(G[1], free_group) == 1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Currently, we are discussing about organizing above methods of polycyclic group. As Kalevi feels that the suitable place for &lt;code class="highlighter-rouge"&gt;pc_presentation&lt;/code&gt;(currently, it&amp;#8217;s a method of &lt;code class="highlighter-rouge"&gt;PolycyclicGroup class&lt;/code&gt;) is the &lt;code class="highlighter-rouge"&gt;Collector class&lt;/code&gt;, Perhaps the structure of both the classes should be changed and the same will be reflected in the examples mentioned above.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://jmig5776.github.io//gsoc-week-8</guid>
      <author>Jogi Miglani (jmig5776)</author>
      <title>Jogi Miglani (jmig5776): GSoC 2019 - Week 8</title>
      <pubDate>Sat, 20 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://jmig5776.github.io//gsoc-week-8</link>
      <description>&lt;p&gt;This was the eigth week meeting with the GSoC mentors which was scheduled on
Saturday 20th July, 2019 between 12:30 - 1:30 PM (IST). Me, Yathartha and Amit
were the attendees of the meeting.
Finally the PR &lt;a href="https://github.com/sympy/sympy/pull/16890"&gt;#16890&lt;/a&gt; is merged to
Sympy master and the work for Lambert has been completed. It was only possible
because of the mentors and especially @smichr for his great suggestions in code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Discussing previous week&amp;#8217;s progress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this meeting the goals for the time left for GSoC were decided as follows:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Lambert:- Completed and merged.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solve modular:-
What I experienced with lambert&amp;#8217;s PR that got stretched so much which I was not
expecting. Algorithms made from heuristics takes so much time to be ready for
merging so I really don&amp;#8217;t know how much time it will take. But It is sure that
it will be completed before the final evaluation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ImageSet Union:- This task will be taken after the solve modular. This is a
very complex task and will need proper guidance and algorithm. I had searched
for some research papers, but what I found out was not that what we want.
Before GSoC final evaluation this task will be started to implement, but I am
not really sure if it would get merged before final evaluation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Next week goals&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Work upon &lt;code class="highlighter-rouge"&gt;_solve_modular&lt;/code&gt; PR&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If time left then find plan for Imageset Union.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code improvement takes time!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sc0rpi0n101.github.io/2019/07/week-8boys-we-got-a-plan./</guid>
      <author>Nikhil Maan (Sc0rpi0n101)</author>
      <title>Nikhil Maan (Sc0rpi0n101): Week 8:Boys!! We got a Plan.</title>
      <pubDate>Sat, 20 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://sc0rpi0n101.github.io/2019/07/week-8boys-we-got-a-plan./</link>
      <description>&lt;p&gt;&amp;ldquo;Those who plan do better than those who do not plan even though they rarely stick to their plan.&amp;rdquo; &amp;#8213; Winston Churchill
 Welcome everyone, this is your host Nikhil Maan aka Sc0rpi0n101 and this week I have some good news for you all. We have got a few plans to get the progress of the project rolling as the second evaluation approaches. The meeting also took place this week, so, after waiting for so long, we have some good insights from the meeting this time.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://arighnaiitg.github.io/2019-07-15-gsoc-week7/</guid>
      <author>Arighna Chakrabarty (arighnaiitg)</author>
      <title>Arighna Chakrabarty (arighnaiitg): GSoC Week 7 !!</title>
      <pubDate>Mon, 15 Jul 2019 07:00:00 GMT</pubDate>
      <link>https://arighnaiitg.github.io/2019-07-15-gsoc-week7/</link>
      <description>&lt;p&gt;Week 7 ends.. - 
          Phase 2 of the coding period is smoothly being traversed. I recently had a meeting with Sartaj on 11th of July, Thursday. Here were the minutes of the meeting, along with the deliverables completed over the week. The FiniteFormalPowerSeries class PR needs some changes. Currently, it is taking in an...</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=58</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-7- Starting with the phase-III draw() function</title>
      <pubDate>Mon, 15 Jul 2019 03:02:10 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/15/gsoc19-week-7-starting-with-the-phase-iii-draw-function/</link>
      <description>&lt;p&gt;The week was successfully completed as planned. The work on &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;Column class&lt;/a&gt; has been completed.&lt;/p&gt;



&lt;p&gt;The documentation and tests have been written and with some changes in the &lt;strong&gt;solve_slope_deflection()&lt;/strong&gt; and &lt;strong&gt;critical_load(),&lt;/strong&gt; the &lt;strong&gt;Column&lt;/strong&gt; class is now able to handle cases with trivial solutions of the constants ( C1 &amp;amp; C2) which made the deflection equation zero.&lt;/p&gt;



&lt;p&gt;Apart from this, another problem that we had with the &lt;strong&gt;pinned-fixed&lt;/strong&gt; end condition, where &lt;strong&gt;solve()&lt;/strong&gt; wasn&amp;#8217;t giving the output in the required form, has temporary been handled by making an &lt;strong&gt;XFAIL &lt;/strong&gt;test against it. We can work on it later. Either there has to be some changes in &lt;strong&gt;solve()&lt;/strong&gt;&amp;nbsp;so that we would be able to handle our case or we might have to figure out a way to rewrite it into the desired form.&lt;span id="more-58"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;With the end of this week,&amp;nbsp;&lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/17153"&gt;PR #17153&lt;/a&gt; are complete and ready for review. I have made some changes addressing some of the reviews, and we can have further discussions on it.&lt;/p&gt;



&lt;p&gt;Now, also moving on to the next phase, I have done a bit of research on it. I will most probably open a discussion to have an initial discussion regarding how work will progress in this stage. This phase is regarding plotting the beam diagrams using &lt;a href="https://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. I have also considered &lt;strong&gt;pyglet&lt;/strong&gt; plotting module of SymPy, which according to the &lt;a href="https://docs.sympy.org/latest/modules/plotting.html#plotting-geometric-entities"&gt;documentation&lt;/a&gt; is capable of plotting geometries, but there has been some problems in this module and it doesn&amp;#8217;t seem to be working well. I had earlier made an &lt;a href="https://github.com/sympy/sympy/issues/16537"&gt;issue #16537&lt;/a&gt; regarding the same, but there seems to be no improvement here.&lt;/p&gt;



&lt;p&gt;So, we will be discussing the rest in an issue-cum-discussion, in the upcoming week.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Next week:&lt;/strong&gt;&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;Working on the Stage-III&lt;/li&gt;&lt;li&gt;Simultaneously, discussing the leftover PR&amp;#8217;s and trying to finish them and make a merge.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Most probably, on successful discussion and planning, I will be opening a draft work-in-progress PR for the &lt;strong&gt;draw()&lt;/strong&gt; function in stage &amp;#8211;III.&lt;/p&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://czgdp1807.github.io/week_7</guid>
      <author>Gagandeep Singh (czgdp1807)</author>
      <title>Gagandeep Singh (czgdp1807): Week 7 - All about logics and algorithms</title>
      <pubDate>Mon, 15 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://czgdp1807.github.io/week_7/</link>
      <description>&lt;p&gt;This week required a lot of thinking before jumping to code the stuff. Interested? Okay move on to next paragraph.&lt;/p&gt;

&lt;p&gt;Basically, I worked on three PRs, &lt;a href="https://github.com/sympy/sympy/pull/17163"&gt;#17163&lt;/a&gt; for continuous time Markov chains, &lt;a href="https://github.com/sympy/sympy/pull/17174"&gt;#17174&lt;/a&gt; for random matrices and &lt;a href="https://github.com/sympy/sympy/pull/17146"&gt;#17146&lt;/a&gt; for symbolic Ranges. The first and the last PRs are very much intensive. I developed a new algorithm for the query handler of &lt;code class="highlighter-rouge"&gt;ContinuousMarkovChain.probability&lt;/code&gt; method, because the previous one which I implemented in &lt;code class="highlighter-rouge"&gt;DiscreteMarkovChain.probability&lt;/code&gt;, was not easy to maintain, quite ad-hoc, rigid and difficult to extend. The philosophy behind the algorithm is recursion i.e., boil everything down to &lt;code class="highlighter-rouge"&gt;Relational&lt;/code&gt; query, convert them to sets and then calculate the probability. You can find the complete description &lt;a href="https://github.com/sympy/sympy/pull/17163#issuecomment-510939984"&gt;here&lt;/a&gt;. I am waiting for any critical objections from my mentors and after that I will refactor the code as suggested by &lt;a href="https://github.com/oscarbenjamin"&gt;oscarbenjamin&lt;/a&gt; and &lt;a href="https://github.com/jksuom"&gt;jksuom&lt;/a&gt;. So, now let&amp;#8217;s move on to random matrices. As it was to be implemented from scratch, it required a bit of thinking to reach a decent architecture. Currently, the PR is at a basic level, and some more testing is to be done. Now, coming on to symbolic &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt;. Let me tell you, it requires a lot of logical thinking to make &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; accept symbolic parameters. A lot of tests fail, and a lot of debugging has to be done to make a method work. In fact, we might deprecate &lt;code class="highlighter-rouge"&gt;xrange&lt;/code&gt; support from &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; because we are going to drop &lt;code class="highlighter-rouge"&gt;Python 2&lt;/code&gt; support from &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This week I learnt to combine the concepts from algorithms and software engineering to develop the stuff I mentioned above. This was the best week of my overall GSoC experience till now.&lt;/p&gt;

&lt;p&gt;A lot more lies ahead. Bye!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://divyanshu132.github.io//gsoc-week-7</guid>
      <author>Divyanshu Thakur (divyanshu132)</author>
      <title>Divyanshu Thakur (divyanshu132): GSoC 2019 - Week 7 - Modify Presentation and Addition of Methods</title>
      <pubDate>Mon, 15 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://divyanshu132.github.io//gsoc-week-7</link>
      <description>&lt;p&gt;The seventh week of coding period has ended and a few methods has been introduced to polycyclic groups, also pc presentation has been modified. Previously for pc presentation we were computing the LHS for both power and conjugate relators via separate methods and then finally their RHS was computed.&lt;/p&gt;

&lt;p&gt;Now, the computation of presentation starts from the bottom of the polycyclic generating sequence(pcgs) and polycyclic series. Storing all the previous generators from pcgs and then taking the last generator as the generator which acts as a conjugator and conjugates all the previous generators in the list.&lt;/p&gt;

&lt;p&gt;To get a clear picture let&amp;#8217;s take an example of &lt;code class="highlighter-rouge"&gt;S(4)&lt;/code&gt;
For S(4) we&amp;#8217;ll have 4 generators in pcgs say &lt;code class="highlighter-rouge"&gt;[x0, x1, x2, x3]&lt;/code&gt; and the &lt;code class="highlighter-rouge"&gt;relative_order vector as [2, 3, 2, 2]&lt;/code&gt;. Starting from bottom of this sequence the presentation is computed in order as below.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x3**2	       	---| ---&amp;gt; using only [x3] from pcgs and pc_series[1]
x2**2		   |
x2**-1*x3*x2	---| from bottom up because pc_series[0] is an identity.

x1**3		---| ---&amp;gt; using [x3, x2] from pcgs and pc_series[2]	
x1**-1*x3*x1	   | 
x1**-1*x2*x1	---|      from bottom up(which have both the gens).

x0**2		---| ---&amp;gt; using [x3, x2, x1] from pcgs and pc_series[3]
x0**-1*x3*x0	   |
x0**-1*x2*x0	   |      from bottom up(which have all three gens).
x0**-1*x1*x0	---|

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There were 3-methods which were added namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exponent vector&lt;/li&gt;
  &lt;li&gt;Depth&lt;/li&gt;
  &lt;li&gt;Leading Exponent&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics import *
&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics.free_groups import free_group
&amp;gt;&amp;gt;&amp;gt; G = SymmetricGroup(4)
&amp;gt;&amp;gt;&amp;gt; PcGroup = G.polycyclic_group()
&amp;gt;&amp;gt;&amp;gt; pcgs = PcGroup.pcgs
&amp;gt;&amp;gt;&amp;gt; group, x0, x1, x2, x3 = free_group("x0, x1, x2, x3")
&amp;gt;&amp;gt;&amp;gt; PcGroup.exponent_vector(G[0], group)
[1, 0, 0, 0]
&amp;gt;&amp;gt;&amp;gt; exp = PcGroup.exponent_vector(G[1], group)
&amp;gt;&amp;gt;&amp;gt; g = Permutation()
&amp;gt;&amp;gt;&amp;gt; for i in range(len(exp)):
...     g = g*pcgs[i] if exp[i] else g
... 
&amp;gt;&amp;gt;&amp;gt; g == G[1]
True
&amp;gt;&amp;gt;&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For the details of these methods one can look into the docstrings and doctests of these methods in the PR &lt;a href="https://github.com/sympy/sympy/pull/16991"&gt;sympy/sympy#16991&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tasks I hope to complete next week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the polycyclic group pr ready to be merged.&lt;/li&gt;
  &lt;li&gt;Get started with quotient groups.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till then good byee..&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://jmig5776.github.io//gsoc-weel-7</guid>
      <author>Jogi Miglani (jmig5776)</author>
      <title>Jogi Miglani (jmig5776): Lambert Solver Of Sympy (GSoC 2019 - Week 7)</title>
      <pubDate>Mon, 15 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://jmig5776.github.io//gsoc-weel-7</link>
      <description>&lt;p&gt;This was the seventh week meeting with the GSoC mentors which was scheduled on
Monday 15th July, 2019 between 6:00 - 7:00 PM (IST). Me and  Yathartha
were the attendees of the meeting. In this blog I will be describing the lambert
equation solver for Sympy and what problems it faced before and how PR
&lt;a href="https://github.com/sympy/sympy/pull/16890"&gt;#16890&lt;/a&gt; will solve the problems.
It is preassumed that you know what lambert type equations are, so I will not be
explaining that.&lt;/p&gt;

&lt;h2 id="explaining-the-function-_solve_lambert-main-function-to-solve-lambert-equations"&gt;Explaining the function &lt;code class="highlighter-rouge"&gt;_solve_lambert&lt;/code&gt; (main function to solve lambert equations)&lt;/h2&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Input - f, symbol, gens
OutPut - Solution of f = 0 if its lambert type expression else NotImplementedError
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This function separates out cases as below based on the main function present in
the main equation.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;For the first ones:
1a1) B**B = R != 0 (when 0, there is only a solution if the base is 0,
                   but if it is, the exp is 0 and 0**0=1
                   comes back as B*log(B) = log(R)
1a2) B*(a + b*log(B))**p = R or with monomial expanded or with whole
                            thing expanded comes back unchanged
   log(B) + p*log(a + b*log(B)) = log(R)
   lhs is Mul:
       expand log of both sides to give:
       log(B) + log(log(B)) = log(log(R))
1b) d*log(a*B + b) + c*B = R
   lhs is Add:
       isolate c*B and expand log of both sides:
       log(c) + log(B) = log(R - d*log(a*B + b))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the equation are of type 1a1, 1a2 and 1b then the mainlog of the equation is
taken into concern as the deciding factor lies in the main logarithmic term of equation.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;For the next two,
   collect on main exp
   2a) (b*B + c)*exp(d*B + g) = R
       lhs is mul:
           log to give
           log(b*B + c) + d*B = log(R) - g
   2b) -b*B + g*exp(d*B + h) = R
       lhs is add:
           add b*B
           log and rearrange
           log(R + b*B) - d*B = log(g) + h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the equation are of type 2a and 2b then the mainexp of the equation is
taken into concern as the deciding factor lies in the main exponential term of equation.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;3) d*p**(a*B + b) + c*B = R
   collect on main pow
   log(R - c*B) - a*B*log(p) = log(d) + b*log(p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the equation are of type 3 then the mainpow of the equation is
taken into concern as the deciding factor lies in the main power term of equation.&lt;/p&gt;

&lt;p&gt;Eventually from all of the three cases the equation is meant to be converted to this form:-&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;f(x, a..f) = a*log(b*X + c) + d*X - f = 0 which has the
solution,  X = -c/b + (a/d)*W(d/(a*b)*exp(c*d/a/b)*exp(f/a)).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And the solution calculation process is done by &lt;code class="highlighter-rouge"&gt;_lambert&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Everything seems flawless?? You might be thinking no modification is required. Lets
see what loopholes are there in it.&lt;/p&gt;

&lt;h2 id="what-does-pr-16890-do"&gt;What does PR &lt;a href="https://github.com/sympy/sympy/pull/16890"&gt;#16890&lt;/a&gt; do?&lt;/h2&gt;

&lt;p&gt;There are basically two flaws present with the this approach.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Not considering all branches of equation while taking log both sides.&lt;/li&gt;
  &lt;li&gt;Calculation of roots should consider all roots in case having rational power.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="1-not-considering-all-branches-of-equation-while-taking-log-both-sides"&gt;1. Not considering all branches of equation while taking log both sides.&lt;/h3&gt;

&lt;p&gt;Let us consider this equation to be solved by &lt;code class="highlighter-rouge"&gt;_solve_lambert&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;-1/x**2 + exp(x/2)/2 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So what the old &lt;code class="highlighter-rouge"&gt;_solve_lambert&lt;/code&gt; do is to convert this equation to following.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;2*log(x) + x/2 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and calculates its roots from &lt;code class="highlighter-rouge"&gt;_lambert&lt;/code&gt;.
But it missed this branch of equation while taking log on main equation.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;2*log(-x) + x/2 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yeah you can reproduce the original equation from this equation.So basically the problem
was that it missed the branches of equation while taking log. And when does the
main equation have more than one branch?? The terms having even powers of variable x
leads to two different branches of equation.&lt;/p&gt;

&lt;p&gt;So how it is solved?
What I has done is that before actually gets into solving I preprocess the main equation
and if it has more than one branches of equation while converting taking log then I consider
all the equations generated from them.(with the help of &lt;code class="highlighter-rouge"&gt;_solve_even_degree_expr&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;How I preprocess the equation?
So what I do is I replace all the even powers of x present with even powers of t(dummy variable).&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Code for targeted replacement
lhs = lhs.replace(
            lambda i:  # find symbol**even
                i.is_Pow and i.base == symbol and i.exp.is_even,
            lambda i:  # replace t**even
                t**i.exp)
Example:-
Main equation -&amp;gt; -1/x**2 + exp(x/2)/2 = 0
After replacement -&amp;gt; -1/t**2 + exp(x/2)/2 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now I take logarithms on both sides and simplify it.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;After simplifying -&amp;gt; 2*log(t) + x/2 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now I call function &lt;code class="highlighter-rouge"&gt;_solve_even_degree_expr&lt;/code&gt; to replace the t with +/-x to generate two equations.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Replacing t with +/-x
1. 2*log(x) + x/2 = 0
2. 2*log(-x) + x/2 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And consider the solutions of both of the equations to return all lambert real solutions
of &lt;code class="highlighter-rouge"&gt;-1/x**2 + exp(x/2)/2 = 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hope you could understand the logic behind this work.&lt;/p&gt;

&lt;h3 id="2-calculation-of-roots-should-consider-all-roots-in-case-having-rational-power"&gt;2. Calculation of roots should consider all roots in case having rational power.&lt;/h3&gt;

&lt;p&gt;This flaw is in the calculation of roots in function &lt;code class="highlighter-rouge"&gt;_lambert&lt;/code&gt;.
Earlier the function_lambert has the working like :-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find all the values of a, b, c, d, e in the required loagrithmic equation&lt;/li&gt;
  &lt;li&gt;Then it defines a solution of the form
    &lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;-c/b + (a/d)*l where l = LambertW(d/(a*b)*exp(c*d/a/b)*exp(-f/a), k)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and then it included that solution.
I agree everything seems flawless here. but try to see the step where we are defining l.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us suppose a hypothetical algorithm just like algorithm used in &lt;code class="highlighter-rouge"&gt;_lambert&lt;/code&gt;
in which equation to be solved is&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x**3 - 1 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and in which we define solution of the form&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x = exp(I*2*pi/n) where n is the power of x in equation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;so the algorithm will give solution&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x = exp(I*2*pi/3) # but expected was [1, exp(I*2*pi/3), exp(-I*2*pi/3)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which can be found by finding all solutions of&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;x**n - exp(2*I*pi) = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;by a different correct algorithm. Thats y it was wrong.
The above algorithm would have given correct values for &lt;code class="highlighter-rouge"&gt;x - 1 = 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And the question in your mind may arise that why only exp() because the
possiblity of having more than one roots is in exp(), because if the algorithm
would have been like &lt;code class="highlighter-rouge"&gt;x = a&lt;/code&gt;, where a is some real constant then there is not
any possiblity of further roots rather than solution like &lt;code class="highlighter-rouge"&gt;x = a**(1/n)&lt;/code&gt;.
And its been done in code like this:&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;code
num, den = ((c*d-b*f)/a/b).as_numer_denom()
p, den = den.as_coeff_Mul()
e = exp(num/den)
t = Dummy('t')
args = [d/(a*b)*t for t in roots(t**p - e, t).keys()]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thank you! Thats all it was!!.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shubhamkjha.github.io/2019/07/15/GSoC-2019-Week-6-and-7</guid>
      <author>Shubham Kumar Jha (ShubhamKJha)</author>
      <title>Shubham Kumar Jha (ShubhamKJha): GSoC 2019: Week 6 and 7</title>
      <pubDate>Mon, 15 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://shubhamkjha.github.io/2019/07/15/GSoC-2019-Week-6-and-7.html</link>
      <description>&lt;p&gt;With this ends the seventh week of the official coding period. During the end of 6th week and the beginning of 7th week, I was mostly travelling, so I was not able to write a blog for the sixth week. Instead, I will try to summarize my work during the last two weeks here.&lt;/p&gt;

&lt;p&gt;For the last few weeks, I have been focused on optimizing the code of new assumptions to enhance its performance. Most of my work has been exploratory, as Aaron says &amp;#128517;. Indeed I have dry-run, backtracked, profiled, and ran the same code with a debugger too many times to understand the slow parts and the improvements I can make here and there. Mostly the code is optimized given the class structure of SymPy. But it is also the class structure that is adding up to the performance issues. Already noted in my last blog, classes like &lt;code class="highlighter-rouge"&gt;And&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Or&lt;/code&gt; sorts their &lt;em&gt;args&lt;/em&gt;, hence take a great amount of time. But other SymPy class constructors also take significant time.&lt;/p&gt;

&lt;p&gt;With the success of fifth week&amp;#8217;s attempt, I have been desperate to bring down the execution time &amp;#128517;. Some of the attempts I have made, which are included in &lt;a href="https://github.com/sympy/sympy/pull/17144"&gt;#17144&lt;/a&gt;, are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I have modified &lt;strong&gt;CNF&lt;/strong&gt; class, which essentially is a low-level implementation for the &lt;a href="https://en.wikipedia.org/wiki/Conjunctive_normal_form"&gt;cnf&lt;/a&gt; of any boolean expression. &lt;strong&gt;CNF&lt;/strong&gt; object holds a set of clauses. These clauses are themselves &lt;code class="highlighter-rouge"&gt;frozenset&lt;/code&gt; of &lt;strong&gt;Literal&lt;/strong&gt; objects. &lt;strong&gt;Literal&lt;/strong&gt; class is being implemented just to reduce the unnecessary creation of &lt;code class="highlighter-rouge"&gt;Not&lt;/code&gt; objects (It takes significant execution time and is called many times).&lt;/li&gt;
  &lt;li&gt;I have also modified the code of &lt;em&gt;sympify()&lt;/em&gt;, it appeared to take more time than expected when the argument is a SymPy object already. Consider this, almost one-third execution time.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="n"&gt;sympify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# before change&lt;/span&gt;
&lt;span class="mi"&gt;601&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="mf"&gt;14.6&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="n"&gt;sympify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# after change&lt;/span&gt;
&lt;span class="mi"&gt;239&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="mf"&gt;11.8&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Finally, I rewrote &lt;code class="highlighter-rouge"&gt;to_cnf()&lt;/code&gt; for &lt;strong&gt;CNF&lt;/strong&gt; objects. By using mostly Python&amp;#8217;s built-ins and removing any SymPy object construction during its execution. The performance gain is quite subtle &amp;#128526;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.logic.boolalg&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CNF&lt;/span&gt;

&lt;span class="c"&gt;# Before&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="n"&gt;CNF&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# It is using to_cnf()&lt;/span&gt;
&lt;span class="mf"&gt;1.41&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="err"&gt;&amp;#181;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# after&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="n"&gt;CNF&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# It is using the new to_CNF()&lt;/span&gt;
&lt;span class="mf"&gt;31.5&lt;/span&gt; &lt;span class="err"&gt;&amp;#181;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="mf"&gt;1.48&lt;/span&gt; &lt;span class="err"&gt;&amp;#181;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="err"&gt;&amp;#177;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is definitely a limit to performance we can get with Python. But implementing most of the things in Python built-ins we can definitely make things much faster.&lt;/p&gt;

&lt;p&gt;For the upcoming week, I will try to complete the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The CNF objects are still not simplified. I have to implement simplification to reduce the number of clauses. These have to be fed into &lt;code class="highlighter-rouge"&gt;satisfiable&lt;/code&gt; at the end, which can benefit from lesser number of clauses.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;rcall&lt;/code&gt; used with &lt;strong&gt;sathandlers&lt;/strong&gt; is another major portion having high execution time. I will try to work it out.&lt;/li&gt;
  &lt;li&gt;Clean up the code and make it ready for reviewing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from that, I will also try to shift my focus towards the other part of my project and write some theory solvers. After all, I need to enhance the assumptions not just make it faster &amp;#128526;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Peace&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-14-week-7.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 7: Matrix Wildcards</title>
      <pubDate>Sun, 14 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-14-week-7.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-07-07-week-6.html"&gt;previous post&lt;/a&gt; for Week 6&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I spent most of this week on extending wildcard support for matrix expressions, along with some more explorations in printing array contractions.&lt;/p&gt;
&lt;h2 id="matrices-and-wildcards"&gt;Matrices and Wildcards&lt;/h2&gt;
&lt;p&gt;As I&amp;#8217;ve probably mentioned in the last two blog posts, SymPy&amp;#8217;s support for matching matrix expressions through the &lt;code&gt;Wild&lt;/code&gt; class is currently severely limited (&lt;a href="https://github.com/sympy/sympy/issues/17172"&gt;when it works&lt;/a&gt;). While it is possible to construct a non-commutative &lt;code&gt;Wild&lt;/code&gt;, it isn&amp;#8217;t able to match expressions in a matrix multiplication:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W, X &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'W, X'&lt;/span&gt;, cls&lt;span class="op"&gt;=&lt;/span&gt;Wild, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt;  N&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, N, N), MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, N, N)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;type&lt;/span&gt;((A &lt;span class="op"&gt;*&lt;/span&gt; B).match(W &lt;span class="op"&gt;*&lt;/span&gt; X))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="st"&gt;'NoneType'&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s also currently not possible to combine matrices and wildcards in expressions, since wildcards don&amp;#8217;t have a defined shape and so may only function as scalars:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span class="op"&gt;+&lt;/span&gt; A&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="pp"&gt;TypeError&lt;/span&gt;: Mix of Matrix &lt;span class="kw"&gt;and&lt;/span&gt; Scalar symbols&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span class="op"&gt;*&lt;/span&gt; A&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="pp"&gt;NotImplementedError&lt;/span&gt;: noncommutative scalars &lt;span class="kw"&gt;in&lt;/span&gt; MatMul are &lt;span class="kw"&gt;not&lt;/span&gt; supported.&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="matrixwild"&gt;&lt;code&gt;MatrixWild&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I spent most of this week working on &lt;a href="https://github.com/sympy/sympy/pull/17177"&gt;#17177&lt;/a&gt;, which implements a &lt;code&gt;MatrixWild&lt;/code&gt; class that functions as both a wildcard and a matrix expression. In order to construct the wildcard, we need to give it a shape:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; N&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.matrices.expressions.matexpr &lt;span class="im"&gt;import&lt;/span&gt; MatrixWild&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W, X &lt;span class="op"&gt;=&lt;/span&gt; MatrixWild(&lt;span class="st"&gt;'W'&lt;/span&gt;, N, N), MatrixWild(&lt;span class="st"&gt;'X'&lt;/span&gt;, N, N)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike in the example above using &lt;code&gt;Wild&lt;/code&gt;, compound expressions are able to match against a matrix multiplication:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, N, N), MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, N, N)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (A &lt;span class="op"&gt;*&lt;/span&gt; B).match(W &lt;span class="op"&gt;*&lt;/span&gt; X)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" title="3"&gt;{W_: A, X_: B}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in order for matrix wildcards to match, their shape must match with the target expression:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'x'&lt;/span&gt;, N, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e &lt;span class="op"&gt;=&lt;/span&gt; A &lt;span class="op"&gt;*&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e.shape&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;(N, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;type&lt;/span&gt;(e.match(W))&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" title="6"&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="st"&gt;'NoneType'&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if we don&amp;#8217;t care about dimension, we can include another wildcard in the matrix wildcard&amp;#8217;s shape:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'M'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; w &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'w'&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Y &lt;span class="op"&gt;=&lt;/span&gt; MatrixWild(&lt;span class="st"&gt;'Y'&lt;/span&gt;, w, w)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M.match(Y)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" title="5"&gt;{w_: &lt;span class="dv"&gt;3&lt;/span&gt;, Y_: M}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this is a good first step to the matching functionality I was looking for with &lt;code&gt;unify&lt;/code&gt; for rewriting matrix expressions, there is still quite a bit of functionality (and tests) to be implemented, along with an unknown number of bugs to fix.&lt;/p&gt;
&lt;h2 id="printing-indexed-bases"&gt;Printing Indexed Bases&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve also been working on a small pull request to improve the functionality the printing &lt;code&gt;IndexedBases&lt;/code&gt; so that it instead uses intermediate values (represented through the new code generation classes) to accumulate the values of contractions. Currently, this does nothing but break existing compatibility (Fortran versions older than Fortran 95 don&amp;#8217;t support variable declarations in arbitrary locations, and the variable currently defaults to a 32-bit floating point number), though I think this is a good first step for supporting the printing of more complex contractions.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;For this week, I plan to finish with the implementation of&lt;code&gt;MatrixWild&lt;/code&gt; (and hopefully get started with using it for rewriting matrix expressions), along with making some more progress on the indexed bases pull request.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sc0rpi0n101.github.io/2019/07/week-7a-little-step-towards-consistency/</guid>
      <author>Nikhil Maan (Sc0rpi0n101)</author>
      <title>Nikhil Maan (Sc0rpi0n101): Week 7:A Little Step Towards Consistency</title>
      <pubDate>Sat, 13 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://sc0rpi0n101.github.io/2019/07/week-7a-little-step-towards-consistency/</link>
      <description>&lt;p&gt;&amp;#8220;It&amp;rsquo;s not what we do once in a while that shapes our lives. It&amp;rsquo;s what we do consistently.&amp;#8221;  &amp;#8213; Anthony Robbins
 Welcome everyone, this is your host Nikhil Maan aka Sc0rpi0n101 and this week I&amp;rsquo;ve tried to be more consistent with my schedule, work and communications with the Organization. I&amp;rsquo;ve taken a few small steps and plan to improve as I keep working.
 Consistency!? Merging the Pull Requests?</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=56</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-6-Completing the Column class.</title>
      <pubDate>Mon, 08 Jul 2019 04:44:15 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/08/gsoc19-week-6-completing-the-column-class/</link>
      <description>&lt;p&gt;The sixth week has ended with a lot of work to be done ahead.&lt;/p&gt;



&lt;p&gt;Last week the work was majorly focused on the work in progress &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt;. I have included the critical load function which makes the Column class capable of determining the critical load. Some problems still came up in solving some equations. I have made an &lt;a href="https://github.com/sympy/sympy/issues/17162"&gt;issue&lt;/a&gt; related to those.&lt;/p&gt;



&lt;p&gt;An equation similar to &lt;strong&gt;tan(x) &amp;#8211; x&lt;/strong&gt; comes up while determining the critical load for the&amp;nbsp;&lt;strong&gt;pinned-fixed&lt;/strong&gt;&amp;nbsp;end-condition. SymPy&amp;#8217;s &lt;strong&gt;solve() &lt;/strong&gt;won&amp;#8217;t be able to solve such an equation, and as per the solution given in the &lt;a href="https://github.com/sympy/sympy/issues/17162"&gt;issue&lt;/a&gt;, I think that &lt;strong&gt;nsolve()&lt;/strong&gt; would surely help in this case. So I will be going ahead to solve it using the approximation returned by &lt;strong&gt;nsolve()&lt;/strong&gt; to handle this condition.&lt;span id="more-56"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;Another problem that I faced was determining deflection and critical load for the&amp;nbsp;&lt;strong&gt;pinned-pinned&lt;/strong&gt;&amp;nbsp;end-condition. Here, the deflection comes out to be:&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;C1*sin(sqrt(P)*x/(sqrt(E)*sqrt(I)))&lt;/strong&gt; +&lt;strong&gt; C2*cos(sqrt(P)*x/(sqrt(E)*sqrt(I)))&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;Now on solving it for constants &lt;strong&gt;C1&lt;/strong&gt; and &lt;strong&gt;C2, &lt;/strong&gt;using initial boundary conditions,&amp;nbsp;both come out to be &lt;strong&gt;0&lt;/strong&gt;, making the deflection &lt;strong&gt;zero&lt;/strong&gt;. This implies that no buckling occurs, which is not the case.&lt;/p&gt;



&lt;p&gt;Even when solving it manually, this situation occurs, we deal with it by putting &lt;strong&gt;C2 = 0 &lt;/strong&gt;and instead of putting &lt;strong&gt;C1 = 0,&lt;/strong&gt; we consider the &lt;strong&gt;sin &lt;/strong&gt;term equal to zero and then solve for &lt;strong&gt;P (critical load).&amp;nbsp;&lt;/strong&gt;So, I will be adding a few more lines of code to deal with this situation.&lt;/p&gt;



&lt;p&gt;Apart from working on this module, I have also opened another &lt;a href="https://github.com/sympy/sympy/pull/17153"&gt;PR #17153&lt;/a&gt; which implement methods&amp;nbsp;to determine &lt;strong&gt;section modulus&lt;/strong&gt; and &lt;strong&gt;polar modulus&lt;/strong&gt; of any polygon (more precisely a cross-section). Initially it was a draft PR, but now the work has been completed on it. Once I get the approval, I will also be adding the same for the Ellipses module. Also, if &lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/17001"&gt;cut_section()&lt;/a&gt; &lt;/strong&gt;gets successfully implemented I will be adding another method to determine the first moment.&lt;/p&gt;



&lt;p&gt;I am pretty sure the work on &lt;strong&gt;Column class&lt;/strong&gt; will be successfully completed before the end of the next week. Also, we will be heading towards the next stage which intends to plot beam diagrams using matplotlib. Till then we can have an initial discussion regarding the same.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Improving the &lt;strong&gt;critical_load()&lt;/strong&gt; to handle the above problems&lt;/li&gt;&lt;li&gt;Completing the Column class (documentation and tests)&lt;/li&gt;&lt;li&gt;Starting with the next phase&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://czgdp1807.github.io/week_6</guid>
      <author>Gagandeep Singh (czgdp1807)</author>
      <title>Gagandeep Singh (czgdp1807): Week 6 - Some extensions</title>
      <pubDate>Mon, 08 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://czgdp1807.github.io/week_6/</link>
      <description>&lt;p&gt;This week was a mix of discussion on design and extending previous work. I also got to know about some new cool features of &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;According to the plan proposed in &lt;a href="https://czgdp1807.github.io/week_4/"&gt;Week 4&lt;/a&gt;, I have completed my work on &lt;code class="highlighter-rouge"&gt;DiscreteMarkovChain&lt;/code&gt; via &lt;a href="https://github.com/sympy/sympy/pull/17083"&gt;PR #17083&lt;/a&gt;. I used the &lt;code class="highlighter-rouge"&gt;as_set&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;as_relational&lt;/code&gt; methods which helped me to cover many miscellaneous cases and probably, now &lt;code class="highlighter-rouge"&gt;DiscreteMarkovChain&lt;/code&gt; is quite dynamic and can handle various generic &lt;code class="highlighter-rouge"&gt;probability&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;expectation&lt;/code&gt; queries. I have also started the &lt;a href="https://github.com/sympy/sympy/pull/17163"&gt;PR #17163&lt;/a&gt; for adding &lt;code class="highlighter-rouge"&gt;ContinuousMarkovChain&lt;/code&gt; and I am observing that it&amp;#8217;s a bit tricky to maintain both the performance and result quality while working on it. Now, moving on to symbolic &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt;,well, the work has been started in the &lt;a href="https://github.com/sympy/sympy/pull/17146"&gt;PR #17146&lt;/a&gt; and I have figured out one disparity between &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; and python&amp;#8217;s &lt;code class="highlighter-rouge"&gt;range&lt;/code&gt;(details available at &lt;a href="https://github.com/sympy/sympy/pull/17146#discussion_r300162219"&gt;this thread&lt;/a&gt;). I will try to fix it by making minimal changes to the code. The tensorflow related &lt;a href="https://github.com/sympy/sympy/pull/17103"&gt;PR #17103&lt;/a&gt; which I started in the previous week is also almost complete and is waiting for &lt;code class="highlighter-rouge"&gt;Tensorflow 2.0&lt;/code&gt; release. I am also studying a bit about the architecture of the above framework to make changes to &lt;code class="highlighter-rouge"&gt;lambdify&lt;/code&gt;. Regarding random matrices, I believe that discussion has reached its final stages and I am waiting for the comments from Francesco for improvements at the issue &lt;a href="https://github.com/sympy/sympy/issues/17039"&gt;#17039&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me share with you about my discoveries and learnings in this week. Well, thanks to Francesco for telling me about, &lt;code class="highlighter-rouge"&gt;sympy.multipledispatch&lt;/code&gt;. It helps in implementing operator overloading like in C/C++. I liked it very much. I also read about continuous Markov chain and discovered about generator matrix, forward and backward equations. Adding one interesting fact, that Poisson process and continuous Markov chain are very closely related via generator matrices it will make the implementation of the former much easier :D.&lt;/p&gt;

&lt;p&gt;Leaving you for now, Bye!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://divyanshu132.github.io//gsoc-week-6</guid>
      <author>Divyanshu Thakur (divyanshu132)</author>
      <title>Divyanshu Thakur (divyanshu132): GSoC 2019 - Week 6 - Computation of Polycyclic presentation</title>
      <pubDate>Mon, 08 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://divyanshu132.github.io//gsoc-week-6</link>
      <description>&lt;p&gt;The sixth week of coding period has ended and a good amount of work has been done on polycyclic groups. Polycyclic presentation, Polycyclic generating sequence(pcgs) and it&amp;#8217;s series is implemented which for sure need some improvement &lt;a href="https://github.com/sympy/sympy/pull/16991"&gt;sympy/sympy#16991&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The polycyclic series is computed starting from the bottom of the derived series of a group by adding the missing generators in the subgroups, and collecting these missing generators provide us the polycyclic generating sequence.&lt;/p&gt;

&lt;p&gt;As we discussed last week &lt;a href="https://divyanshu132.github.io/gsoc-week-5"&gt;here&lt;/a&gt; that to compute conjugate relators of a polycyclic group we were missing the &lt;code class="highlighter-rouge"&gt;RHS&lt;/code&gt; term, which was of the form &lt;code class="highlighter-rouge"&gt;x[i]**-1*x[i+1]*x[i] == RHS&lt;/code&gt;. So, starting from the bottom of the polycyclic generating sequence forming the subgroup and finding all the generators of the RHS using &lt;code class="highlighter-rouge"&gt;generator_product&lt;/code&gt;, mapping these generators with the free group elements and forming a word, finally collect the above formed word which will give us the collected RHS.&lt;/p&gt;

&lt;p&gt;Below is an example to compute polycyclic presentation for S(9).sylow_subgroup(3)&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics import *
&amp;gt;&amp;gt;&amp;gt; from sympy.combinatorics.free_groups import free_group
&amp;gt;&amp;gt;&amp;gt; F, x0, x1, x2, x3 = free_group("x0, x1, x2, x3")
&amp;gt;&amp;gt;&amp;gt; S = SymmetricGroup(9)
&amp;gt;&amp;gt;&amp;gt; G = S.sylow_subgroup(3)
&amp;gt;&amp;gt;&amp;gt; pc_group = G.polycyclic_group()
&amp;gt;&amp;gt;&amp;gt; group = F
&amp;gt;&amp;gt;&amp;gt; pc_group.pc_presentation(group)
{x3**3: (), x2**3: (), x1**3: (), x0**3: (), x2**-1*x3*x2: x3, x1**-1*x3*x1: x3, x1**-1*x2*x1: x2, x0**-1*x3*x0: x2**2*x3**2, x0**-1*x2*x0: x3, x0**-1*x1*x0: x1*x3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One problem that we&amp;#8217;ve encountered is that the generators in pcgs may change for the same group on executing it several times which makes it difficult to test pc_presentation but, Kalevi advised me to initalize &lt;code class="highlighter-rouge"&gt;random.seed&lt;/code&gt; with some chosen value and then it will result in the same repeatable result, will try it by today!&lt;/p&gt;

&lt;p&gt;The tasks that I&amp;#8217;m hopping to accomplish next week are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add tests for plycyclic presentation and be sure that it works properly.&lt;/li&gt;
  &lt;li&gt;Include more functionalities to pc groups like &lt;code class="highlighter-rouge"&gt;exponent_vector&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;element_depth&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;leading_coefficient&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add documentation for all the functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till then, good byee..&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://arighnaiitg.github.io/2019-07-07-gsoc-week6/</guid>
      <author>Arighna Chakrabarty (arighnaiitg)</author>
      <title>Arighna Chakrabarty (arighnaiitg): GSoC Week 6 !!</title>
      <pubDate>Sun, 07 Jul 2019 07:00:00 GMT</pubDate>
      <link>https://arighnaiitg.github.io/2019-07-07-gsoc-week6/</link>
      <description>&lt;p&gt;Week 6 ends.. - 
          Phase 2 of the coding period is smoothly being traversed. I recently had a meeting with Sartaj on 4th of July, Thursday. Here were the minutes of the meeting, along with the deliverables completed over the week. The meeting commenced with the discussion that we need to wrap up the...</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-07-week-6.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 6: Unification and Tensors Continued</title>
      <pubDate>Sun, 07 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-07-week-6.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-06-28-week-5.html"&gt;previous post&lt;/a&gt; for Week 5&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This week I&amp;#8217;ve made some progress on matching and tensors, though I haven&amp;#8217;t filed any pull requests.&lt;/p&gt;
&lt;h2 id="unification"&gt;Unification&lt;/h2&gt;
&lt;p&gt;I have a working implementation of rewriting non-commutative expressions using SymPy&amp;#8217;s unify. It works by generating a &lt;code&gt;ReplaceOptim&lt;/code&gt; object that applies the rewriting rules to any term it&amp;#8217;s called with. Here&amp;#8217;s how we specify the rewriting rules:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; Symbol, MatrixSymbol&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span class="op"&gt;=&lt;/span&gt; Symbol(&lt;span class="st"&gt;'N_matcher'&lt;/span&gt;, integer&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;True&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; X &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'X_matcher'&lt;/span&gt;, n, n)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Y &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'Y_matcher'&lt;/span&gt;, n, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; variables &lt;span class="op"&gt;=&lt;/span&gt; [n, X, Y]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; matcher &lt;span class="op"&gt;=&lt;/span&gt; X&lt;span class="op"&gt;**&lt;/span&gt;(&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; Y&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; goal &lt;span class="op"&gt;=&lt;/span&gt; MatrixSolve(X, Y)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the combination of &lt;code&gt;matcher&lt;/code&gt; and &lt;code&gt;variables&lt;/code&gt; specifies that we&amp;#8217;re looking for any expression of the form &lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;sup&gt;&amp;#8197;&amp;#8722;&amp;#8197;1&lt;/sup&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/span&gt;, where both &lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;/span&gt; and &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/span&gt; can be any compound matrix expression. The inclusion of &lt;code&gt;n&lt;/code&gt; in &lt;code&gt;variables&lt;/code&gt; imposes the additional restriction that the matrix expression matched by &lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;/span&gt; must be square (i.e. &lt;span class="math inline"&gt;&lt;em&gt;n&lt;/em&gt;&amp;#8197;&amp;#215;&amp;#8197;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt;) while the expression matched by &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/span&gt; must be a vector (i.e. &lt;span class="math inline"&gt;&lt;em&gt;n&lt;/em&gt;&amp;#8197;&amp;#215;&amp;#8197;1&lt;/span&gt;). &lt;code&gt;goal&lt;/code&gt; specifies what the matched expression should be replaced with, where &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; serve as stand-ins for the matched terms.&lt;/p&gt;
&lt;p&gt;After specifying our goals, we can construct the object and apply the replacement to some expressions:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; replacer &lt;span class="op"&gt;=&lt;/span&gt; gen_replacement_operator(matcher, goal, variables)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B, x &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;), MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;), MatrixSymbol(&lt;span class="st"&gt;'x'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; replacer(A &lt;span class="op"&gt;**&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; x)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;(MatrixSolve(A, vector&lt;span class="op"&gt;=&lt;/span&gt;x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; replacer(A &lt;span class="op"&gt;**&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; B)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;A &lt;span class="op"&gt;**&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; B&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first term was replaced since the dimensions of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; agreed with what was specified in matcher, while the second expression was left untouched since &lt;code&gt;B&lt;/code&gt; is not a vector.&lt;/p&gt;
&lt;p&gt;While the matcher does work, I haven&amp;#8217;t filed a pull request because of some problems which don&amp;#8217;t seem like they could be easily addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I had to give add the suffix &lt;code&gt;_matcher&lt;/code&gt; to the variable names to avoid variable capture, since SymPy symbols are considered equal if they have the same name. &lt;code&gt;unify&lt;/code&gt; does not support &lt;code&gt;Dummy&lt;/code&gt; symbols as variables.&lt;/li&gt;
&lt;li&gt;Some compound expressions are not matched. I&amp;#8217;ve narrowed this down to the way the variables are being passed to &lt;code&gt;unify&lt;/code&gt;, since they need to be converted to symbols. It seems like this conversion sometimes causes expressions to no longer be unifiable.&lt;/li&gt;
&lt;li&gt;Unification doesn&amp;#8217;t seem to work for a mixture of commutative and non-commutative expressions. I&amp;#8217;m not sure if this is a problem with &lt;code&gt;unify&lt;/code&gt; itself or the way that I&amp;#8217;m using it, since the only test of &lt;code&gt;unify&lt;/code&gt; in the SymPy codebase involving matrix expressions is on matrix multiplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned in my last blog post, SymPy already supports this sort of pattern matching through &lt;code&gt;Wild&lt;/code&gt;, though it currently does not support expressions involving matrices. Before trying to address these issues, I think it would be worthwhile to look into extending the functionality of &lt;code&gt;Wild&lt;/code&gt; as an alternative.&lt;/p&gt;
&lt;h2 id="tensors"&gt;Tensors&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve made some progress in low-level code generation of matrix expressions. I tried seeing if instances of classes in the &lt;code&gt;array_utils&lt;/code&gt; module could be converted to SymPy&amp;#8217;s AST representation before being passed off to the code generators. This doesn&amp;#8217;t seem possible at the moment, since the AST has a number of limitations (such as not supporting variables in &lt;code&gt;for&lt;/code&gt; loop ranges). The &lt;code&gt;IndexedBase&lt;/code&gt; printer already has some of the functionality that I&amp;#8217;m trying to implement, so I&amp;#8217;ve settled on extending the printer to support arbitrary contractions. This same functionality can probably be reused for the &lt;code&gt;array_utils&lt;/code&gt; printers. The implementation will hopefully be straightforward.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;My goal for this week is to have a pull request for the tensor code generation ready, along with a plan for what to do with matching.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://jmig5776.github.io//gsoc-week-6</guid>
      <author>Jogi Miglani (jmig5776)</author>
      <title>Jogi Miglani (jmig5776): GSoC 2019 - Week 6</title>
      <pubDate>Sun, 07 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://jmig5776.github.io//gsoc-week-6</link>
      <description>&lt;p&gt;This was the sixth week meeting with the GSoC mentors which was scheduled on
Sunday 7th July, 2019 between 1:45 - 2:45 PM (IST). Me, Yathartha and Amit
were the attendees of the meeting. This meeting was short.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Discussing previous week&amp;#8217;s progress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this meeting both the mentors were convinced by the code for Lambert&amp;#8217;s.
And few modifications in documentation and code clean up were suggested by them.
In this week the whole idea of power_list was droppped because @smichr suggested
code for replacing the symbol more targetted as we wanted by which the whole code
was improved. And it was decided to work upon on &lt;code class="highlighter-rouge"&gt;_solve_modular&lt;/code&gt; mainly now
onwards.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Next week goals&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Getting merge existing PR for Lambert&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Work upon &lt;code class="highlighter-rouge"&gt;_solve_modular&lt;/code&gt; PR&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If time left then find plan for Imageset Union.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code improvement takes time!!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
