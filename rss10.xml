<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">https://iamit.in/blog/upgrading-sympy-gamma</guid>
      <author>Amit Kumar (aktech)</author>
      <title>Amit Kumar (aktech): Porting SymPy Gamma to Google App Engine Python 3</title>
      <pubDate>Fri, 30 Oct 2020 18:30:00 GMT</pubDate>
      <link>https://iamit.in/blog/sympy-gamma-gae-python3/</link>
      <description>&lt;p&gt;This summer I had plenty of time during COVID-19 lockdown and I was looking at
&lt;a href="https://sympygamma.com/"&gt;SymPy Gamma&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;&lt;img src="https://iamit.in/assets/sympy-gamma-port/sympy_gamma_demo.gif" width="700" /&gt;&lt;/center&gt;

&lt;h2 id="sympy-gamma"&gt;Sympy Gamma&lt;/h2&gt;

&lt;p&gt;SymPy Gamma is a web application that executes mathematical expressions
via natural language input from the user, after parsing them as SymPy
expressions it displays the result with additional related computations.
It is inspired from the idea of &lt;a href="http://www.wolframalpha.com/"&gt;WolframAlpha&lt;/a&gt; which is based on the
commercial Computer Algebra System named &lt;a href="https://en.wikipedia.org/wiki/Mathematica"&gt;&amp;#8220;Mathematica&amp;#8221;&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;&lt;img src="https://iamit.in/assets/wolfram-alpha-logo.svg" width="300" /&gt;&lt;/center&gt;

&lt;p&gt;I have always been impressed by it ever since I first found about it.
While playing with it during this summer, I realised that it runs on Google
App Engine&amp;#8217;s Python 2.7 runtime. It is powered by SymPy, an open source
computer algebra system.&lt;/p&gt;

&lt;center&gt;&lt;img align="center" src="https://iamit.in/assets/Sympy_logo.svg" width="150" /&gt;&lt;/center&gt;

&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Despite being widely used around the world (about ~14K users everyday,
as seen from Google Analytics), there hasn&amp;#8217;t been a lot of development
in the past 5 years. Due to this the current infrastructure
was stuck on &lt;a href="https://en.wikipedia.org/wiki/Google_App_Engine"&gt;Google App Engine&lt;/a&gt;&amp;#8217;s Python 2 runtime which obviously does
not support Python 3.&lt;/p&gt;

&lt;p&gt;This also prevented it to use the latest version of SymPy. The SymPy
version (~0.7.6) it was using was last updated 6 years ago. This made
SymPy Gamma in urgent need for upgradation. At the time of writing this blog,
SymPy Gamma is running on Google App Engine&amp;#8217;s latest runtime and latest
version of SymPy.&lt;/p&gt;

&lt;h2 id="solution-and-process"&gt;Solution and Process&lt;/h2&gt;

&lt;p&gt;It was a fun project and was interesting to see how Google cloud offering has evolved
from Google App Engine to Google Cloud Platform. The old App engine did
seem like a minimal cloud offering launched by Google in an attempt to
ship something early and quickly. It reminded me of my first cloud project
in college (&lt;a href="https://github.com/aktech/dturmscrap"&gt;dturmscrap&lt;/a&gt;), which I
deployed to Google App Engine, back in 2015.&lt;/p&gt;

&lt;p&gt;I used Github projects to track the whole project, all the work done for this
can be seen &lt;a href="https://github.com/sympy/sympy_gamma/projects/1"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="-git-log"&gt;$ Git Log&lt;/h2&gt;

&lt;p&gt;Here is a summary of what was achieved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/135"&gt;PR 135&lt;/a&gt;: Migrating Django to a slightly higher version,
this was the first blood just to make sure everything was working. I upgraded it to the latest version of
Django that was supported on Python 2 runtime. This also exposed the broken CI, which was fixed in this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/137"&gt;PR 137&lt;/a&gt;: This upgraded the CI infrastructure to use Google Cloud SDK
for deployment, the previous method was discontinued.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/140"&gt;PR 140&lt;/a&gt;: Upgrading the Database backend to use Cloud NDB instead
of the legacy App Engine NDB.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/148"&gt;PR 148&lt;/a&gt;: Since we change the database backend, we needed something for
testing locally, this was done by using Google Cloud Datastore emulator locally.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/149"&gt;PR 149&lt;/a&gt;: The installation and setup of the project was quite a challenge.
Installing and keeping track of the versions of a number of application was non-trivial. This Pull request dockerized
the project and made the development setup trivial and it all boiled down to just one command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/152"&gt;PR 152&lt;/a&gt;: The login feature was previously implemented using the user API
of the Google App Engine&amp;#8217;s Python2 runtime, which was not available in Python 3 runtime. We removed the login feature as it
was not used by many and was too much effort to setup OAuth for login.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/153"&gt;PR 153&lt;/a&gt;: Now was the time to slowly move towards Python 3 by making the
code compatible with both 2 and 3. It was achieved via &lt;a href="https://python-modernize.readthedocs.io/en/latest/"&gt;python-modernize&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/154"&gt;PR 154&lt;/a&gt;: We then made the migration to Python 3.7 runtime and removed submodules
and introduced a &lt;code class="language-plaintext highlighter-rouge"&gt;requirements.txt&lt;/code&gt; for installing dependencies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/154"&gt;PR 159&lt;/a&gt;: The above change made it possible to upgrade SymPy to latest version,
which was 1.6 at that time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy_gamma/pull/154"&gt;PR 165&lt;/a&gt;: The last piece of the puzzle was upgrading Django itself, so we upgraded
it to the latest version, which was Django 3.0.8.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="next-steps"&gt;Next Steps&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;At the time of writing this Google has released the Python 3.8 runtime, it would nice to further upgrade it now.&lt;/li&gt;
  &lt;li&gt;The test coverage can be increased.&lt;/li&gt;
  &lt;li&gt;The code can be refactored to be more readable and approachable for new contributors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to Google for properly &lt;a href="https://cloud.google.com/appengine/docs/standard/python/migrate-to-python3"&gt;documenting the process&lt;/a&gt;,
which made the transition much easier.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://numfocus.org/"&gt;NumFocus&lt;/a&gt;, without them this project would not have been possible. Also thanks to
&lt;a href="https://github.com/certik"&gt;Ondrej Certik&lt;/a&gt; and &lt;a href="http://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt; for their advice and support
throughout the project.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Final-Report</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Final Report</title>
      <pubDate>Sat, 29 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Final-Report</link>
      <description>&lt;p&gt;This report summarises the work I have done during GSoC 2020 for SymPy. The links to the PRs are in chronological order. For following the progress made during GSoC, see my &lt;a href="https://sachin-4099.github.io/"&gt;blog&lt;/a&gt; for the weekly posts.&lt;/p&gt;

&lt;h2 id="about-me"&gt;About Me&lt;/h2&gt;

&lt;p&gt;I am Sachin Agarwal, a third-year undergraduate student majoring in Computer Science and Engineering from the Indian Institute of Information Technology, Guwahati.&lt;/p&gt;

&lt;h2 id="project-synopsis"&gt;Project Synopsis&lt;/h2&gt;

&lt;p&gt;My project involved fixing and amending functions related to series expansions and limit evaluation. For further information, my &lt;a href="https://drive.google.com/file/d/1OgbnWLzQzaLfmmSM-fK09TCJmUzJ6tq4/view"&gt;proposal&lt;/a&gt; for the project can be referred.&lt;/p&gt;

&lt;h2 id="pull-requests"&gt;Pull Requests&lt;/h2&gt;

&lt;p&gt;This section describes the actual work done during the coding period in terms of &lt;strong&gt;merged PRs&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id="phase-1"&gt;Phase 1&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19292"&gt;#19292&lt;/a&gt; : This PR added a condition to &lt;code class="language-plaintext highlighter-rouge"&gt;limitinf&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;gruntz.py&lt;/code&gt; resolving incorrect limit evaluations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19297"&gt;#19297&lt;/a&gt; : This PR replaced &lt;code class="language-plaintext highlighter-rouge"&gt;xreplace()&lt;/code&gt; with &lt;code class="language-plaintext highlighter-rouge"&gt;subs()&lt;/code&gt; in &lt;code class="language-plaintext highlighter-rouge"&gt;rewrite&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;gruntz.py&lt;/code&gt; resolving incorrect limit evaluations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19369"&gt;#19369&lt;/a&gt; : This PR fixed &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_nseries&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;mul.py&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19432"&gt;#19432&lt;/a&gt; : This PR added a functionality to the &lt;code class="language-plaintext highlighter-rouge"&gt;doit&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;limits.py&lt;/code&gt; which uses &lt;code class="language-plaintext highlighter-rouge"&gt;is_meromorphic&lt;/code&gt; for limit evaluations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19461"&gt;#19461&lt;/a&gt; : This PR corrected the &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_as_leading_term&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;tan&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;sec&lt;/code&gt; functions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19508"&gt;#19508&lt;/a&gt; : This PR fixed &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_nseries&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;power.py&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19515"&gt;#19515&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_rewrite_as_factorial&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_rewrite_as_gamma&lt;/code&gt; methods to &lt;code class="language-plaintext highlighter-rouge"&gt;class subfactorial&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="phase-2"&gt;Phase 2&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19555"&gt;#19555&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;cdir&lt;/code&gt; parameter to handle &lt;code class="language-plaintext highlighter-rouge"&gt;series expansions&lt;/code&gt; on &lt;code class="language-plaintext highlighter-rouge"&gt;branch cuts&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19646"&gt;#19646&lt;/a&gt; : This PR rectified the &lt;code class="language-plaintext highlighter-rouge"&gt;mrv&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;gruntz.py&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;cancel&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;polytools.py&lt;/code&gt; resolving &lt;code class="language-plaintext highlighter-rouge"&gt;RecursionError&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;Timeout&lt;/code&gt; in limit evaluations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19680"&gt;#19680&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;is_Pow&lt;/code&gt; heuristic to &lt;code class="language-plaintext highlighter-rouge"&gt;limits.py&lt;/code&gt; to improve the limit evaluations of &lt;code class="language-plaintext highlighter-rouge"&gt;Pow objects&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19697"&gt;#19697&lt;/a&gt; : This PR rectified &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_rewrite_as_tractable&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;class erf&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19716"&gt;#19716&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;_singularities&lt;/code&gt; to &lt;code class="language-plaintext highlighter-rouge"&gt;LambertW&lt;/code&gt; function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/18696"&gt;#18696&lt;/a&gt; : This PR fixed errors in assumptions when rewriting &lt;code class="language-plaintext highlighter-rouge"&gt;RisingFactorial&lt;/code&gt; / &lt;code class="language-plaintext highlighter-rouge"&gt;FallingFactorial&lt;/code&gt; as &lt;code class="language-plaintext highlighter-rouge"&gt;gamma&lt;/code&gt; or &lt;code class="language-plaintext highlighter-rouge"&gt;factorial&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="phase-3"&gt;Phase 3&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19741"&gt;#19741&lt;/a&gt; : This PR reduced &lt;code class="language-plaintext highlighter-rouge"&gt;symbolic multiples of pi&lt;/code&gt; in &lt;code class="language-plaintext highlighter-rouge"&gt;trigonometric functions&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19916"&gt;#19916&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_nseries&lt;/code&gt; method to &lt;code class="language-plaintext highlighter-rouge"&gt;sin&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;cos&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19963"&gt;#19963&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_is_meromorphic&lt;/code&gt; method to the &lt;code class="language-plaintext highlighter-rouge"&gt;class BesselBase&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/18656"&gt;#18656&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;Raabe's Test&lt;/code&gt; to the &lt;code class="language-plaintext highlighter-rouge"&gt;concrete&lt;/code&gt; module.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19990"&gt;#19990&lt;/a&gt; : This PR added &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_is_meromorphic&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_aseries&lt;/code&gt; methods to &lt;code class="language-plaintext highlighter-rouge"&gt;class lowergamma&lt;/code&gt;, 
&lt;code class="language-plaintext highlighter-rouge"&gt;_eval_is_meromorphic&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_rewrite_as_tractable&lt;/code&gt; methods to &lt;code class="language-plaintext highlighter-rouge"&gt;class uppergamma&lt;/code&gt; and rectified the &lt;code class="language-plaintext highlighter-rouge"&gt;eval&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;class besselk&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/20002"&gt;#20002&lt;/a&gt; : This PR fixed &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_nseries&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;log&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h2&gt;

&lt;p&gt;This section contains some of my PRs related to miscellaneous issues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19447"&gt;#19447&lt;/a&gt; : This PR added some required testcases to &lt;code class="language-plaintext highlighter-rouge"&gt;test_limits.py&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19537"&gt;#19537&lt;/a&gt; : This PR fixed a minor &lt;code class="language-plaintext highlighter-rouge"&gt;performance&lt;/code&gt; issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/19604"&gt;#19604&lt;/a&gt; : This PR fixed &lt;code class="language-plaintext highlighter-rouge"&gt;AttributeError&lt;/code&gt; in limit evaluation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="reviewed-work"&gt;Reviewed Work&lt;/h2&gt;

&lt;p&gt;This section contains some of the PRs which were reviewed by me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19546"&gt;#19546&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19660"&gt;#19660&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19730"&gt;#19730&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19737"&gt;#19737&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19743"&gt;#19743&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19771"&gt;#19771&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19805"&gt;#19805&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19824"&gt;#19824&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19876"&gt;#19876&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19922"&gt;#19922&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/19974"&gt;#19974&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="issues-opened"&gt;Issues Opened&lt;/h2&gt;

&lt;p&gt;This section contains some of the issues which were opened by me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/issues/19670"&gt;#19670&lt;/a&gt; : &lt;code class="language-plaintext highlighter-rouge"&gt;Poly(E**100000000)&lt;/code&gt; is slow to create.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/issues/19752"&gt;#19752&lt;/a&gt; : &lt;code class="language-plaintext highlighter-rouge"&gt;gammasimp&lt;/code&gt; can be improved for &lt;code class="language-plaintext highlighter-rouge"&gt;integer&lt;/code&gt; variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;

&lt;p&gt;This section describes the bugs fixed and the new features added during GSoC.&lt;/p&gt;

&lt;h4 id="fixed-limit-evaluations"&gt;Fixed Limit Evaluations&lt;/h4&gt;

&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit_seq&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0 
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced oo 
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 9
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced exp(7/3)
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# Previously it hanged
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"+-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;zoo&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised ValueError
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Previously it was returned unevaluated
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;digamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;digamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 5/6
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a b c x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced nan
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit_seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subfactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised AttributeError
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1e9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# Previously it hanged
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised RecursionError
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised RecursionError
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised RecursionError
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;1999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;  &lt;span class="c1"&gt;# Previously it hanged 
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised RecursionError
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# Previously it was returned unevaluted
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised RecursionError 
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;zoo&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'d t'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;erf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 1
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;erf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;erf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 1
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;erfc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;erf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 1
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LambertW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;LambertW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced b
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uppergamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;besselk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced besselk(0, oo)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rewrote-mul_eval_nseries"&gt;Rewrote Mul._eval_nseries()&lt;/h4&gt;

&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nseries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 1 + x/2 + O(x**2, x)
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nseries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 3 + O(x)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rewrote-pow_eval_nseries"&gt;Rewrote Pow._eval_nseries()&lt;/h4&gt;

&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="c1"&gt;# Previously produced x**(-5) + x**(-3) + 1/x + O(x**(-6), (x, oo))
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;152&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;714&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3472&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;17318&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# Previously produced 1 - 2*x**4 - 8*x**6 - 34*x**8 - 24*x**10 + 118*x**12 - 672*x**14 - 686*x**16 + O(x**17) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="added-series-expansions-and-limit-evaluations-on-branch-cuts"&gt;Added Series Expansions and Limit evaluations on Branch-Cuts&lt;/h4&gt;

&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;asin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;_eval_nseries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;asin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rectified-ff_eval_rewrite_as_gamma-and-rf_eval_rewrite_as_gamma"&gt;Rectified ff._eval_rewrite_as_gamma() and rf._eval_rewrite_as_gamma()&lt;/h4&gt;

&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;combsimp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RisingFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;3628800&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;rewrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Previously produced 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="added-raabes-test"&gt;Added Raabe&amp;#8217;s Test&lt;/h4&gt;

&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;is_convergent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised NotImplementedError
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;is_convergent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised NotImplementedError
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rewrote-log_eval_nseries"&gt;Rewrote log._eval_nseries()&lt;/h4&gt;

&lt;div class="language-py highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.491&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;removeO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.0360038887560022&lt;/span&gt;  &lt;span class="c1"&gt;# Previously raised ValueError
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id="future-work"&gt;Future Work&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Refactoring high level functions like &lt;code class="language-plaintext highlighter-rouge"&gt;series&lt;/code&gt;, &lt;code class="language-plaintext highlighter-rouge"&gt;nseries&lt;/code&gt;, &lt;code class="language-plaintext highlighter-rouge"&gt;lseries&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;aseries&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_is_meromorphic&lt;/code&gt; method or &lt;code class="language-plaintext highlighter-rouge"&gt;_singularities&lt;/code&gt; to as many special functions as possible.&lt;/li&gt;
  &lt;li&gt;Work can be done to resolve the issues opened by me (listed above).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This summer has been a great learning experience and has helped me get a good exposure of test-driven development. I plan to continue contributing to SymPy and will also try to help the new contributors. I am grateful to my mentors, &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; and &lt;a href="https://github.com/leosartaj"&gt;Sartaj Singh&lt;/a&gt; for reviewing my work, giving me valuable suggestions, and being readily available for discussions.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-12</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 12</title>
      <pubDate>Fri, 28 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-12</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/20002"&gt;Fixed _eval_nseries() of log&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This was a long pending issue. It was necessary to refactor the &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_nseries&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;log&lt;/code&gt; to fix some minor issues.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This marks the end of &lt;code class="language-plaintext highlighter-rouge"&gt;Phase-3&lt;/code&gt; of the program.
Finally, this brings us to the end of &lt;code class="language-plaintext highlighter-rouge"&gt;Google Summer of Code&lt;/code&gt; and I am really thankful to the &lt;code class="language-plaintext highlighter-rouge"&gt;SymPy&lt;/code&gt; Community and my mentor &lt;code class="language-plaintext highlighter-rouge"&gt;Kalevi Suominen&lt;/code&gt; for always helping and supporting me.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/08/24/final_report</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Final Report-GSoC 2020</title>
      <pubDate>Mon, 24 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/08/24/final_report.html</link>
      <description>&lt;p&gt;GSoC 2020 Report Smit Lunagariya: Improving and Extending stats module</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-11</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 11</title>
      <pubDate>Fri, 21 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-11</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/18656"&gt;Implemented Raabe&amp;#8217;s Test&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This was a long pending issue. &lt;code class="language-plaintext highlighter-rouge"&gt;Raabe's Test&lt;/code&gt; helps to determine the &lt;code class="language-plaintext highlighter-rouge"&gt;convergence&lt;/code&gt; of a series. It has been added to the &lt;code class="language-plaintext highlighter-rouge"&gt;concrete&lt;/code&gt; module to handle those cases when the &lt;code class="language-plaintext highlighter-rouge"&gt;ratio test&lt;/code&gt; becomes &lt;code class="language-plaintext highlighter-rouge"&gt;inconclusive&lt;/code&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19990"&gt;Fixed limit evaluations related to lowergamma, uppergamma and besselk function&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;We added &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_is_meromorphic&lt;/code&gt; method to class &lt;code class="language-plaintext highlighter-rouge"&gt;lowergamma&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;uppergamma&lt;/code&gt; so that some of the &lt;code class="language-plaintext highlighter-rouge"&gt;limits&lt;/code&gt; involving &lt;code class="language-plaintext highlighter-rouge"&gt;lowergamma&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;uppergamma&lt;/code&gt; functions 
get evaluated using the &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic check&lt;/code&gt; already present in the limit codebase. Now, to make &lt;code class="language-plaintext highlighter-rouge"&gt;lowergamma&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;uppergamma&lt;/code&gt; functions &lt;code class="language-plaintext highlighter-rouge"&gt;tractable&lt;/code&gt; for limit evaluations, 
&lt;code class="language-plaintext highlighter-rouge"&gt;_eval_aseries&lt;/code&gt; method was added to &lt;code class="language-plaintext highlighter-rouge"&gt;lowergamma&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_rewrite_as_tractable&lt;/code&gt; to &lt;code class="language-plaintext highlighter-rouge"&gt;uppergamma&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;Finally, we also &lt;code class="language-plaintext highlighter-rouge"&gt;rectified&lt;/code&gt; the &lt;code class="language-plaintext highlighter-rouge"&gt;eval&lt;/code&gt; method of class &lt;code class="language-plaintext highlighter-rouge"&gt;besselk&lt;/code&gt;, so that &lt;code class="language-plaintext highlighter-rouge"&gt;besselk(nu, oo)&lt;/code&gt; automatically evaluates to &lt;code class="language-plaintext highlighter-rouge"&gt;0&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/08/16/week_12</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 12-GSoC 2020</title>
      <pubDate>Sun, 16 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/08/16/week_12.html</link>
      <description>&lt;p&gt;This is the final blog of the official program highlighting the final week. Some of the key discussions were:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-10</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 10</title>
      <pubDate>Fri, 14 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-10</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19963"&gt;Added _eval_is_meromorphic() to bessel function&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;We added the &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_is_meromorphic&lt;/code&gt; method to the class &lt;code class="language-plaintext highlighter-rouge"&gt;BesselBase&lt;/code&gt; so that some of the limits involving &lt;code class="language-plaintext highlighter-rouge"&gt;bessel functions&lt;/code&gt; get evaluated using the &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic check&lt;/code&gt; already present in the limit codebase.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/08/09/week_11</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 11-GSoC 2020</title>
      <pubDate>Sun, 09 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/08/09/week_11.html</link>
      <description>&lt;p&gt;This blog describes the 11th week of the program. Some of the key highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-9</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 9</title>
      <pubDate>Fri, 07 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-9</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19741"&gt;Fixed periodicity of trigonometric function&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This was a long pending issue. The &lt;code class="language-plaintext highlighter-rouge"&gt;_peeloff_pi&lt;/code&gt; method of &lt;code class="language-plaintext highlighter-rouge"&gt;sin&lt;/code&gt; had to be rectified to reduce the symbolic multiples of pi in trigonometric functions.
As a result of this fix, now &lt;code class="language-plaintext highlighter-rouge"&gt;sin(2*n*pi + 4)&lt;/code&gt; automatically evaluates to &lt;code class="language-plaintext highlighter-rouge"&gt;sin(4)&lt;/code&gt;, when &lt;code class="language-plaintext highlighter-rouge"&gt;n&lt;/code&gt; is an &lt;code class="language-plaintext highlighter-rouge"&gt;integer&lt;/code&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19916"&gt;Fixed limit evaluations related to trigonometric functions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;In this PR, we added &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_nseries&lt;/code&gt; method to both &lt;code class="language-plaintext highlighter-rouge"&gt;sin&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;cos&lt;/code&gt; to make the limit evaluations more robust when it comes to trigonometric functions.
We also added a piece of code to &lt;code class="language-plaintext highlighter-rouge"&gt;cos.eval&lt;/code&gt; method so that the &lt;code class="language-plaintext highlighter-rouge"&gt;limit of cos(m*x)&lt;/code&gt;, where &lt;code class="language-plaintext highlighter-rouge"&gt;m&lt;/code&gt; is &lt;code class="language-plaintext highlighter-rouge"&gt;non-zero&lt;/code&gt;, and &lt;code class="language-plaintext highlighter-rouge"&gt;x&lt;/code&gt; tends to &lt;code class="language-plaintext highlighter-rouge"&gt;oo&lt;/code&gt; evaluates to &lt;code class="language-plaintext highlighter-rouge"&gt;AccumBounds(-1, 1)&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/08/02/week_10</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 10-GSoC 2020</title>
      <pubDate>Sun, 02 Aug 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/08/02/week_10.html</link>
      <description>&lt;p&gt;This blogs describes the 10th week of the program. Some of the highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/26/week_9</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 9-GSoC 2020</title>
      <pubDate>Sun, 26 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/26/week_9.html</link>
      <description>&lt;p&gt;This blogs describes the week 9, the beginning week of the final phase. This week, I continued to work on the extension of Compound Distributions as well as completing the Matrix Distributions. Some of the highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/19/week_8</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 8-GSoC 2020</title>
      <pubDate>Sun, 19 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/19/week_8.html</link>
      <description>&lt;p&gt;This blog provides the brief description of last week of the second Phase i.e. week 8. Some of the key highlights of this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-8</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 8</title>
      <pubDate>Sun, 12 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-8</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19716"&gt;Fixed incorrect limit evaluation related to LambertW function&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This was a minor bug fix. We added the &lt;code class="language-plaintext highlighter-rouge"&gt;_singularities&lt;/code&gt; feature to the &lt;code class="language-plaintext highlighter-rouge"&gt;LambertW&lt;/code&gt; function so that its limit gets evaluated using the &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic check&lt;/code&gt; already present in the limit codebase.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/18696"&gt;Fixed errors in assumptions when rewriting RisingFactorial / FallingFactorial as gamma or factorial&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;This was a long pending issue. The rewrite to &lt;code class="language-plaintext highlighter-rouge"&gt;gamma&lt;/code&gt; or &lt;code class="language-plaintext highlighter-rouge"&gt;factorial&lt;/code&gt; methods of &lt;code class="language-plaintext highlighter-rouge"&gt;RisingFactorial&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;FallingFactorial&lt;/code&gt; did not handle all the possible cases, which caused errors in some evaluations.
Thus, we decided to come up with a proper rewrite using &lt;code class="language-plaintext highlighter-rouge"&gt;Piecewise&lt;/code&gt; which accordingly returned the correct rewrite depending on the assumptions on the variables.
Handling such rewrites using &lt;code class="language-plaintext highlighter-rouge"&gt;Piecewise&lt;/code&gt; is never easy, and thus there were a lot of failing testcases.
After spending a lot of time debugging and fixing each failing testcase, we were finally able to merge this.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This marks the end of &lt;code class="language-plaintext highlighter-rouge"&gt;Phase-2&lt;/code&gt; of the program. I learnt a lot during these two months and gained many important things from my mentors.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/12/week_7</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 7-GSoC 2020</title>
      <pubDate>Sun, 12 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/12/week_7.html</link>
      <description>&lt;p&gt;This blog describes the 7th week of the program and the 3rd week of Phase 2. Some of the key highlights on the discussions and the implementations during this week are:</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-7</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 7</title>
      <pubDate>Sun, 05 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-7</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19680"&gt;Improved the limit evaluations of Power objects&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This PR improves the limit evaluations of Power objects.
We first check if the limit expression is a &lt;code class="language-plaintext highlighter-rouge"&gt;Power object&lt;/code&gt; and then accordingly evaluate the limit depending on different cases.
First of all, we express &lt;code class="language-plaintext highlighter-rouge"&gt;b**e&lt;/code&gt; in the form of &lt;code class="language-plaintext highlighter-rouge"&gt;exp(e*log(b))&lt;/code&gt;. After this, we check if &lt;code class="language-plaintext highlighter-rouge"&gt;e*log(b)&lt;/code&gt; is &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic&lt;/code&gt; and accordingly evaluate the final result.
This check helps us to handle the trivial cases in the beginning itself.&lt;/p&gt;

        &lt;p&gt;Now, if &lt;code class="language-plaintext highlighter-rouge"&gt;e*log(b)&lt;/code&gt; is not meromorphic, then we separately evaluate the limit of the base and the exponent.
This helps us to determine the &lt;code class="language-plaintext highlighter-rouge"&gt;indeterminant form&lt;/code&gt; of the limit expression if present. 
As we know, there are 3 indeterminate forms corresponding to power objects: &lt;code class="language-plaintext highlighter-rouge"&gt;0**0&lt;/code&gt;, &lt;code class="language-plaintext highlighter-rouge"&gt;oo**0&lt;/code&gt;, and &lt;code class="language-plaintext highlighter-rouge"&gt;1**oo&lt;/code&gt;, which need to be handled carefully.
If there is no indeterminate form present, then no further evaluations are required. Otherwise, we handle all the three cases separately and correctly evaluate the final result.&lt;/p&gt;

        &lt;p&gt;We also added some code to improve the evaluation of limits having &lt;code class="language-plaintext highlighter-rouge"&gt;Abs()&lt;/code&gt; expressions.
For every &lt;code class="language-plaintext highlighter-rouge"&gt;Abs()&lt;/code&gt; term present in the limit expression, we replace it simply by its argument or the negative of its argument, depending on
whether the value of the limit of the argument is greater than zero or less than zero for the given limit variable.&lt;/p&gt;

        &lt;p&gt;Finally, we were able to merge this after resolving some failing testcases.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19697"&gt;Fixed limit evaluations involving error functions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The incorrect limit evaluations of &lt;code class="language-plaintext highlighter-rouge"&gt;error functions&lt;/code&gt; were mainly because the &lt;code class="language-plaintext highlighter-rouge"&gt;tractable&lt;/code&gt; rewrite was wrong and did not handle all the possible cases.
For a proper rewrite, it was required that the limit variable be passed to the corresponding rewrite method.
This is because, to define a correct rewrite we had to evaluate the limit of the argument of the &lt;code class="language-plaintext highlighter-rouge"&gt;error function&lt;/code&gt;, for the passed limit variable.
Thus, we added a default argument &lt;code class="language-plaintext highlighter-rouge"&gt;limitvar&lt;/code&gt; to all the &lt;code class="language-plaintext highlighter-rouge"&gt;tractable rewrite&lt;/code&gt; methods and resolved this issue.
While debugging, we also noticed that the &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_as_leading_term&lt;/code&gt; method of error function was wrong, hence it was also fixed.&lt;/p&gt;

        &lt;p&gt;Finally, we were able to merge this after resolving some failing testcases.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/07/05/week_6</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 6-GSoC 2020</title>
      <pubDate>Sun, 05 Jul 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/07/05/week_6.html</link>
      <description>&lt;p&gt;This blog describes the 6th week of the official program and the 2nd week of Phase 2. By the end of this week, Compound Distributions framework is ready as targeted and I would now focus on the Joint Distributions in the upcoming weeks of this Phase.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-6</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 6</title>
      <pubDate>Sun, 28 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-6</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19646"&gt;Fixed RecursionError and Timeout in limit evaluations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The &lt;code class="language-plaintext highlighter-rouge"&gt;Recursion Errors&lt;/code&gt; in limit evaluations were mainly due to the fact that the indeterminant form of &lt;code class="language-plaintext highlighter-rouge"&gt;1**oo&lt;/code&gt; was not handled accurately in the &lt;code class="language-plaintext highlighter-rouge"&gt;mrv()&lt;/code&gt; function of the
&lt;code class="language-plaintext highlighter-rouge"&gt;Gruntz algorithm&lt;/code&gt;. So, some minor changes were required to fix those.&lt;/p&gt;

        &lt;p&gt;The major issue was to handle those cases which were timing out. On deep digging, we identified that the 
&lt;code class="language-plaintext highlighter-rouge"&gt;cancel()&lt;/code&gt; function of &lt;code class="language-plaintext highlighter-rouge"&gt;polytools.py&lt;/code&gt; was the reason. Thus, we decided to completely transform the &lt;code class="language-plaintext highlighter-rouge"&gt;cancel()&lt;/code&gt; function to speed up its algorithm. 
Now after this major modification, many testcases were failing as the &lt;code class="language-plaintext highlighter-rouge"&gt;cancel()&lt;/code&gt; function plays an important role in simplifying evaluations and 
is thus used at many places across the codebase. Therefore, a lot of time was spent in debugging and rectifying these testcases.&lt;/p&gt;

        &lt;p&gt;Finally we were able to merge this, enhancing the limit evaluation capabilities of &lt;code class="language-plaintext highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/06/28/week_5</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Week 5-GSoC 2020</title>
      <pubDate>Sun, 28 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/06/28/week_5.html</link>
      <description>&lt;p&gt;This blogs describes the week 5, the beginning week of the Phase 2. Phase 2 will be mostly focused on Compound Distributions which were stalled from 2018, and additions to Joint Distributions.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-5</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 5</title>
      <pubDate>Sun, 21 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-5</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19555"&gt;Adds cdir parameter to handle series expansions on branch cuts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Finally, after spending almost 2 weeks on this, we were able to merge the PR, adding a very important functionality of &lt;code class="language-plaintext highlighter-rouge"&gt;series expansions&lt;/code&gt; on the &lt;code class="language-plaintext highlighter-rouge"&gt;branch cuts&lt;/code&gt; to the codebase. 
Previously, either &lt;code class="language-plaintext highlighter-rouge"&gt;SymPy&lt;/code&gt; raised some error or the series expansion was computed incorrectly, when the value in the input was on the branch cut. But now, for most of the functions, the expansion produced is correct.&lt;/p&gt;

        &lt;p&gt;Not only this, we added the &lt;code class="language-plaintext highlighter-rouge"&gt;cdir&lt;/code&gt; parameter to &lt;code class="language-plaintext highlighter-rouge"&gt;leadterm&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;as_leading_term&lt;/code&gt; functions as well. We even extended the functionality a bit to the &lt;code class="language-plaintext highlighter-rouge"&gt;limits&lt;/code&gt; module, so now, 
&lt;code class="language-plaintext highlighter-rouge"&gt;limits&lt;/code&gt; of values lying on the branch cuts of a function are also computed correctly in most cases.&lt;/p&gt;

        &lt;p&gt;We are planning to extend this functionality to all the remaining &lt;code class="language-plaintext highlighter-rouge"&gt;special functions&lt;/code&gt; and wherever else possible to make the codebase even more &lt;code class="language-plaintext highlighter-rouge"&gt;robust&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://smit-create.github.io/Smit-create.github.io/2020/06/21/phase_1</guid>
      <author>Smit Lunagariya (Smit-create)</author>
      <title>Smit Lunagariya (Smit-create): Phase-1-Highlights</title>
      <pubDate>Sun, 21 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://smit-create.github.io/Smit-create.github.io/2020/06/21/phase_1.html</link>
      <description>&lt;p&gt;With this blog it completes the awesome month of statistical learning and coding, and the official Phase 1 of the Google Summer of Code-2020.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-4</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 4</title>
      <pubDate>Sun, 14 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-4</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19515"&gt;Fixed incorrect evaluation caused due to subfactorial in limit_seq expression&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This was a minor bug fix. 
The functionality of rewriting the &lt;code class="language-plaintext highlighter-rouge"&gt;subfactorial&lt;/code&gt; term present in an expression into an equivalent term expressed in 
the form of &lt;code class="language-plaintext highlighter-rouge"&gt;factorial&lt;/code&gt; or &lt;code class="language-plaintext highlighter-rouge"&gt;gamma&lt;/code&gt; was added which helped resolve the issue.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19555"&gt;Adds cdir parameter to handle series expansions on branch cuts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Currently, many functions in the codebase are unable to produce correct &lt;code class="language-plaintext highlighter-rouge"&gt;series expansions&lt;/code&gt; on &lt;code class="language-plaintext highlighter-rouge"&gt;branch cuts&lt;/code&gt;. As a result,
the limit evaluation takes place incorrectly for these functions when the limiting value lies on the branch cuts.&lt;/p&gt;

        &lt;p&gt;Thus, we have decided to come up with a parameter named &lt;code class="language-plaintext highlighter-rouge"&gt;cdir&lt;/code&gt; which stands for &lt;code class="language-plaintext highlighter-rouge"&gt;complex direction&lt;/code&gt; and it indicates the direction from which the series expansion is required, thus helping us
to produce the correct series expansion. Special care needs to be taken while handling series expansions on the &lt;code class="language-plaintext highlighter-rouge"&gt;branch points&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;Once we are finished with this work, it will be a &lt;code class="language-plaintext highlighter-rouge"&gt;major enhancement&lt;/code&gt; to the limit evaluation and series expansion capabilities of &lt;code class="language-plaintext highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This marks the end of &lt;code class="language-plaintext highlighter-rouge"&gt;Phase-1&lt;/code&gt; of the program. I learnt a lot during this one month and gained many important things from my mentors.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-3</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 3</title>
      <pubDate>Sun, 07 Jun 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-3</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19508"&gt;Fixed _eval_nseries() of Power&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This was a long pending issue. 
Previously, in the codebase the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of b**e&lt;/code&gt; was computed by breaking the code into different cases, depending on the 
values of the exponent or if the exponent has a symbol etc. Moreover, there was code to handle specific cases, and 
it was not written in a general way. As a result, the code was very long and it was difficult to debug it when some issue popped up.&lt;/p&gt;

        &lt;p&gt;Hence, it was very important to completely rewrite and clean-up &lt;code class="language-plaintext highlighter-rouge"&gt;Pow._eval_nseries()&lt;/code&gt;, so that many issues get resolved and 
it becomes easy to debug any further issues related to series expansions or limit evaluations.&lt;/p&gt;

        &lt;p&gt;Thus, we came up with a &lt;code class="language-plaintext highlighter-rouge"&gt;general algorithm&lt;/code&gt; covering all the cases.&lt;/p&gt;

        &lt;p&gt;The series expansion of &lt;code class="language-plaintext highlighter-rouge"&gt;b**e&lt;/code&gt; is computed as follows:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;We express &lt;code class="language-plaintext highlighter-rouge"&gt;b&lt;/code&gt; as &lt;code class="language-plaintext highlighter-rouge"&gt;f*(1 + g)&lt;/code&gt; where &lt;code class="language-plaintext highlighter-rouge"&gt;f&lt;/code&gt; is the leading term of &lt;code class="language-plaintext highlighter-rouge"&gt;b&lt;/code&gt;. &lt;code class="language-plaintext highlighter-rouge"&gt;g&lt;/code&gt; has order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**d)&lt;/code&gt; where &lt;code class="language-plaintext highlighter-rouge"&gt;d&lt;/code&gt; is strictly positive.&lt;/li&gt;
          &lt;li&gt;Then &lt;code class="language-plaintext highlighter-rouge"&gt;b**e&lt;/code&gt; = &lt;code class="language-plaintext highlighter-rouge"&gt;(f**e)*((1 + g)**e)&lt;/code&gt;where, &lt;code class="language-plaintext highlighter-rouge"&gt;(1 + g)**e&lt;/code&gt; is computed using the concept of &lt;code class="language-plaintext highlighter-rouge"&gt;binomial series&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;The major challenge which we had to face was the fragile nature of the existing code of &lt;code class="language-plaintext highlighter-rouge"&gt;Pow._eval_nseries()&lt;/code&gt;. 
Changing the code even a bit resulted in many test failures, as this function plays an important role in both series expansions and limit evaluations.&lt;/p&gt;

        &lt;p&gt;At times, it became extremely difficult to debug the cause of failures because there were several other functions as well on which the code of this function depended. 
Not only this, fixing one failure caused several others to pop-up.&lt;/p&gt;

        &lt;p&gt;Ultimately, after a week of hard-work, we got everything working.
After which, we further optimised the code ensuring that we are not compromising with efficiency.
At last, this issue was resolved and we ended up adding an extremely optimised implementation of the function to the codebase.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-2</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 2</title>
      <pubDate>Sun, 31 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-2</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19369"&gt;Fixed _eval_nseries() of Mul&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This was a long pending issue. 
Previously, in the codebase the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of a product&lt;/code&gt; was computed as the &lt;code class="language-plaintext highlighter-rouge"&gt;product of expansions of the factors&lt;/code&gt;. 
This approach was correct only when the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term of each series&lt;/code&gt; is a &lt;code class="language-plaintext highlighter-rouge"&gt;constant&lt;/code&gt; but not in general.&lt;/p&gt;

        &lt;p&gt;For example, to compute the expansion of &lt;code class="language-plaintext highlighter-rouge"&gt;f(x)/x**10&lt;/code&gt; at &lt;code class="language-plaintext highlighter-rouge"&gt;x = 0&lt;/code&gt; to order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**10)&lt;/code&gt; it is necessary to compute the series expansion 
of the function &lt;code class="language-plaintext highlighter-rouge"&gt;f(x)&lt;/code&gt; to order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**20)&lt;/code&gt; and thus, computing till order &lt;code class="language-plaintext highlighter-rouge"&gt;O(x**10)&lt;/code&gt; would not suffice.&lt;/p&gt;

        &lt;p&gt;The strategy we implemented to resolve this issue was:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Compute the order &lt;code class="language-plaintext highlighter-rouge"&gt;n0&lt;/code&gt; of the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term of the product&lt;/code&gt; as the &lt;code class="language-plaintext highlighter-rouge"&gt;sum of the orders&lt;/code&gt; of the &lt;code class="language-plaintext highlighter-rouge"&gt;leading terms of the factors&lt;/code&gt;.&lt;/li&gt;
          &lt;li&gt;For each factor, compute &lt;code class="language-plaintext highlighter-rouge"&gt;n - n0&lt;/code&gt; terms of its series expansion (starting from its &lt;code class="language-plaintext highlighter-rouge"&gt;leading term of order n1&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;ending at order n - n0 + n1&lt;/code&gt;).&lt;/li&gt;
          &lt;li&gt;Multiply the expansions (&lt;code class="language-plaintext highlighter-rouge"&gt;truncating at terms of order n&lt;/code&gt;).&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;I enjoyed implementing all this because at every step we had to ensure that we are not compromising with the efficiency of the code. 
Finally, this issue was resolved and we ended up adding an extremely optimised implementation of the function to the codebase.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19432"&gt;Used is_meromorphic() function to speed up limit evaluations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;In this PR, we made use of the &lt;code class="language-plaintext highlighter-rouge"&gt;is_meromorphic()&lt;/code&gt; function of SymPy to speed up limit evaluations for certain type of cases.&lt;/p&gt;

        &lt;p&gt;A function is said to be &lt;code class="language-plaintext highlighter-rouge"&gt;meromorphic&lt;/code&gt; at a point, if at that point the &lt;code class="language-plaintext highlighter-rouge"&gt;limit of the function exists but is infinite&lt;/code&gt;. 
In these cases, the value of the limit can usually be determined with the help of the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of that function&lt;/code&gt; and 
thus, there is no need to invoke the &lt;code class="language-plaintext highlighter-rouge"&gt;Gruntz algorithm&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;While working on the implementation of this functionality, we required the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term&lt;/code&gt; of the &lt;code class="language-plaintext highlighter-rouge"&gt;series expansion of the function in the limit expression at the point at which the limit needs to be evaluated&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;But we came across a weird situation, where for some functions, we got &lt;code class="language-plaintext highlighter-rouge"&gt;Complex Infinity&lt;/code&gt; as the &lt;code class="language-plaintext highlighter-rouge"&gt;leading term&lt;/code&gt;.
Thus, we had to rectify the &lt;code class="language-plaintext highlighter-rouge"&gt;_eval_as_leading_term()&lt;/code&gt; methods of these functions (done in a separate &lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19461"&gt;PR&lt;/a&gt;&lt;/strong&gt;).&lt;/p&gt;

        &lt;p&gt;After resolving this issue, we succeeded in adding the required functionality and hence, increased the efficiency of the limit evaluation algorithm of SymPy.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Week-1</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Week 1</title>
      <pubDate>Sun, 24 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Week-1</link>
      <description>&lt;p&gt;Key &lt;code class="language-plaintext highlighter-rouge"&gt;highlights&lt;/code&gt; of this week&amp;#8217;s work are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19292"&gt;Fixed incorrect limit evaluations caused due to different assumptions of the limit variable&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;In this issue, due to different assumptions of the limit variable, the output was coming out to be different and incorrect for the same limit expression.
On digging deep into this issue, we observed that the assumption &lt;code class="language-plaintext highlighter-rouge"&gt;integer = True&lt;/code&gt; was common between all the incorrectly evaluated limit expressions.
Thus, we concluded that the &lt;code class="language-plaintext highlighter-rouge"&gt;Gruntz algorithm&lt;/code&gt; is not able to correctly evaluate those expressions where the limit variable possesses &lt;code class="language-plaintext highlighter-rouge"&gt;integer = True&lt;/code&gt; property.
So, in order to get all the correct mathematical behaviour from the expression, we decided to define a dummy variable lacking &lt;code class="language-plaintext highlighter-rouge"&gt;integer = True&lt;/code&gt; property. 
After which, we simply had to substitute the limit variable with this dummy variable for these type of limit expressions to resolve the issue.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/19297"&gt;Fixed incorrect limit evaluations caused due to bug in rewriting&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;At first, this issue seemed tough to resolve because we were unable to find the source of the error. But then, we decided to examine each expression which is generated during evaluation.
This helped us to observe that &lt;code class="language-plaintext highlighter-rouge"&gt;rewriting&lt;/code&gt; of the expression was taking place incorrectly and we shifted our focus towards the &lt;code class="language-plaintext highlighter-rouge"&gt;rewrite()&lt;/code&gt; function.
Afterwards, it was pretty evident that the &lt;code class="language-plaintext highlighter-rouge"&gt;xreplace()&lt;/code&gt; function utilised for rewriting is not sufficient, as it did not find everything that needs to replaced.
Thus, replacing the &lt;code class="language-plaintext highlighter-rouge"&gt;xreplace()&lt;/code&gt; function with the &lt;code class="language-plaintext highlighter-rouge"&gt;subs()&lt;/code&gt; function helped us to resolve this issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-Community-Bonding-Period</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 - Community Bonding Period</title>
      <pubDate>Sun, 17 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-Community-Bonding-Period</link>
      <description>&lt;p&gt;The first part of my GSoC journey was the Community Bonding Period.&lt;/p&gt;

&lt;p&gt;In this period, I mainly focussed on the following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setting up my blog, where I will provide weekly reports on the progress of my project, and synchronizing it with Planet SymPy.&lt;/li&gt;
  &lt;li&gt;Setting up a public gitter channel for discussions regarding the project.&lt;/li&gt;
  &lt;li&gt;Prioritising the issues to be solved.&lt;/li&gt;
  &lt;li&gt;Deciding the finer details of the workflow with my mentors and working out efficient ways to solve each particular issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I have been contributing to SymPy for the past 8-9 months, it was easier for me to blend into the community.&lt;/p&gt;

&lt;p&gt;Now, as everything has gone as planned, I have decided to make a head start and begin with the implementation of my project.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sachin-4099.github.io//GSoC-2020-with-sympy</guid>
      <author>Sachin Agarwal (sachin-4099)</author>
      <title>Sachin Agarwal (sachin-4099): GSoC 2020 Acceptance</title>
      <pubDate>Thu, 07 May 2020 00:00:00 GMT</pubDate>
      <link>https://sachin-4099.github.io//GSoC-2020-with-sympy</link>
      <description>&lt;p&gt;&lt;img src="https://sachin-4099.github.io/public/gsoc.png" style="width: 30%; height: 30%; float: left;" /&gt;
&lt;img src="https://sachin-4099.github.io/public/sympy.png" style="width: 25%; height: 25%; float: right; margin-right: 100px;" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The results of &lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/organizations/4831132022996992/#5816442299088896"&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; were out on 04 May 2020 and I am pleased to share with you that my proposal with &lt;strong&gt;&lt;a href="http://sympy.org"&gt;SymPy&lt;/a&gt;&lt;/strong&gt; was accepted.&lt;/p&gt;

&lt;p&gt;I would like to thank all the members of the organisation especially &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; for guiding me in my proposal and PR&amp;#8217;s. I am really excited to work for such an amazing organization.&lt;/p&gt;

&lt;p&gt;I will be working on my project, &lt;a href="https://drive.google.com/file/d/1OgbnWLzQzaLfmmSM-fK09TCJmUzJ6tq4/view?usp=sharing"&gt;Amendments to Limit Evaluation and Series Expansion&lt;/a&gt;, during a period of 3 months spanning from June to August, under the mentorship of &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; and &lt;a href="https://github.com/leosartaj"&gt;Sartaj Singh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My primary focus will be to work on the &lt;code class="language-plaintext highlighter-rouge"&gt;series&lt;/code&gt; module and make it more robust as it is the backbone of all the limit evaluations performed by the library.&lt;/p&gt;

&lt;p&gt;Looking forward for a really productive and wonderful summer ahead.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=122</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): Everything about SymPy&#x2019;s Column module</title>
      <pubDate>Thu, 28 Nov 2019 19:56:42 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/11/29/everything-about-sympys-column-module/</link>
      <description>&lt;p&gt;The Column class implemented in &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt; enables the
continuum mechanics module of SymPy to deal with column buckling related
calculations. The Column module can calculate the moment equation, deflection
equation, slope equation and the critical load for a column defined by a user.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Example use-case of Column class:&lt;/strong&gt;&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.column import Column
&amp;gt;&amp;gt;&amp;gt; from sympy import Symbol, symbols
&amp;gt;&amp;gt;&amp;gt; E, I, P = symbols('E, I, P', positive=True)
&amp;gt;&amp;gt;&amp;gt; c = Column(3, E, I, 78000, top="pinned", bottom="pinned")
&amp;gt;&amp;gt;&amp;gt; c.end_conditions
{'bottom': 'pinned', 'top': 'pinned'}
&amp;gt;&amp;gt;&amp;gt; c.boundary_conditions
{'deflection': [(0, 0), (3, 0)], 'slope': [(0, 0)]}
&amp;gt;&amp;gt;&amp;gt; c.moment()
78000*y(x)
&amp;gt;&amp;gt;&amp;gt; c.solve_slope_deflection()
&amp;gt;&amp;gt;&amp;gt; c.deflection()
C1*sin(20*sqrt(195)*x/(sqrt(E)*sqrt(I)))
&amp;gt;&amp;gt;&amp;gt; c.slope()
20*sqrt(195)*C1*cos(20*sqrt(195)*x/(sqrt(E)*sqrt(I)))/(sqrt(E)*sqrt(I))
&amp;gt;&amp;gt;&amp;gt; c.critical_load()
pi**2*E*I/9
&lt;/pre&gt;



&lt;h1&gt;&lt;strong&gt;The Column class&lt;/strong&gt;&lt;/h1&gt;



&lt;p&gt;The Column class is non-mutable,&lt;span id="more-122"&gt;&lt;/span&gt; which means unlike the Beam class, a user cannot change the attributes of the class once they are defined along with the object definition. Therefore to change the attribute values one will have to define a new object.&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;Reasons for creating a non-mutable class&lt;/strong&gt;&lt;/h3&gt;



&lt;ul&gt;&lt;li&gt; From a backward-compatibility perspective, it is always possible to  adopt a different plan and add mutability later but not the other way  around. &lt;/li&gt;&lt;li&gt;Most things are immutable in SymPy which is useful for caching etc. Matrix is an example where allowing mutability has lead to many problems that are now impossible to fix without breaking backwards compatibility.&lt;/li&gt;&lt;/ul&gt;



&lt;h2&gt;&lt;strong&gt;Working of the column class:&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;
The &lt;strong&gt;governing equation&lt;/strong&gt; for column buckling is:&lt;/p&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/qfv6QbVnotFKUPebBoLgBNPjNz5uhN6g2-mbfBzDTR13Cb5z4BkAM7RHGerTtvqEzMzjQFL8r44iYeIVTm0OpYX6f0QWn2rCuz1qxKNVnvM6LHnTX9mfJ9pyBzPmBaFGZPrdiy-p" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;If we determine the the &lt;strong&gt;moment equation&lt;/strong&gt; of the column ,on which the buckling load is applied, and place it in the above equation,  we might be able to get the deflection by further solving the differential equation for &lt;strong&gt;y&lt;/strong&gt;. &lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Step-1: To determine the internal moment.&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;This is simply done by assuming deflection at any arbitrary cross section at a distance&lt;strong&gt; x&lt;/strong&gt; from the bottom as &lt;strong&gt;y &lt;/strong&gt;and then multiplying this by the load &lt;strong&gt;P&lt;/strong&gt; and for eccentric load another moment of magnitude &lt;strong&gt;P*e&lt;/strong&gt; is added to the moment.&lt;/p&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-129" src="https://ishanaj.files.wordpress.com/2019/11/image-2.png?w=641" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Simple load&lt;/strong&gt; &lt;strong&gt;is given by&lt;/strong&gt;:&amp;#160;&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/mY4nhR2YWfTEITzlL8LFRGnPq2KXPcwbyAGajOWtTkMEBYtTKGya0n4r62RolTLImOGjXazs0RqAjOyAy3K94vrM4G_xZxRKV-GBdG2uULX9qap7xPsgI6ahIY4-tXbx1zYH2LNR" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Eccentric load is given by:&amp;#160;&lt;/strong&gt;&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/vIfQDO151xRZO2hcDi9pSPeyafqlYmTUBnr_zszHjiZiv07cOA6xnuu__5EslONxpPtQFY5RaUGLXefgY0AtHip6Y6LgANv3XZ1uo790QctxO-Q5qTledCkiTuKzmpaMzJ5LBt-e" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Step-2: &lt;/strong&gt;This moment can then be substituted in the governing equation and the resulting differential equation can be solved using SymPy&amp;#8217;s &lt;strong&gt;dsolve()&lt;/strong&gt; for the &lt;strong&gt;deflection y&lt;/strong&gt;.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Applying different end-conditions&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;The above steps considers a simple example of a column pinned at both of its ends. But the end-condition of the column can vary, which will cause the moment equation to to vary.&lt;/p&gt;



&lt;p&gt;Currently &lt;strong&gt;four&lt;/strong&gt; basic supports are implemented:&amp;#160; Pinned-pinned, fixed-fixed, fixed-pinned, one pinned-other free.&lt;/p&gt;



&lt;p&gt;Depending on the supports the moment due to applied load would change as:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Pinned-Pinned:&lt;/strong&gt;&amp;nbsp; no change in moment&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/1rNjrJP3SC6q80sWh9m5-EAj80_YLYSmCECNYMqGh0n24r7EAqP5D8b-joCrvjhV0pnoQeD5EWrcStUufFj8zgHGSIMkk-lrnRPfkxYIJP42RIzh6pCNxthuEP83wWDdhAAZ8I30" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter is-resized"&gt;&lt;img alt="" height="218" src="https://lh4.googleusercontent.com/ki5Fbllhkj2xCcEJiRQxPyuTDlJnQGPfjcvk2GNjnJq5tNd83--zKWRKMck4v9TRx7SINESjNxcmdsXaXh6Le1-fBp8pQLY7pVTy-H_o895Ts_813cFmjlQDfbp34i3RJ3Qvb9RR" width="217" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Fixed-fixed&lt;/strong&gt;: reaction moment M is included&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/76IEGW9i83Am9oy_YQC7xm2BVGnEw_BcgM_bQxUgnVdWY4hBpgIIbhE4bG0C8FLpNYpajyoi7F_z8g4uVLfEZOfjv3dQBQ9fvLnIFVZUJvsIaleRSUVA7B1vrQsBj5FY3Ln3H6sx" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/8jXG4tyFMgAzJOanpHqj-d_f37-OkFrntfuhulynED1JjhNT6h_UkHmcAtDyN3Rem95uYIoKuhHUkslItdgIictxZC8dS_6mA9xbW-YxcDgMtyJ-L46UExUNH8VR8octca5v7RWa" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Fixed-pinned:&lt;/strong&gt;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/zphyPG-BZaoTYFrhY1NVWVza7oBX85d-K3HIDXF02bpcG_3gMsA8zMD-T6UO1X7GX4ssJYeok9IFCILq18GZMDkztjLdA_IA_Otq-qSM30Us22gwqPjPwPnhubYPG3jwtwzq0yML" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;Here &lt;strong&gt;M&lt;/strong&gt; is the restraint moment at &lt;strong&gt;B (&lt;/strong&gt;which is fixed&lt;strong&gt;). &lt;/strong&gt;To counter this, another moment is considered by applying a horizontal force &lt;strong&gt;F&lt;/strong&gt; at point A.&lt;/p&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/2Wlvbp1qFbq2p9uf057TCNM7StusOl0J5VAFU-qMQ0BhKTDDdtvP_l-tPgSkC9vmmsAaJd3QR8sEddl_z4LsAqo5FBKEvQNVF6eEssYdex61ENPUb4qWf6nFV7OkZV1Hy5ftDCdJ" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;One pinned- other free:&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/8vG470fp-wb2CzGMHfR5_chDnr4SqLGM0pAaRXXLSiDklpxXlcCoVOAh8q4dc97ZjWF3GM5-HvPGO1RzRhevUpDxl-cM6pHhztiTxJY-P7Ft04bfciVYK-FnzYJTZr4TvNqqX_wJ" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/eoHyQWUNWNOTFDsofRof215piNvdk9OqETpA4YQWRlp904vpTx69eKRxW12NdAHGxTBNRs63oyP87cMT36DE5judlZWoVeh_7zpP7Vxq5MZ_RkUieecAZGgxSm8Hj5RpKrZIk87g" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;h2&gt; &lt;strong&gt;Solving for slope and critical load&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;Once we get the deflection equation we can solve for the slope by differentiating the deflection equation with respect to &lt;strong&gt;x&lt;/strong&gt;. This is done by SymPy&amp;#8217;s &lt;strong&gt;diff()&lt;/strong&gt; function&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
self._slope = self._deflection.diff(x)
&lt;/pre&gt;



&lt;h2&gt;&lt;strong&gt;Critical load&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;Critical load for single bow buckling condition can be easily determined by the substituting the boundary conditions in the deflection equation and solving it for &lt;strong&gt;P&lt;/strong&gt; i.e the load.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Even if the user provides the applied load, during the entire calculation, we consider the  load to be &lt;strong&gt;P&lt;/strong&gt;. Whenever the &lt;strong&gt;moment()&lt;/strong&gt;, &lt;strong&gt;slope(), deflection(),&lt;/strong&gt; &lt;strong&gt;etc&lt;/strong&gt;. methods are called the variable &lt;strong&gt;P &lt;/strong&gt;is replaced with the users value. This is done so that it is easier for us to calculate the critical load in the end.&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
defl_eqs = []
# taking last two bounndary conditions which are actually
# the initial boundary conditions.
for point, value in self._boundary_conditions['deflection'][-2:]:
    defl_eqs.append(self._deflection.subs(x, point) - value)

# C1, C2 already solved, solve for P
self._critical_load = solve(defl_eqs, P, dict=True)[0][P]
&lt;/pre&gt;



&lt;p&gt;The case of the pinned-pinned end condition is a bit tricky.  On solving the differential equation via &lt;strong&gt;dsolve()&lt;/strong&gt;, the deflection comes out to be zero. This problem has been described in &lt;a href="https://ishanaj.wordpress.com/2019/07/08/gsoc19-week-6-completing-the-column-class/#more-56"&gt;this&lt;/a&gt; blog. Its calculation is handled a bit differently in the &lt;a href="https://github.com/sympy/sympy/pull/17122/files#diff-00c8ee080a295764f42be4b0e448935dR225"&gt;code&lt;/a&gt;. Instead of directly solving it via &lt;strong&gt;dsolve()&lt;/strong&gt;, it is solved in steps, and the trivial solutions are removed. This technique not only solves for the deflection of the column, but simultaneously also calculates the critical load it can bear.&lt;/p&gt;



&lt;p&gt;Although this may be considered as a hack to the problem. I think in future it would be better if &lt;strong&gt;dsolve()&lt;/strong&gt; gets the ability to remove the trivial solutions. But this seems to be better as of now.&lt;/p&gt;



&lt;p&gt;A problem that still persists is the calculation of critical load for pinned-fixed end condition. Currently, it has been made as an XFAIL, since to resolve that either &lt;strong&gt;solve()&lt;/strong&gt; or &lt;strong&gt;solveset() &lt;/strong&gt;has to return the solution in the required form. An &lt;a href="https://github.com/sympy/sympy/issues/17162"&gt;issue &lt;/a&gt;has been raised on GitHub, regarding the same.&lt;/p&gt;



&lt;p&gt;Hope that gives a crisp idea about the functioning of SymPy&amp;#8217;s Column module.&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sc0rpi0n101.github.io/2019/08/week-12-the-final-week/</guid>
      <author>Nikhil Maan (Sc0rpi0n101)</author>
      <title>Nikhil Maan (Sc0rpi0n101): Week 12: The Final Week</title>
      <pubDate>Fri, 23 Aug 2019 00:00:00 GMT</pubDate>
      <link>https://sc0rpi0n101.github.io/2019/08/week-12-the-final-week/</link>
      <description>&lt;p&gt;&amp;#8220;Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the Second Law of Thermodynamics; i.e., it always increases.&amp;#8221; &amp;#8212; Norman Augustine
 Welcome everyone, this is your host Nikhil Maan aka Sc0rpi0n101 and this week will be the last week of coding for GSoC 2019. It is time to finish work now.
 The C Parser Travis Build Tests Documentation  The C Parser I completed the C Parser last week along with the documentation for the module.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sc0rpi0n101.github.io/2019/08/week-11-the-other-parser/</guid>
      <author>Nikhil Maan (Sc0rpi0n101)</author>
      <title>Nikhil Maan (Sc0rpi0n101): Week 11: The Other Parser</title>
      <pubDate>Thu, 22 Aug 2019 00:00:00 GMT</pubDate>
      <link>https://sc0rpi0n101.github.io/2019/08/week-11-the-other-parser/</link>
      <description>&lt;p&gt;Welcome everyone, this is your host Nikhil Maan aka Sc0rpi0n101 and this week we&amp;rsquo;re talking about the C parser.
 The Fortran Parser The C Parser Documentation Travis Build  The Fortran Parser The Fortran Parser is complete. The Pull Request has also been merged. The parser is merged in master and will be a part of the next SymPy release. You can check out the source code for the Parser at the Pull Request.</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=113</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-12 &#x2013; The Final wrap-up</title>
      <pubDate>Tue, 20 Aug 2019 17:10:27 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/08/20/gsoc19-week-12-the-final-wrap-up/</link>
      <description>&lt;p&gt;This was the last week of the coding
period. With not much of work left, the goal was to wrap-up the PR&amp;#8217;s.&lt;/p&gt;



&lt;p&gt;The week started with the merge of &amp;nbsp;&lt;a href="https://github.com/sympy/sympy/pull/17001"&gt;PR #17001&lt;/a&gt; which implemented a method &lt;strong&gt;cut_section()&lt;/strong&gt; in the polygon class, in order to get two new polygons when a polygon is cut via a line. After this a new method &lt;strong&gt;first_moment_of_area()&lt;/strong&gt; was added in &lt;a href="https://github.com/sympy/sympy/pull/17153"&gt;PR #17153&lt;/a&gt;. This method used &lt;strong&gt;cut_section()&lt;/strong&gt; for its implementation. Tests for the same were added in this PR. Also the existing documentation was improved. I also renamed the &lt;strong&gt;polar_modulus()&lt;/strong&gt; function to &lt;strong&gt;polar_second_moment_of_area() &lt;/strong&gt;which was a more general term as compared to the previous name. This PR also got &lt;strong&gt;merged&lt;/strong&gt; later on.&lt;/p&gt;



&lt;p&gt;Now, we are left with two more PR&amp;#8217;s to go.
&lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt; (Column
Buckling) and &lt;a href="https://github.com/sympy/sympy/pull/17345"&gt;PR #17345&lt;/a&gt;
(Beam diagram). The column buckling probably requires a little more
documentation. I will surely look into it and add some more explanations and references
to it. Also, the beam diagram PR has been completed and documented. A few more
discussions to be done on its working and we will be ready with it.&lt;span id="more-113"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;I believe that by the end of this week
both of these will finally get a merge.&lt;/p&gt;



&lt;p&gt;Another task that remains is the implementation of the &lt;a href="https://github.com/sympy/sympy/issues/17302"&gt;Truss class&lt;/a&gt;. Some rigorous debate and discussion is still needed to be done before we start its implementation. Once we agree on the implementation needs and API it won&amp;#8217;t be a difficult task to write it through.&lt;/p&gt;



&lt;p&gt;Also, since the final evaluations have
started I will be writing the project report which I have to submit before the
next week ends.&lt;/p&gt;



&lt;p&gt;Since officially the coding period ends here, there would be no ToDo&amp;#8217;s for the next week, just the final wrapping up and will surely try to complete the work that is still left.&lt;/p&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks! &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
