<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/08/28/GSoC17-Final-Report</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): GSoC17 Final Report</title>
      <pubDate>Mon, 28 Aug 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/08/28/GSoC17-Final-Report.html</link>
      <description>&lt;h1 id="gsoc-2017-rule-based-integration-report"&gt;GSoC 2017 Rule Based Integration Report&lt;/h1&gt;

&lt;h2 id="about-me"&gt;About Me&lt;/h2&gt;
&lt;p&gt;My name is Arihant Parsoya. I am a junior undergraduate student at Indian Institute of Technology Bombay. My GSoC project was to implement rule based integration module in SymPy.&lt;/p&gt;

&lt;h2 id="community-bonding-period"&gt;Community Bonding Period&lt;/h2&gt;
&lt;p&gt;My original plan was to implement &lt;a href="https://github.com/parsoyaarihant/gsoc/wiki/GSoC-2017-Application-Arihant-Parsoya:-Rubi-Integrator#match-object"&gt;pattern matching module&lt;/a&gt; in SymPy which would be optimised for our project and then create a decision tree by parsing Mathematica rules.&lt;/p&gt;

&lt;p&gt;After my selection for GSoC, we came across &lt;a href="https://github.com/HPAC/matchpy"&gt;MatchPy&lt;/a&gt;(which has good pattern matching capabilities) and decided to use it for implementation of our module. However, MatchPy is only implemented in Python3.6 because of which we could not use MatchPy for Python&amp;lt;3.6 versions of SymPy. I tried to use &lt;a href="https://pypi.python.org/pypi/3to2"&gt;3to2&lt;/a&gt; to make MatchPy code compatible with Python&amp;lt;3.6 but it turns out that MatchPy also has few external dependencies and they also had to be added into SymPy.&lt;/p&gt;

&lt;h2 id="coding-period"&gt;Coding Period&lt;/h2&gt;
&lt;p&gt;We decided to implement the module only for Python3.6 using MatchPy hoping that we could do code-generation of rules once we added all the rules to MatchPy&amp;#8217;s &lt;code class="highlighter-rouge"&gt;ManyToOneReplacer&lt;/code&gt;. Manuel Kebber helped us a lot in adding support for optional arguments and code-generation in MatchPy. Unfortunately, the code generation still has the dependency on MatchPy.&lt;/p&gt;

&lt;h3 id="implementations--work-done"&gt;Implementations / work done&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Utility functions&lt;/li&gt;
  &lt;li&gt;Python parser for rules written in Mathematica.&lt;/li&gt;
  &lt;li&gt;Added rules in MatchPy&amp;#8217;s &lt;code class="highlighter-rouge"&gt;ManyToOneReplacer&lt;/code&gt;.
The work done could not be merged since it has dependency on MatchPy and is not fully tested.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="future-work"&gt;Future Work&lt;/h3&gt;
&lt;p&gt;The module so far is not really usable due to its high loading time and dependency on MatchPy. In my opinion, to add Rubi to SymPy, we need to implement MatchPy capabilities into SymPy(along with code generation) so SymPy doesn&amp;#8217;t have dependency on MatchPy. There is some work left in the current module which could not be completed since they require longer time than available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testing all the rules. There are thousands of tests in Rubi test suit. All the tests should be tested properly. I have done majority of tests in &lt;code class="highlighter-rouge"&gt;linear_products&lt;/code&gt;. Testing takes lot of time since Rubi takes time to load. Every failure needs to be investigated individually. For debugging purposes, Francesco helped us create &lt;code class="highlighter-rouge"&gt;get_matching_rule_definition&lt;/code&gt; function which helps us identify the rule which is getting matched.&lt;/li&gt;
  &lt;li&gt;Code generation of rules. In my opinion, it is important to complete the test suit of Rubi. Code generation can be done after that.&lt;/li&gt;
  &lt;li&gt;Adding support for &lt;code class="highlighter-rouge"&gt;Piecewise&lt;/code&gt; functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="post-gsoc"&gt;Post GSoC&lt;/h2&gt;
&lt;p&gt;I plan to continue working with SymPy to help it grow by adding more functionalities. I may even apply again in a future year to implement some other thing in SymPy, or maybe apply as a mentor for SymPy to help someone else improve it.&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Link to pull request: &lt;a href="https://github.com/sympy/sympy/pull/12978"&gt;https://github.com/sympy/sympy/pull/12978&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Weekly blog link: &lt;a href="https://parsoyaarihant.github.io/blog/"&gt;https://parsoyaarihant.github.io/blog/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/08/25/report</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): Final Report</title>
      <pubDate>Fri, 25 Aug 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/08/25/report/</link>
      <description>&lt;p&gt;GSoC is coming to an end, and it&amp;#8217;s time for the final report (which is not to say that I won&amp;#8217;t make a couple more posts after this). In this post I will summarise the work I&amp;#8217;ve done so far with links to PRs in approximately the order they were submitted.&lt;/p&gt;

&lt;p&gt;First of all, looking at my &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2017-Application-Valeriia-Gladkova:-Group-Theory"&gt;proposal&lt;/a&gt;, I&amp;#8217;d say that I have done all that was planned plus some minor additional things here and there (discovering and fixing bugs, modifying existing functions and occasionally adding new ones beyond what was planned). However, there is certainly room for improvement, and I will mention where the work could continue as I go through the PRs. So here it is.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12658"&gt;The &lt;code class="highlighter-rouge"&gt;subgroup&lt;/code&gt; method PR&lt;/a&gt;. Here I added &lt;code class="highlighter-rouge"&gt;subgroup()&lt;/code&gt; methods to the &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; classes. There were some discussions as I wondered if &lt;code class="highlighter-rouge"&gt;FreeGroup&lt;/code&gt; class could be implemented differently, but it was mostly straightforward. Perhaps, it would be useful to add a keyword argument or something like that to &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;&amp;#8217;s &lt;code class="highlighter-rouge"&gt;subgroup()&lt;/code&gt; to allow the user to get hold of the injective homomorphism from the subgroup to the parent group.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12681"&gt;Improvements to simplifying subgroup presentations.&lt;/a&gt; I didn&amp;#8217;t look at &lt;code class="highlighter-rouge"&gt;_elimination_technique_2&lt;/code&gt; because it is not used anywhere in the code at the moment but it could probably be improved as well, especially now
that some new &lt;code class="highlighter-rouge"&gt;FreeGroupElement&lt;/code&gt; methods are available: one of them is the general substitution of words that I implemented in this PR and, as I recall, I modified a few other &lt;code class="highlighter-rouge"&gt;FreeGroupElement&lt;/code&gt; methods there, as I discovered that some of them were buggy or not general enough. In a later PR (#9), I united the main elimination technique (which removes redundant generators) and the simplification of relators into one function &lt;code class="highlighter-rouge"&gt;simplify_presentation&lt;/code&gt; that can be applied to any group, not just as part of &lt;code class="highlighter-rouge"&gt;reidemeister_presentation&lt;/code&gt; (used for finding presentations of subgroups).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12705"&gt;The Smith Normal form PR.&lt;/a&gt; This is the only time I did work somewhere other than the &lt;code class="highlighter-rouge"&gt;combinatorics&lt;/code&gt; module during the project. I implemented the Smith Normal form for principal ideal domains because it could be used to test if a group is infinite (not a definitive test, as if the test is negative, we can&amp;#8217;t conclude the group isn&amp;#8217;t infinite). It&amp;#8217;s a bit awkward to use at the moment because the user has to add manually a certain attribute to their matrix and it won&amp;#8217;t be resolved until some further work is done on matrices. I wrote a bit more about it in the &lt;a href="https://valglad.github.io/2017/06/05/smith/"&gt;relevant post&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12761"&gt;Changing the order method&lt;/a&gt;. The previous PR allowed returning &lt;code class="highlighter-rouge"&gt;S.Infinity&lt;/code&gt; as the order of the group in some cases where in the past the &lt;code class="highlighter-rouge"&gt;order()&lt;/code&gt; method wouldn&amp;#8217;t terminate. This PR extended it even further by calculating the order in stages. First, it attempts to find a finite index subgroup and, if it succeeds, it finds the presentation of this subgroup and applies &lt;code class="highlighter-rouge"&gt;order()&lt;/code&gt; to it. In some cases, other methods can determine that this subgroup is infinite in which case, of course, the whole group is infinite. If it&amp;#8217;s finite, then the order of the group is the index times the order of the subgroup. It is still possible that this never terminates if a finite index subgroup is not found, but it&amp;#8217;s an improvement. It can be faster than direct coset enumeration on the trivial subgroup (that was used before) but occasionally it seems too slow for even smallish groups. Usually, the slowest part is finding the subgroup&amp;#8217;s presentation but sometimes it&amp;#8217;s the search for this subgroup that takes up the time. I feel that more work should be done here to make it more efficient.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12827"&gt;The homomorphism PR.&lt;/a&gt; This was a substantial PR: not only did it introduce two new classes (&lt;code class="highlighter-rouge"&gt;GroupHomomorphism&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;FpSubgroup&lt;/code&gt;), it also involved quite a lot of work in the &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; class in order to implement the method that expresses a given permutation in terms of the group&amp;#8217;s strong generators. At this stage only homomorphisms from &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; were fully implemented. The kernel computation can&amp;#8217;t handle infinite domains - maybe, this could be addressed in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12893"&gt;The Rewriting System PR.&lt;/a&gt; This was probably the hardest thing in the project and it probably took the longest to get merged after its review started (or at least it felt the longest). Even after it did, some problems kept coming up. It seems stable at the moment but it could certainly do with more work. One thing that comes to mind is the reduction method: it is possible to do it more efficiently with an automaton which is built and modified as more reduction rules are added to the system. Also, perhaps, the completion algorithm could be made more efficient in some way.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12973"&gt;Fixing a bug in &lt;code class="highlighter-rouge"&gt;reidemester_presentation&lt;/code&gt;.&lt;/a&gt; Discovered by accident, there was a small bug in &lt;code class="highlighter-rouge"&gt;reidemeister_presentation&lt;/code&gt; that led to &lt;code class="highlighter-rouge"&gt;order()&lt;/code&gt; returning wrong answers in some specific cases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13028"&gt;FpSubgroup&amp;#8217;s &lt;code class="highlighter-rouge"&gt;__contains__&lt;/code&gt; method.&lt;/a&gt; After the homomorphism PR was merged, it was discovered that occasionally the tests involving kernels would time out. This was because FpSubgroup&amp;#8217;s &lt;code class="highlighter-rouge"&gt;__contains__&lt;/code&gt; method would go into an infinite loop on encountering elements of the conjugate form &lt;code class="highlighter-rouge"&gt;a**-1*w*a&lt;/code&gt;. It took some time to work out a way of dealing with it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/12986"&gt;Finite presentation of permutation groups.&lt;/a&gt; This is something I keep working on. The general algorithm is implemented and merged, however, the efficiency could potentially be improved by using a different method based on the group&amp;#8217;s strong generating set. I have tried one implementation but it&amp;#8217;s not clear when exactly it is more efficient. Currently, I am trying to implement a different, hopefully more consistently efficient, algorithm.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13070"&gt;Fixing a bug in &lt;code class="highlighter-rouge"&gt;minimal_block&lt;/code&gt;.&lt;/a&gt; A small bug in &lt;code class="highlighter-rouge"&gt;minimal_block&lt;/code&gt; was discovered during the implementation of sylow subgroups.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/1307"&gt;Adding the other homomorphism cases.&lt;/a&gt; This PR enabled homomorphisms with &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; as codomain (became possible after merging the rewriting PR) and &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; as domain (provided the keyword argument &lt;code class="highlighter-rouge"&gt;check&lt;/code&gt; was set to &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13104"&gt;Sylow subgroups PR.&lt;/a&gt; This one also took a while. The main function is fairly long and it required implementation of two types of action homomorphisms and a method for finding all minimal block systems of a group. At the moment another related PR (#16) is being reviewed: it treats symmetric and alternating groups separately as the generators of their Sylow subgroups can be written down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13119"&gt;PermutationGroup methods for FpGroup.&lt;/a&gt; This is something that gave me the idea for the project in the first place: many methods for permutation groups are already available while finitely presented groups have limited functionality. However, it&amp;#8217;s possible to use an isomorphism between a finite FpGroup and a relevant permutation group to perform computations in the latter and then go back to the former. This is precisely what this PR does for many permutation group methods. It is still being reviewed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13138"&gt;Storing coset tables in &lt;code class="highlighter-rouge"&gt;_finite_index_subgroup&lt;/code&gt;.&lt;/a&gt; Until the presentation PR, it wasn&amp;#8217;t possible to get hold of an incomplete coset table for which coset enumeration returned with an error (for example if the maximum number of entries was exceeded). After it was merged, I made use of this new feature in the search for a finite index subgroup (used by &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;&amp;#8217;s &lt;code class="highlighter-rouge"&gt;order()&lt;/code&gt; method). This somewhat decreased the required time as coset tables didn&amp;#8217;t have to be recomputed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13151/"&gt;Checking that a homomorphism from PermutationGroup is well defined.&lt;/a&gt; After the presentation PR was merged, it became possible to complete the homomorphism class by enabling the check for whether given generator images define a homomorphism when the domain is a permutation group. Not merged yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13150"&gt;Sylow subgroups for Sym(n) and Alt(n).&lt;/a&gt; A separate method for computing Sylow subgroups of alternating and symmetric groups, to be used as part of the main &lt;code class="highlighter-rouge"&gt;sylow_subgroup&lt;/code&gt; method. This hugely improves the performance in the case of alternating and symmetric groups. Still being reviewed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A couple other PRs had to do with renaming attributes (&lt;a href="https://github.com/sympy/sympy/pull/12732"&gt;this one&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/12719"&gt;this one&lt;/a&gt;) or moving code around (for example, moving all of the coset table and coset enumeration functions to the file &lt;code class="highlighter-rouge"&gt;coset_table.py&lt;/code&gt; in &lt;a href="https://github.com/sympy/sympy/pull/12947"&gt;this PR&lt;/a&gt;). These didn&amp;#8217;t include any actual work so I didn&amp;#8217;t include them in the main list.&lt;/p&gt;

&lt;p&gt;Hopefully, this report will be of use to whoever else might be interested in developing the group theory module. I plan to continue working on it myself for some time, though probably less productively as the new academic year starts soon.&lt;/p&gt;

&lt;p&gt;Overall, this was a fun summer and I enjoyed working on this project. I&amp;#8217;d like to thank Google for sponsoring it, SymPy for giving me the opportunity to participate and my mentor &lt;a href="https://github.com/jksuom"&gt;Kalevi (jksuom)&lt;/a&gt; for giving me guidance and useful suggestions on my code and generally being very helpful. :)&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/week-11/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): Week 11</title>
      <pubDate>Wed, 23 Aug 2017 19:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/week-11/</link>
      <description>&lt;p&gt;During week 11 I extended differential operator to handle mixed coordinate system.
Mixed means that scalar or vector which we&amp;rsquo;re using as argument has elements coming from several different coordinate systems. Not necessarily connected. These work were split into three PR&amp;rsquo;s, one for every differential operator, gradient#13118 , divergence#13128 and curl#13154.
To implement this, we need to only take care about product rule for scalar and vector, but they are well defined.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/08/22/GSoC-Progress-Week-11-12</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): GSoC Progress - Week 11 and Week 12</title>
      <pubDate>Tue, 22 Aug 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/08/22/GSoC-Progress-Week-11-12/</link>
      <description>&lt;p&gt;Greetings!&lt;/p&gt;

&lt;p&gt;This is the combined post for weeks 11 and 12. As mentioned earlier, Isuru had been unavailable for the last week, during which my focus was entirely fixed on getting the countless assertion failures in &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt; fixed while using &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; as a core.&lt;/p&gt;

&lt;p&gt;I was also able to get all the pending work merged in, namely the Singleton pattern and a host of other miscellaneous additions.&lt;/p&gt;

&lt;p&gt;After that, we had to update the &lt;code class="highlighter-rouge"&gt;conda&lt;/code&gt; binaries for both &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; for through &lt;a href="https://github.com/symengine/symengine-feedstock/pull/3"&gt;#3&lt;/a&gt; and &lt;a href="https://github.com/symengine/python-symengine-feedstock/pull/2"&gt;#2&lt;/a&gt; respectively. Currently, we&amp;#8217;re good to go for porting over the changes made over the summers for different directories in &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is officially the last week of GSoC 2017. I&amp;#8217;ll push all my work as separate PRs on &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;, and try to get them merged before the deadline on 29th August.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mirupafshim&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/08/22/strong-present</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): Strong Presentation problems</title>
      <pubDate>Tue, 22 Aug 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/08/22/strong-present/</link>
      <description>&lt;p&gt;The final evaluation period has started, and I&amp;#8217;ll be writing a post with the list of all submitted PRs and some summarising comments later this week (perhaps, tomorrow). Overall, I have done all that was planned though there is room for improvement as is the case with the finite presentation of permutation groups algorithm.&lt;/p&gt;

&lt;p&gt;I have tried out computing a presentation on basic stabilizers, i.e. starting with the presentation of the smallest basic stabilizer and building up from it. This should probably be available in any case because it gives a strong presentation which could be desirable (it has more generators but on the other hand, fewer relators; theoretically, if known, these relators could be used to check if a homomorphism is well-defined a bit quicker). However, I was looking to see if this would be faster than the general version. What I found was that in some cases it&amp;#8217;s considerably faster and in others much slower, with no clear pattern. For example, it doesn&amp;#8217;t perfectly correlate with the size of the group or the number of strong generators. The slowest part is filling in the coset tables for intermediate presentations so I looked if the difference correlates with the index of the subgroup on which a presentation is built, or the difference between the generators of the subgroup and the original group, or their multiple (i.e. the size of the unfilled part of the table) and none of it properly accounts for the difference. There would seem to be a number of factors at play. I&amp;#8217;m thinking of writing a simple function that generates a random group with a fixed degree and use it to collect data for the various parameters of many different groups. That might give me more to go on than the examples I make up myself. Not sure how successful this would be though. At the moment, I&amp;#8217;m not certain I&amp;#8217;d be able to figure it out by the end of this week. I&amp;#8217;ll probably carry on the work until after the end of GSoC.&lt;/p&gt;

&lt;p&gt;I sent a couple of small PRs last week. &lt;a href="https://github.com/sympy/sympy/pull/13151/"&gt;One&lt;/a&gt; for checking homomorphisms with permutation group domains (using the general presentation method for now) and &lt;a href="https://github.com/sympy/sympy/pull/13150"&gt;the other&lt;/a&gt; is with the more efficient method of computing Sylow subgroups of alternating and symmetric groups that I mentioned in the previous post. These two and the PR implementing permutation group methods for finitely presented groups are still being reviewed.&lt;/p&gt;

&lt;p&gt;On a different note, lately I&amp;#8217;ve been thinking of extending the &lt;code class="highlighter-rouge"&gt;FreeGroupElement&lt;/code&gt; class to handle group words with symbolic powers, e.g. &lt;code class="highlighter-rouge"&gt;a**n&lt;/code&gt; where &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt; is an instance of &lt;code class="highlighter-rouge"&gt;Symbol&lt;/code&gt;. I don&amp;#8217;t see any reason why it shouldn&amp;#8217;t be available in general (though we&amp;#8217;d have to be careful to raise errors where appropriate when someone tries to use this in methods; or to modify some methods to handle them if possible) and I was thinking of using something like this when implementing the &lt;code class="highlighter-rouge"&gt;FpSubgroup&lt;/code&gt; class so it can probably be put to use in some situations. One would also need to have a &lt;code class="highlighter-rouge"&gt;subs&lt;/code&gt; method for substituting desirable powers. This, along with the earlier idea of grouping things like &lt;code class="highlighter-rouge"&gt;a*b*a*b&lt;/code&gt; into &lt;code class="highlighter-rouge"&gt;(a*b)**2&lt;/code&gt;, could be another thing I could work on after GSoC.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/08/16/perm-to-fp</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): PermutationGroup methods for FpGroups</title>
      <pubDate>Wed, 16 Aug 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/08/16/perm-to-fp/</link>
      <description>&lt;p&gt;The &lt;a href="https://github.com/sympy/sympy/pull/12986"&gt;presentation PR&lt;/a&gt; got merged fairly quickly last week. Now I could try using the new functionality of resuming coset enumeration with incomplete coset tables in the &lt;code class="highlighter-rouge"&gt;_finite_index_subgroup&lt;/code&gt; function. I expect it should speed it up since at the moment the coset tables inside the function have to be recomputed every time the maximum number of allowed entries is increased. I could also implement a faster version of the presentation algortihm that makes use of strong generators.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/13104"&gt;Sylow subgroups&lt;/a&gt; required a bit more attention. One thing that we were discussing on the &lt;a href="https://gitter.im/sympy/GroupTheory"&gt;Group Theory channel&lt;/a&gt; the other day was that symmetric and alternating groups should be treated separately as the generators for their Sylow subgroups can be written down. It took some thinking to work out the details and justify the algorithm. In fact, the alternating group case still doesn&amp;#8217;t have a formal proof; but it seems clear that it should work and, indeed, it does as I discovered yesterday on implementing the function. It was a bit fiddly to lay out the code so that it works properly and isn&amp;#8217;t too complicated so it took a long time. Now all that remains is to tidy it up and add comments. I briefly described the algorithm in the docstring and hopefully it will make the code clear to whoever might need to work with it in the future. I think this can be added in a separate PR once the current one is merged, though if I have to make any more corrections to the current one, I might push this as well.&lt;/p&gt;

&lt;p&gt;The title of the post is to do with the &lt;a href="https://github.com/sympy/sympy/pull/13119"&gt;new PR&lt;/a&gt; I sent this week in which I added some of the &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; methods to the &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; class so that they can work with finite instances of &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;. I didn&amp;#8217;t actually need the presentation PR for it, homomorphisms were enough. At the moment, when a permutation group method returns a group, the equivalent fp group method returns its generators. An alternative to it would be to return an instance of &lt;code class="highlighter-rouge"&gt;FpSubgroup&lt;/code&gt; on the generators from where its &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; presentation can be found via &lt;code class="highlighter-rouge"&gt;to_fp_group&lt;/code&gt; method. Or, now that the presentation PR is merged, another possibility would be to run &lt;code class="highlighter-rouge"&gt;presentation&lt;/code&gt; on the permutation group returned by the permutation method and return the result together with a homomorphism from it to the original group - though that would probably be too time-consuming so shouldn&amp;#8217;t be the default.&lt;/p&gt;

&lt;p&gt;For the rest of this week, I&amp;#8217;m going to keep working on the Sylow PR and the permutation group methods one if its review starts this week. I&amp;#8217;ll also try to speed up the &lt;code class="highlighter-rouge"&gt;_finite_index_subgroup&lt;/code&gt; method and look into the strong generator algorithm for &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; presentations.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/08/15/Week-12</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Week-12</title>
      <pubDate>Tue, 15 Aug 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/08/15/Week-12/</link>
      <description>&lt;p&gt;Travis errors were finally resolved, thanks to Isuru for digging deep into these errors. 
The problem was with the coverage info generated with Piranha. So, as per Isuru&amp;#8217;s suggestions, I went on to move piranha on to a different test where CODECOV was disabled.&lt;/p&gt;

&lt;p&gt;PRs ready for a review -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/symengine/symengine/pull/1305"&gt;#1305&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/symengine/symengine/pull/1317"&gt;#1317&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/symengine/symengine/pull/1319"&gt;#1319&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will continue working on improving &lt;code class="highlighter-rouge"&gt;fu&lt;/code&gt; so that once #1305 gets in, I can send a PR of that as well.&lt;/p&gt;

&lt;p&gt;End of GSoC-2017 : &lt;br /&gt;
This is officially the final week of GSoC 2017. It has been a great journey where I learnt a lot of new stuff. My mentors helped me throughout, Special Thanks to them. There are still some pending works wrt to the proposal as listed below.&lt;/p&gt;

&lt;p&gt;Remaining work :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Getting the above 3 PRs merged.&lt;/li&gt;
  &lt;li&gt;completing &lt;code class="highlighter-rouge"&gt;fu&lt;/code&gt; and the PR &lt;a href="https://github.com/symengine/symengine/pull/1058"&gt;#1058&lt;/a&gt; on interop of polynomials.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GoodBye !!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/08/15/Week-10 &amp; 11</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Week-10 &amp; 11</title>
      <pubDate>Tue, 15 Aug 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/08/15/Week-10-&amp;-11/</link>
      <description>&lt;p&gt;This post contains progress in week-10 and week-11.&lt;/p&gt;

&lt;p&gt;Most of the focus was on trying to get the earlier PRs merged. In improving &lt;a href="https://github.com/symengine/symengine/pull/1305"&gt;#1305&lt;/a&gt;, Isuru suggested to implement &lt;code class="highlighter-rouge"&gt;xreplace&lt;/code&gt;. I completed this in &lt;a href="https://github.com/symengine/symengine/pull/1320"&gt;#1320&lt;/a&gt;. I got it merged recently.&lt;/p&gt;

&lt;p&gt;Other than this, I worked on implementing a function for computing eigen values of a given matrix. It is implemented in &lt;a href="https://github.com/symengine/symengine/pull/1319"&gt;#1319&lt;/a&gt;. &lt;a href="https://github.com/symengine/symengine/pull/1317"&gt;#1317&lt;/a&gt;PR on system of equations is done and it needs a review.&lt;/p&gt;

&lt;p&gt;Travis is bothering from quite some time with some unusual errors. I will try to fix them.&lt;/p&gt;

&lt;p&gt;Thats all !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=342</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): GSoC Progress Report</title>
      <pubDate>Sun, 13 Aug 2017 16:15:12 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/08/13/gsoc-progress-report-5/</link>
      <description>&lt;p&gt;Hi all, sorry for the delay. We have added test suit 1.2 successfully, This week we will complete implementing all tests for expressions involving products of powers of linears. I have completed parsing test suits for quadratic but implementation is yet to do. &amp;#160;There are about 5-6 Utility functions which are left and are difficult to implement using SymPy&amp;#8217;s pattern matcher but, I&amp;#8217;ll try to implement those as soon as possible. There were few failing test cases for &lt;code class="highlighter-rouge"&gt;PowerVariableDegree&lt;/code&gt; I&amp;#8217;ve fixed those.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/nesar2017.wordpress.com/342/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nesar2017.wordpress.com/342/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=nesar2017.wordpress.com&amp;#038;blog=126779945&amp;#038;post=342&amp;#038;subd=nesar2017&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://arif7blog.wordpress.com/?p=711</guid>
      <author>Arif Ahmed (ArifAhmed1995)</author>
      <title>Arif Ahmed (ArifAhmed1995): Week 10 Report(August 4 &#x2013; August 10) : More functionality for 3D case.</title>
      <pubDate>Thu, 10 Aug 2017 20:12:47 GMT</pubDate>
      <link>https://arif7blog.wordpress.com/2017/08/10/week-10-reportaugust-4-august-10-more-functionality-for-3d-case/</link>
      <description>&lt;p&gt;This week I continued work on&lt;span style="color: #00ff00;"&gt; &lt;a href="https://github.com/sympy/sympy/pull/13082" rel="noopener" target="_blank"&gt;PR#13082&lt;/a&gt;&lt;/span&gt;. The last implementation left for the 3D case is the hyperplane representation. For example, the user can express the list of facets of the polytope by a list of points for each facet or a list of hyperplane parameters(a tuple for each facet).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p1 = [(0, 1, 0), (1, 0, 0), (0, 0, 0)]
p2 = [([-1, 0, 0], 0), ([1, 1, 0], 1), ([0, -1, 0], 0)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code should be able to figure out what the points are and then pass on that list of points representation to the rest of the other functions. I should be done with this in a day or two. To finish up the work for GSoC I&amp;#8217;ll get the &lt;span style="color: #00ff00;"&gt;&lt;a href="https://github.com/sympy/sympy/pull/12931" rel="noopener" target="_blank"&gt;PR on intersecting polygons&lt;/a&gt;&lt;/span&gt; sorted out. After that, remaining documentation will have to be written and requisite clean-up to be done.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/arif7blog.wordpress.com/711/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/arif7blog.wordpress.com/711/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=arif7blog.wordpress.com&amp;#038;blog=126429718&amp;#038;post=711&amp;#038;subd=arif7blog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/week-10/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): Week 10</title>
      <pubDate>Thu, 10 Aug 2017 19:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/week-10/</link>
      <description>&lt;p&gt;During week 10 with my mentor, we finished creation of new CoordSys3D constructor. We can set now transformation while coordinate system is created. We&amp;rsquo;ve moved functionality from _connect_to_standard_cartesian to constructor so we support the same type of transformation as previously.
Now I demonstrate shorty how coordinate system different that Caertsian can be created in SymPy:
a = CoordSys3D('a', transformation='spherical', variable_names=["r", "theta", "phi"]) a.lame_coefficients() a.transformation_to_parent() b = CoordSys3D('b', lambda r, theta, phi: (r*sin(theta)*cos(phi), r*sin(theta)*sin(phi), r*cos(theta)), variable_names=["</description>
    </item>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/08/10/GSoC17-Week10-Report</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): GSoC17 Week 10 Report</title>
      <pubDate>Thu, 10 Aug 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/08/10/GSoC17-Week10-Report.html</link>
      <description>&lt;h2 id="work-done"&gt;Work Done&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Completed test suit for Algebraic Linear products.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="todo"&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;So far, we have implemented large utility functions using some of inbuilt SymPy&amp;#8217;s functions(example: &lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt;). These functions are very large to be implemented by hand. I have an idea to implement these functions using MatchPy&amp;#8217;s &lt;code class="highlighter-rouge"&gt;ManyToOneReplacer&lt;/code&gt;(similar to what we have done with main Rubi Integrate function).&lt;/li&gt;
  &lt;li&gt;Test Algebraic Quadratic products rules.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/08/08/complete</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): Completing homomorphisms</title>
      <pubDate>Tue, 08 Aug 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/08/08/complete/</link>
      <description>&lt;p&gt;I sent the &lt;a href="https://github.com/sympy/sympy/pull/1307"&gt;PR with the other homomorphism cases&lt;/a&gt; a week ago, so about a day after my last post. The work required for the main part of the PR wasn&amp;#8217;t really complicated but it took a while to get merged (earlier today) because some more problems showed up in the rewriting system part.&lt;/p&gt;

&lt;p&gt;It started off with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; noticing that in the case of a free abelian group, the list of rewriting rules after initiation seemed incomplete - it so happened that the test didn&amp;#8217;t pick up on it because it didn&amp;#8217;t need the missing rules. In itself, that wouldn&amp;#8217;t be much of a problem because the missing rules could be added during the run of &lt;code class="highlighter-rouge"&gt;make_confluent&lt;/code&gt; but &lt;code class="highlighter-rouge"&gt;is_confluent&lt;/code&gt; was already &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt; - that was definitely wrong. So for one thing, &lt;code class="highlighter-rouge"&gt;_check_confluence&lt;/code&gt; wasn&amp;#8217;t working properly and also I thought that the type of rules that wasn&amp;#8217;t added during rule initiation, could be added as another case - if it could be done in place, why wait till it&amp;#8217;s discovered by the double loop in &lt;code class="highlighter-rouge"&gt;make_confluent&lt;/code&gt;. I made a few little changes throughout the code to fix things but ultimately, it was the inadequacy of &lt;code class="highlighter-rouge"&gt;add_rule&lt;/code&gt; that was causing problems.&lt;/p&gt;

&lt;p&gt;When a pair of words is given to &lt;code class="highlighter-rouge"&gt;add_rule&lt;/code&gt;, it first multiplies them by the inverse of the first element of the longer word until the length difference is 0, 1 or 2 (greater length differences are redundant when the smaller length differences are in the rules dictionary). Then it does the same on the other (right) side which leads to a different set of rules. We could obtain even more rules right here, without waiting for &lt;code class="highlighter-rouge"&gt;make_confluent&lt;/code&gt;, if we allow switching sides, i.e. not just continuously multiplying on the right or on the left, but perform some left multiplications after several on the right, etc. This makes &lt;code class="highlighter-rouge"&gt;make_confluent&lt;/code&gt; a little more efficient as more rules are discovered at one time but trying all possible combinations of sides would probably take too much time without actually being productive. At the moment, when the length difference becomes sufficiently small, instead of adding the rule directly, &lt;code class="highlighter-rouge"&gt;add_rule&lt;/code&gt; calls itself recursively which allows for some side switching. Perhaps in the future, it would seem fit to try all combinations. A couple of days ago I added a rules cache to prevent repeating the work that has already been done by the function so maybe it won&amp;#8217;t cause too much of a slow-down in practice.&lt;/p&gt;

&lt;p&gt;After this, one rule was still missing. I reread the code several times and it took a while to work out that the problem was what seems quite obvious now. When a pair of words &lt;code class="highlighter-rouge"&gt;w1, w2&lt;/code&gt; of the same length is given to &lt;code class="highlighter-rouge"&gt;add_rule&lt;/code&gt;, the only rule that was added was &lt;code class="highlighter-rouge"&gt;w1: w2&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;w1 &amp;gt; w2&lt;/code&gt;. But another possibility right there could be &lt;code class="highlighter-rouge"&gt;w2**-1: w1**-1&lt;/code&gt; provided &lt;code class="highlighter-rouge"&gt;w2**-1 &amp;gt; w1**-1&lt;/code&gt;. Normally, this inverse rule doesn&amp;#8217;t need to be added because if &lt;code class="highlighter-rouge"&gt;len(w1) &amp;gt; len(w2)&lt;/code&gt;, then &lt;code class="highlighter-rouge"&gt;w1**-1 &amp;gt; w2**-1&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;w**-1: w2**-1&lt;/code&gt; is implied by how word reduction is set up. Adding this last case solved the issue.&lt;/p&gt;

&lt;p&gt;There were some other little improvements. For example, &lt;code class="highlighter-rouge"&gt;make_confluent&lt;/code&gt; has been made to returns a boolean at all times, not just when checking if the system is confluent. This could be used to see if it is successful. I also spotted an error in the kernel computation method that hadn&amp;#8217;t come up before only by sheer luck.&lt;/p&gt;

&lt;p&gt;Now that all the basic homomorphism functionality is available, I can have a go at extending the &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt; class with &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; methods. I might be able to get it to work without the &lt;a href="https://github.com/sympy/sympy/pull/12986"&gt;finite presentation of permutation groups PR&lt;/a&gt; (it hasn&amp;#8217;t been reviewed yet) but I&amp;#8217;m not entirely sure yet.&lt;/p&gt;

&lt;p&gt;Another thing on my hands is sylow subgroups. I actually thought I got them to work several days ago but then one of the test groups (&lt;code class="highlighter-rouge"&gt;SymmetricGroup(10)&lt;/code&gt;) revealed a bug in the &lt;code class="highlighter-rouge"&gt;_strong_gens_slp&lt;/code&gt; attribute. It wasn&amp;#8217;t caused by the sylow method and only comes up after computing a stabilizer or a normalizer - something I only realised yesterday; this bug really confused me for a while. I did fix it now but a different problem came up and what worked before no longer does. I don&amp;#8217;t see why the bug fix would lead to it but evidently it did&amp;#8230; So still trying to sort it out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Have just worked out that sylow thing. Turned out minimal blocks weren&amp;#8217;t being computed properly (my fault: I wrote a separate function that should have outputed all minimal block systems but failed on minimality). So now all that remains is to do some more testing and tidy up the code, and I can send a PR with it in a day or so (if no other bugs turn up, that is).&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/08/07/GSoC-Progress-Week-10</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): GSoC Progress - Week 10</title>
      <pubDate>Mon, 07 Aug 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/08/07/GSoC-Progress-Week-10/</link>
      <description>&lt;p&gt;Greetings!
The GSoC final submissions are about three weeks away and I&amp;#8217;m trying my best to get everything sorted out before the deadline. However, we are faced with an issue. Isuru won&amp;#8217;t be available for the major part of the penultimate week. As such, I&amp;#8217;ll have to reach out to Sumith for reviews, who&amp;#8217;s been pretty busy lately. Hence my goal for the next week would be to get everything reviewed and merged as soon as possible. Here is a gist of the work done in the previous week.&lt;/p&gt;

&lt;h2 id="report"&gt;Report&lt;/h2&gt;

&lt;h3 id="symenginepy"&gt;SymEngine.py&lt;/h3&gt;
&lt;p&gt;I implemented some attributes seeking inspiration from &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;&amp;#8217;s classes in &lt;a href="https://github.com/symengine/symengine.py/pull/180"&gt;#180&lt;/a&gt;, which is reviewed and merged. I also took some time fixing the assertion failures in &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;&amp;#8217;s modules, which would be pushed in soon. More on this next week.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all I have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Totsiens&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/08/06/GSoC17-Week9-Report</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): GSoC17 Week 9 Report</title>
      <pubDate>Sun, 06 Aug 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/08/06/GSoC17-Week9-Report.html</link>
      <description>&lt;h2 id="work-done"&gt;Work Done&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;I have parsed all the rule in SymPy syntax and removed Rubi&amp;#8217;s dependency on machpy-sympy converters and MatchPy&amp;#8217;s &lt;code class="highlighter-rouge"&gt;Operations&lt;/code&gt;. I have also updated the parser to accommodate for this change.&lt;/li&gt;
  &lt;li&gt;Completed the test suit for 1.2. Tests are failing since Travis is still using older version of MatchPy which does not support new functionalities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="todo"&gt;Todo&lt;/h2&gt;
&lt;p&gt;Tests for all algebraic rules are already added.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I have already added test for test suit 1.3. I am investigating them locally. I am trying my best to pass all the algebraic test suit by this week.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;AppellF1&lt;/code&gt; is not implemented in SymPy. I couldn&amp;#8217;t find time to implement is last week. I will implement basic version of &lt;code class="highlighter-rouge"&gt;AppellF1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=317</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): GSoC Progress Report</title>
      <pubDate>Thu, 03 Aug 2017 19:20:07 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/08/03/gsoc-progress-report-4/</link>
      <description>&lt;p&gt;We are almost done with the implementation of utility functions. My next task would be to parse all test suits and minimize the test cases as there are numerous tests (of similar type) which is taking too long to run in Python. Along with it I&amp;#8217;ll be completing some incomplete utility functions and fixing bugs. We need to port all the rules and test it as early as possible to fix all possible bugs. Although a major bulk of our work is completed adding rules and test should not take much time.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/nesar2017.wordpress.com/317/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nesar2017.wordpress.com/317/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=nesar2017.wordpress.com&amp;#038;blog=126779945&amp;#038;post=317&amp;#038;subd=nesar2017&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://arif7blog.wordpress.com/?p=691</guid>
      <author>Arif Ahmed (ArifAhmed1995)</author>
      <title>Arif Ahmed (ArifAhmed1995): Week 9 Report(June 27 &#x2013; August 3) : Basic 3D prototype.</title>
      <pubDate>Wed, 02 Aug 2017 20:12:18 GMT</pubDate>
      <link>https://arif7blog.wordpress.com/2017/08/02/week-9-reportjune-27-august-3-basic-3d-prototype/</link>
      <description>&lt;p&gt;This week I returned to college and quite some time was spent in setting up the room, registering for courses, etc. Also, I have 27 hours a week of classes from now on which is okay considering that some of my batch-mates have 31 &amp;#8211; 32 hours/week.&lt;/p&gt;
&lt;p&gt;The good thing is that the major part of my work is complete. This week I worked on the 3D case. Here is the PR : &lt;a href="https://github.com/sympy/sympy/pull/13082" rel="noopener" target="_blank"&gt;#13082&lt;/a&gt; . A minor limitation(minor from the perspective of fixing it) is that only constant expressions are supported. Another limitation is that the input has to be a list of the polygons constituting the faces of the 3D polytope. This should actually be a list of points in correct order and the algorithm should figure out the polygon from the input. Examples of such input are in &lt;a href="http://dilbert.engr.ucdavis.edu/~suku/quadrature/cls-integration.pdf" rel="noopener" target="_blank"&gt;Chin et. al(2015)&lt;/a&gt; .&lt;br /&gt;
I&amp;#8217;ll finish it up by Saturday and then proceed to completing PR &lt;a href="https://github.com/sympy/sympy/pull/12931" rel="noopener" target="_blank"&gt;#12931&lt;/a&gt; . That might extend to the first few days of next week as well.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/arif7blog.wordpress.com/691/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/arif7blog.wordpress.com/691/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=arif7blog.wordpress.com&amp;#038;blog=126429718&amp;#038;post=691&amp;#038;subd=arif7blog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/week-9/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): Week 9</title>
      <pubDate>Wed, 02 Aug 2017 19:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/week-9/</link>
      <description>&lt;p&gt;Reconstruction of constructor in CoordSys3D is like never ending story, but fortunately we are almost at the end of the work. We decide to distinguish two cases. When rotation matrix or location is set and when transformation is set. In the first case we are creating transformation equations from rotation matrix and translation vector. In the second, user is responsible for defining transformation equations but it is also possible to use some pre-defined curvilinear coordinate system.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/08/01/GSoC-Progress-Week-9</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): GSoC Progress - Week 9</title>
      <pubDate>Tue, 01 Aug 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/08/01/GSoC-Progress-Week-9/</link>
      <description>&lt;p&gt;Hi all, we&amp;#8217;re in the final month of &lt;code class="highlighter-rouge"&gt;GSoC&lt;/code&gt; with only about 4 weeks remaining on the development time. Last week was a bit rough because my college semester started off with a heavy schedule on the very first day, and a number of boarding issues, due to which a number of my days were spent in shifting my stuff from one room to another. Add to that the summer heat of this country, and it becomes a total nightmare. Here&amp;#8217;s what I could do.&lt;/p&gt;

&lt;h2 id="report"&gt;Report&lt;/h2&gt;

&lt;h3 id="symengine"&gt;SymEngine&lt;/h3&gt;
&lt;p&gt;I pushed in &lt;a href="https://github.com/symengine/symengine.py/pull/1316"&gt;#1316&lt;/a&gt;, resolving some of the scope issues we were facing in &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt;. I&amp;#8217;m expecting a light implementation schedule here in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; form now on, as we have most of the stuff we need for a sizeable amount of &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;&amp;#8217;s directories to be ported over &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="sympy"&gt;SymPy&lt;/h3&gt;
&lt;p&gt;Pushed in &lt;a href="https://github.com/sympy/sympy/pull/13051"&gt;#13051&lt;/a&gt;, fixing a minor piece of code that was previously preventing us from using &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt;&amp;#8217;s &lt;code class="highlighter-rouge"&gt;igcd&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;&amp;#8217;s &lt;code class="highlighter-rouge"&gt;LieAlgebras&lt;/code&gt; module. I had also taken some time updating the work on other directories.&lt;/p&gt;

&lt;h3 id="symenginepy"&gt;SymEngine.py&lt;/h3&gt;
&lt;p&gt;I worked on implementing some miscellaneous missing functionalities in &lt;a href="https://github.com/symengine/symengine.py/pull/179"&gt;#179&lt;/a&gt;, which should soon be ready to get merged.&lt;/p&gt;

&lt;p&gt;Since we are slowly reaching towards the end of the project, I&amp;#8217;ll have to request Isuru for a release in &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;SymEngine.py&lt;/code&gt; so that our latest work becomes available for &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pozdrav&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/08/01/Week-09</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Week-09</title>
      <pubDate>Tue, 01 Aug 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/08/01/Week-09/</link>
      <description>&lt;p&gt;Hey everyone, this post contains progress in week-9. We are in the last phase of GSoC project. My progress is a bit lagging from the proposed timeline primarily due to commencement of classes.&lt;/p&gt;

&lt;p&gt;As mentioned in my last blog, I was able to get the &lt;a href="https://github.com/symengine/symengine/pull/1314"&gt;PR&lt;/a&gt; on fixes for ImageSet merged in and 
I baked all remaining pieces within &lt;a href="https://github.com/symengine/symengine/pull/1305"&gt;#1305&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this, I implemented a &lt;code class="highlighter-rouge"&gt;IsALinearArgTrig&lt;/code&gt; as follows&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class IsALinearArgTrigVisitor
    : public BaseVisitor&amp;lt;IsALinearArgTrigVisitor, StopVisitor&amp;gt;
{}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It checks if the argument of Trigonometric and Hyperbolic parts is linear in symbol or not. If input is not linear in symbol, then we can&amp;#8217;t solve that equation using the present TrigSolver.&lt;/p&gt;

&lt;p&gt;Next is &lt;code class="highlighter-rouge"&gt;invertComplex&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class InvertComplexVisitor : public BaseVisitor&amp;lt;InvertComplexVisitor&amp;gt;
{}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is useful for finding inverse. Ex: for finding the &lt;code class="highlighter-rouge"&gt;x&lt;/code&gt; that satisfies the equation &lt;code class="highlighter-rouge"&gt;exp(I*x) = 3&lt;/code&gt;. Some tests are failing on &lt;code class="highlighter-rouge"&gt;MSVC15&lt;/code&gt; compiler. I will try to figure out and fix that ASAP.&lt;/p&gt;

&lt;p&gt;Meanwhile, I implemented basic solvers for system of equations in this &lt;a href="https://github.com/symengine/symengine/pull/1317"&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all for now. See you next time.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/07/31/sylow</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): The rewriting PR and Sylow Subgroups</title>
      <pubDate>Mon, 31 Jul 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/07/31/sylow/</link>
      <description>&lt;p&gt;The &lt;a href="https://github.com/sympy/sympy/pull/12893"&gt;rewriting PR&lt;/a&gt; only got merged today. Firstly, it took several days to sort out the &lt;code class="highlighter-rouge"&gt;FpSubgroup&lt;/code&gt;&amp;#8217;s &lt;code class="highlighter-rouge"&gt;__contains__&lt;/code&gt; method (in this &lt;a href="https://github.com/sympy/sympy/pull/13028"&gt;PR&lt;/a&gt;). Secondly, my mentor pointed out a case I overlooked in the &lt;code class="highlighter-rouge"&gt;add_rule&lt;/code&gt; routine, and once I corrected it, another problem presented itself. It wasn&amp;#8217;t to do with &lt;code class="highlighter-rouge"&gt;add_rule&lt;/code&gt; but adding the overlooked case made it possible for the tests to pick up on it (luckily). The problem was that sometimes &lt;code class="highlighter-rouge"&gt;make_confluent&lt;/code&gt; would try to use a non-existent key for the dictionary of rewriting rules. This happened because &lt;code class="highlighter-rouge"&gt;make_confluent&lt;/code&gt; is set up in such a way that if sufficiently many rules are added, &lt;code class="highlighter-rouge"&gt;_remove_redundancies&lt;/code&gt; method is called, and this removes or modifies some of the existing rules, and the function didn&amp;#8217;t account for this change properly. It took me several goes until I finally got it. And while I was at it, I noticed yet another bug which took some time to track down. Turned out that &amp;#8220;for&amp;#8221; loops don&amp;#8217;t always properly iterate over lists that are changed inside the loop (spefically, they ignore newly appended elements). I didn&amp;#8217;t think it would be a problem because I have done similar things before in python. I ended up replacing it with a &amp;#8220;while&amp;#8221; loop like:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; while i &amp;lt; len(some_list):
&amp;gt;&amp;gt;&amp;gt;    some_list.append(new_element)
&amp;gt;&amp;gt;&amp;gt;    i += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and that worked properly. Still not entirely sure what happened there: appending elements inside a for loop in the terminal shell doesn&amp;#8217;t cause such problems - I should probably look into that more at some point, for future reference.&lt;/p&gt;

&lt;p&gt;So I only began working on completing the other homomorphism cases today (not counting what I have sketched in the previous couple of weeks). I&amp;#8217;ll try to send a PR with some of it in several days. At this point, I should be able to do everything except checking that a homomorphism from a permutation group is well defined. For that I&amp;#8217;ll need the &lt;a href="https://github.com/sympy/sympy/pull/12986/"&gt;presentation PR&lt;/a&gt; and it&amp;#8217;s quite substantial so its review will almost certaintly take more than several days. I&amp;#8217;m planning to add the keyword argument &lt;code class="highlighter-rouge"&gt;check&lt;/code&gt; to the &lt;code class="highlighter-rouge"&gt;homomorphism&lt;/code&gt; function so that if &lt;code class="highlighter-rouge"&gt;check==False&lt;/code&gt;, the given images are assumed to define a homomorphism. I found it useful in some of the work I was doing last week.&lt;/p&gt;

&lt;p&gt;I decided to work on computing sylow subgroups, and as part of it, wrote two new homomorphism functions specifically for permutation groups: &lt;code class="highlighter-rouge"&gt;orbit_action_homomorphism&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;block_action_homomorphism&lt;/code&gt; for defining homomorphisms induced by the action of the group on a union of orbits or a block system respectively. These are of course homomorphisms between permutation groups and there is no need to check if they are well-defined so it was possible to create them without the presentation PR. I don&amp;#8217;t know if it will stay that way as it hasn&amp;#8217;t been discussed yet but it seemed appropriate to have them as separate functions in the homomorphisms file. Also, I found a bug in the &lt;code class="highlighter-rouge"&gt;minimal_block&lt;/code&gt; method while testing &lt;code class="highlighter-rouge"&gt;block_action_homomorphism&lt;/code&gt; yesterday but it&amp;#8217;s not anything major and the &lt;a href="https://github.com/sympy/sympy/pull/13070"&gt;fix&lt;/a&gt; for it will likely be merged soon. There was some trouble with Travis today though.&lt;/p&gt;

&lt;p&gt;The actual computation of sylow subgroups is going to be a &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; method &lt;code class="highlighter-rouge"&gt;sylow_subgroup()&lt;/code&gt; and it already works for some cases so it&amp;#8217;s going well. However, I am going to pause it for now to finish homomorphisms.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/07/30/GSoC17-Week8-Report</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): GSoC17 Week 8 Report</title>
      <pubDate>Sun, 30 Jul 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/07/30/GSoC17-Week8-Report.html</link>
      <description>&lt;h2 id="work-done"&gt;Work Done&lt;/h2&gt;
&lt;p&gt;Manuel found a way to use MatchPy &lt;code class="highlighter-rouge"&gt;Symbol&lt;/code&gt; with SymPy &lt;code class="highlighter-rouge"&gt;Symbol&lt;/code&gt;(&lt;a href="https://gist.github.com/wheerd/b57efd0dba2dbdba4bc10ff6e71cf5ab"&gt;sample code&lt;/a&gt;). Implementing rules using SymPy symbols would increase the speed of module since we don&amp;#8217;t have to convert the expressions back and forth (sympy-matchpy).&lt;/p&gt;

&lt;p&gt;I am removing constraint(&lt;code class="highlighter-rouge"&gt;cons()&lt;/code&gt;) defined for the patterns and started using &lt;code class="highlighter-rouge"&gt;CustomConstraint&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;Patterns&lt;/code&gt;. I wasn&amp;#8217;t able to do this previously since &lt;code class="highlighter-rouge"&gt;ManyToOneReplacer&lt;/code&gt; was only able to handle MatchPy expressions. Now that I can use &lt;code class="highlighter-rouge"&gt;CustomConstraint&lt;/code&gt;, I have divided the constraint into smaller &lt;code class="highlighter-rouge"&gt;CustomConstraint&lt;/code&gt;. Example:&lt;/p&gt;
&lt;h4 id="old-way-to-define-constraint"&gt;Old way to define constraint:&lt;/h4&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;pattern3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Wildcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'m'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mpyInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="n"&gt;x_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;And&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FreeQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;NonzeroQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matchpyInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="new-way-to-define-constraint"&gt;New way to define constraint:&lt;/h4&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;pattern3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Wildcard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'m'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mpyInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="n"&gt;x_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;CustomConstraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FreeQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;CustomConstraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NonzeroQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mpyInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Defining the Constraints in this way will help the &lt;code class="highlighter-rouge"&gt;ManyToOneReplacer&lt;/code&gt; to backtrack easily and thereby improving the overall speed of the module. There is a &lt;a href="https://github.com/HPAC/matchpy/issues/20"&gt;bug&lt;/a&gt; in MatchPy related to this, I hope it will be fixed soon.&lt;/p&gt;

&lt;p&gt;I have updated the parser to make the above changes. It divides the constraint into different constraints if the &lt;code class="highlighter-rouge"&gt;head&lt;/code&gt; of expression tree is &lt;code class="highlighter-rouge"&gt;And&lt;/code&gt;:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_divide_constriant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Creates a CustomConstraint of the form `CustomConstraint(lambda a, x: FreeQ(a, x))`&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'FreeQ'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
    &lt;span class="n"&gt;lambda_symbols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_free_symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'CustomConstraint(lambda {}: {})'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_symbols&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;generate_sympy_from_parsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;divide_constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'And'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_divide_constriant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_divide_constriant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id="todo"&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Parse all the rules using SymPy &lt;code class="highlighter-rouge"&gt;Symbol&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Remove sympy-matchpy converters and matchpy &lt;code class="highlighter-rouge"&gt;Operations&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=286</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): GSoC Progress Report</title>
      <pubDate>Thu, 27 Jul 2017 18:51:18 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/07/27/gsoc-progress-report-3/</link>
      <description>&lt;p&gt;I have almost completed implementing all the Utility Functions just to complete few tests and few left out functions. Till now we were using&amp;#160;&lt;code class="highlighter-rouge"&gt;Rt()&lt;/code&gt; which could only handle numeric value the new definition can handle even expressions. This week I was a bit engaged with my pending academic works so I was a bit inactive. I&amp;#8217;ll be committing my changes soon. These are few tests for&amp;#160;&lt;code class="highlighter-rouge"&gt;Rt()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;
&lt;pre class="highlight"&gt;&lt;code&gt;def test_Rt():
    assert Rt(x**2, 2) == x
    assert Rt(S(2 + 3*I), S(8)) == (2 + 3*I)**(1/8)
    assert Rt(x**2 + 4 + 4*x, 2) == x + 2
    assert Rt(S(8), S(3)) == 2
    assert Rt(S(16807), S(5)) == 7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/nesar2017.wordpress.com/286/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nesar2017.wordpress.com/286/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=nesar2017.wordpress.com&amp;#038;blog=126779945&amp;#038;post=286&amp;#038;subd=nesar2017&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://arif7blog.wordpress.com/?p=680</guid>
      <author>Arif Ahmed (ArifAhmed1995)</author>
      <title>Arif Ahmed (ArifAhmed1995): Week 8 Report(July 18 &#x2013; July 26): Beginning 3D case</title>
      <pubDate>Wed, 26 Jul 2017 06:19:18 GMT</pubDate>
      <link>https://arif7blog.wordpress.com/2017/07/26/week-8-reportjuly-18-july-26-beginning-3d-case/</link>
      <description>&lt;p&gt;So, I wrapped up &lt;a href="https://github.com/sympy/sympy/pull/12931" rel="noopener" target="_blank"&gt;PR#12931&lt;/a&gt; on handling implicit intersections. I&amp;#8217;ve to clean it up a bit more as suggested by Christopher. I plan to implement the Bentley-Ottmann Algorithm and the case with intersecting polygons with more than two sides passing through same point in separate PRs.&lt;/p&gt;
&lt;p&gt;Now, about the 3D case I initially thought about writing a 3-Polytope class first but I now realise that there is no need as such. The API can be kept simpler. I&amp;#8217;ll update this post with a PR link for the 3D case quite soon.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/arif7blog.wordpress.com/680/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/arif7blog.wordpress.com/680/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=arif7blog.wordpress.com&amp;#038;blog=126429718&amp;#038;post=680&amp;#038;subd=arif7blog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/week-8/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): Week 8</title>
      <pubDate>Tue, 25 Jul 2017 19:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/week-8/</link>
      <description>&lt;p&gt;During week 8 I added several methods which calculate transformation equations for some specific situation. We&amp;rsquo;ve finished step, where transformation equations are obtained for rotation, translation, and changing the type of coordinate system. This all transitions are handled in vector module. We&amp;rsquo;ve also prepared the method for composition of any two kind of transformations, because coordinate system can be rotated and translated at the same time.
My current task is to use already added methods in CoordSys3D constructor.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/07/25/GSoC-Progress-Week-8</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): GSoC Progress - Week 8</title>
      <pubDate>Tue, 25 Jul 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/07/25/GSoC-Progress-Week-8/</link>
      <description>&lt;p&gt;My first two months under &lt;code class="highlighter-rouge"&gt;GSoC&lt;/code&gt; have finally ended, and we are right on track towards the completion of the project. I finished up on my log of &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;&amp;#8217;s directories and have analysed everything that needs to be further implemented or improved upon.&lt;/p&gt;

&lt;h2 id="report"&gt;Report&lt;/h2&gt;

&lt;h3 id="symengine"&gt;SymEngine&lt;/h3&gt;
&lt;p&gt;I pushed in &lt;a href="https://github.com/symengine/symengine.py/pull/1313"&gt;#1313&lt;/a&gt;, implementing &lt;code class="highlighter-rouge"&gt;row_insert&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;column_insert&lt;/code&gt; functions in &lt;code class="highlighter-rouge"&gt;DenseMatrix&lt;/code&gt; class and &lt;code class="highlighter-rouge"&gt;row_del&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;col_del&lt;/code&gt; functions in &lt;code class="highlighter-rouge"&gt;C&lt;/code&gt; wrappers, while making &lt;code class="highlighter-rouge"&gt;row_join&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;col_join&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;row_del&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;col_del&lt;/code&gt; in-place member functions.&lt;/p&gt;

&lt;h3 id="sympy"&gt;SymPy&lt;/h3&gt;
&lt;p&gt;After testing all the viable directories that could use &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; as a backend, only the &lt;code class="highlighter-rouge"&gt;LieAlgebras&lt;/code&gt; module worked completely out of the box, with no major issues. As such, we were able to achieve the same through &lt;a href="https://github.com/sympy/sympy/pull/13023"&gt;#13023&lt;/a&gt;, which now marks the beginning of Phase III of my proposal. I have also pushed the work done on other directories as separate branches on my local repository, to be finished upon gradually.&lt;/p&gt;

&lt;h3 id="symenginepy"&gt;SymEngine.py&lt;/h3&gt;
&lt;p&gt;I worked on implementing the &lt;code class="highlighter-rouge"&gt;Singleton&lt;/code&gt; pattern in the wrappers through &lt;a href="https://github.com/symengine/symengine.py/pull/178"&gt;#178&lt;/a&gt;, though the work is currently in progress. More on this next week.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all I have for now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bid&amp;#257;&amp;#7823;a&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ranjithkumar007.github.io/2017/07/25/Trigonometric Solvers Part II</guid>
      <author>Ranjith Kumar (ranjithkumar007)</author>
      <title>Ranjith Kumar (ranjithkumar007): Trigonometric Solvers Part II</title>
      <pubDate>Tue, 25 Jul 2017 00:00:00 GMT</pubDate>
      <link>http://ranjithkumar007.github.io/2017/07/25/Trigonometric-Solvers-Part-II/</link>
      <description>&lt;p&gt;This is the blog on progress for week-7 and week-8. It revolves around trigonometric solvers. As a side note, My progress rate has significantly dropped since the commencement of classes due to tight schedule and loaded assignments. I am working all out on weekends to compensate this time loss.&lt;/p&gt;

&lt;p&gt;As I mentioned in my previous blog, I continued my work on solving simple trigonometric equations. As isuruf suggested, I breaked the PR &lt;a href="https://github.com/symengine/symengine/pull/1305"&gt;#1305&lt;/a&gt; into several small parts.&lt;/p&gt;

&lt;p&gt;First one is on &lt;code class="highlighter-rouge"&gt;as_real_imag&lt;/code&gt; &lt;a href="https://github.com/symengine/symengine/pull/1310"&gt;#1310&lt;/a&gt;. Several Changes were made like adding support for TrigFunctions and HyperbolicFunctions.&lt;/p&gt;

&lt;p&gt;Next PR is on &lt;code class="highlighter-rouge"&gt;rewrite_as_exp&lt;/code&gt; &lt;a href="https://github.com/symengine/symengine/pull/1309"&gt;#1309&lt;/a&gt;. For this, I Implemented a Base Transform Visitor as follows.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class TransformVisitor : public BaseVisitor&amp;lt;TransformVisitor&amp;gt; 
{}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and &lt;code class="highlighter-rouge"&gt;rewrite_as_exp&lt;/code&gt; is implemented with a class overriding TransformVisitor&amp;#8217;s methods.&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class RewriteAsExp : public BaseVisitor&amp;lt;RewriteAsExp, TransformVisitor&amp;gt;
{}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Additionally, going by srajan&amp;#8217;s suggestion, I changed introduced a new base class &lt;code class="highlighter-rouge"&gt;TrigBase&lt;/code&gt; for TrigFunctions and its inverses and similarly for HyperbolicFunctions.&lt;/p&gt;

&lt;p&gt;Additionally, I made some fixes in &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; &lt;a href="https://github.com/symengine/symengine/pull/1314"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once, this PR gets in, I will push the remaining bits and pieces from #1305.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://valglad.github.io/2017/07/24/delays</guid>
      <author>Valeriia Gladkova (valglad)</author>
      <title>Valeriia Gladkova (valglad): Delays</title>
      <pubDate>Mon, 24 Jul 2017 00:00:00 GMT</pubDate>
      <link>http://valglad.github.io/2017/07/24/delays/</link>
      <description>&lt;p&gt;The rewriting PR hasn&amp;#8217;t been merged yet. At the beginning of last week, there was still some work to be done on it. For example, the &lt;code class="highlighter-rouge"&gt;RewritingSystem&lt;/code&gt;&amp;#8217;s &lt;code class="highlighter-rouge"&gt;check_confluence()&lt;/code&gt; method (which, unsurprisingly, checks if the system is confluent) would add new rewriting rules while it runs - definitely not something it should do. Another addition, suggested by my mentor, was the attribute &lt;code class="highlighter-rouge"&gt;_max_exceeded&lt;/code&gt;: this is &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt; when the Knuth-Bendix completion method has already been attempted but the maximum number of rules allowed to be added to the system was exceeded. Trying again would be a waste of time. However, if the maximum number of rules is increased, &lt;code class="highlighter-rouge"&gt;_max_exceeded&lt;/code&gt; is reset so that the completion method could be run again.&lt;/p&gt;

&lt;p&gt;Then I worked on the multi-step version of the presentation algorithm (which was possible because the homomorphism &lt;a href="https://github.com/sympy/sympy/pull/12827"&gt;PR&lt;/a&gt; was merged by then). Once I wrote it up, made sure it worked and started testing against the single step one, I noticed that the multi-step version ran several times as fast for several of the groups I was using and yet was suddenly much slower for a group of higher order. This was unexpected and I spent a while trying to work out why that would be. The reason was this: the function uses &lt;code class="highlighter-rouge"&gt;coset_enumeration_c&lt;/code&gt; for filling in a certain coset table. &lt;code class="highlighter-rouge"&gt;coset_enumeration_c&lt;/code&gt; stores the deductions it makes while filling in so that it can process them later. However, if there are too many deductions, it&amp;#8217;s not practical to go through all of them so the algorithm uses the method &lt;code class="highlighter-rouge"&gt;look_ahead&lt;/code&gt; that allows it to continue without looking at the deduction stack which is emptied. The critical size of the deduction stack was 500 by default. For large groups, the single step version would greatly exceed that most of the time so &lt;code class="highlighter-rouge"&gt;look_ahead&lt;/code&gt; was run instead, speeding it up considerably, while the multi step version would be working with a smaller coset table and the number of deductions would be large but not over 500 which made it slow. So it looked like processing close to 500 deductions was inefficient and I reduced the number to 100 to see what happens. What happened was that both version got faster but now the multi-step version was consistently faster than the single-step one. I ran the coset table tests and they seemed to be fine too so the reduction in the maximum number of deductions didn&amp;#8217;t seem to affect anything negatively. I pushed the multi step version into the presentation &lt;a href="https://github.com/sympy/sympy/pull/12986"&gt;PR&lt;/a&gt; but that hasn&amp;#8217;t started being reviewed because another problem came up.&lt;/p&gt;

&lt;p&gt;The homomorphisms tests from the merged PR would occasionally time out so that needed investigating. Turned out it was because the &lt;code class="highlighter-rouge"&gt;__contains__&lt;/code&gt; method of the &lt;code class="highlighter-rouge"&gt;FpSubgroup&lt;/code&gt; class couldn&amp;#8217;t handle group elements in the conjugate form, i.e. something of the form &lt;code class="highlighter-rouge"&gt;r**-1*w*r&lt;/code&gt; for some words &lt;code class="highlighter-rouge"&gt;r, w&lt;/code&gt;. It would get into an infinite loop and the tests would only occasionally time out because the method is used during kernel computation which is randomised. So a couple of days was spent thinking about what would be the best way to eliminate the problem, whether this sort of problem would only be caused by conjugate elements and finally expanding the code accordingly. You can follow what I did in this &lt;a href="https://github.com/sympy/sympy/pull/13028"&gt;PR&lt;/a&gt;. Though this is still being discussed and it&amp;#8217;s unclear whether some other solution would be called for.&lt;/p&gt;

&lt;p&gt;So because of all this, I couldn&amp;#8217;t work on the other homomorphism cases (though I did sketch some things that I can use once the dependent PRs are merged). If the &lt;code class="highlighter-rouge"&gt;FpSubgroup&lt;/code&gt; issue is resolved soon and the rewriting PR is merged, I will implement homomorphisms to &lt;code class="highlighter-rouge"&gt;FpGroup&lt;/code&gt;s. The presentation PR will probably need more reviewing and I can&amp;#8217;t implement &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; domains without it. I&amp;#8217;m considering looking into an alternative method of doing homomorphisms specifically for the &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;PermutationGroup&lt;/code&gt; case because I&amp;#8217;ve seen a section on it in the Handbook. Or I could start working on Sylow subgroups which is another things I was thinking of doing. These things shouldn&amp;#8217;t depend on any of the unmerged PRs so it would be a good use of time.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://parsoyaarihant.github.io/blog/gsoc/2017/07/23/GSoC17-Week7-Report</guid>
      <author>Arihant Parsoya (parsoyaarihant)</author>
      <title>Arihant Parsoya (parsoyaarihant): GSoC17 Week 7 Report</title>
      <pubDate>Sun, 23 Jul 2017 06:30:00 GMT</pubDate>
      <link>https://parsoyaarihant.github.io/blog/gsoc/2017/07/23/GSoC17-Week7-Report.html</link>
      <description>&lt;p&gt;Francesco opened the &lt;a href="https://github.com/sympy/sympy/pull/12978"&gt;PR&lt;/a&gt; to merge the Rubi module in SymPy. I made the code compatible for python&amp;lt;3.6 to pass the Travis tests. I used &lt;code class="highlighter-rouge"&gt;@doctest_depends_on&lt;/code&gt; function decorator to stop the doctest for python&amp;lt;3.6 and defined dummy classes to pass the tests. We are keeping the PR open for now since it will allow me to run tests on Travis and I expect significant change in code after code generation functionality is added in MatchPy.&lt;/p&gt;

&lt;h4 id="parser"&gt;Parser&lt;/h4&gt;
&lt;p&gt;I have updated the parser to accommodate for &lt;code class="highlighter-rouge"&gt;Wildcard.optional()&lt;/code&gt;. Previously, I sympified the expression and substituted the optional values to create new patterns. The current parser does not use sympy and is very fast compared to previous version.&lt;/p&gt;

&lt;h4 id="tests"&gt;Tests&lt;/h4&gt;
&lt;p&gt;I ran the test suit for algebraic rules 1.2 previously and ~1250/1500 tests were passing. The tests are really slow since they use &lt;code class="highlighter-rouge"&gt;simplify&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;expand&lt;/code&gt; functions. I tried using numerical evaluation at random points and it turned out to be faster than evaluating tests symbolically. Test suits are grouped by the type of expression:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c"&gt;# Integrands of the form a&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="c"&gt;# Integrands of the form x**m&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;

&lt;span class="c"&gt;# Integrands of the form x**(m/S(2))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;

&lt;span class="c"&gt;# Integrands of the form x**(m/S(3))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adding thousands of tests could lead to slowdown of tests. So far my plan is to add 1-2 test from each expression type:&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While inspecting the failed tests, I figured out that the failing tests depend on rules from other modules(such as binomials). Hence, they could not be integrated currently.&lt;/p&gt;

&lt;h4 id="adding-more-rules"&gt;Adding more rules&lt;/h4&gt;
&lt;p&gt;I have added all algebriac rules to the matcher(~1700). But, it led to significant decrease in speed. In some cases, the matcher take so much time that I have to stop the program itself. I have &lt;a href="https://github.com/HPAC/matchpy/issues/13"&gt;opened&lt;/a&gt; an issue for this. Hope this get fixed asap.&lt;/p&gt;

&lt;p&gt;I have added all Algebriac rules to the matcher.&lt;/p&gt;

&lt;h4 id="todo"&gt;Todo&lt;/h4&gt;
&lt;p&gt;I have already added all algebraic rules which is 1/5 of all the rules. I cannot really test all those rules
until the speed issue gets fixed. I will focus on the following this week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once speed is fixed, start testing other modules&lt;/li&gt;
  &lt;li&gt;Prepare test for remaining rubi modules (add tests from each expression type)&lt;/li&gt;
  &lt;li&gt;Rename &lt;code class="highlighter-rouge"&gt;Integer&lt;/code&gt; in rubi.symbols to &lt;code class="highlighter-rouge"&gt;matchpyInteger&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add support for code generation in Rubi if it gets implemented in MatchPy(Manuel said he was working on it last week)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=237</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): GSoC Progress Report</title>
      <pubDate>Wed, 19 Jul 2017 18:21:17 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/07/19/gsoc-progress-report-2/</link>
      <description>&lt;p&gt;I&amp;#8217;ve been working on the last set of Utility functions and after that I&amp;#8217;ll complete some left over functions yet to be implemented. Along with it we have been fixing some bugs which we could notice.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TrigReduce()&lt;/code&gt; is an inbuilt function in &lt;a href="http://reference.wolfram.com/language/ref/TrigReduce.html.en"&gt;Mathematica&lt;/a&gt;, following is its code in Python.&lt;/p&gt;
&lt;pre&gt;def TrigReduce(i):
    if SumQ(i):
    t = 0
        for k in i.args:
            t += TrigReduce(k)
        return t
    if ProductQ(i):
        if any(PowerQ(k) for k in i.args):
            if (i.rewrite(sin, exp).rewrite(cos, exp).expand().rewrite(exp, sin)).has(I):
                return i.rewrite(sin, exp).rewrite(cos, exp).expand().rewrite(exp, sin).simplify()
            else:
                return i.rewrite(sin, exp).rewrite(cos, exp).expand().rewrite(exp, sin)
        else:
            a = Wild('a')
            b = Wild('b')
            v = Wild('v')
            Match = i.match(v*sin(a)*cos(b))
            if Match:
                a = Match[a]
                b = Match[b]
                v = Match[v]
                # 2 sin A cos B = sin(A + B) + sin(A &amp;#8722; B)
                return i.subs(v*sin(a)*cos(b), v*S(1)/2*(sin(a + b) + sin(a - b)))
            Match = i.match(v*sin(a)*sin(b))
            if Match:
                a = Match[a]
                b = Match[b]
                v = Match[v]
                # 2 sin A sin B = cos(A &amp;#8722; B) &amp;#8722; cos(A + B)
                return i.subs(v*sin(a)*sin(b), v*S(1)/2*cos(a - b) - cos(a + b))
            Match = i.match(v*cos(a)*cos(b))
            if Match:
                a = Match[a]
                b = Match[b]
                v = Match[v]
                # 2 cos A cos B = cos(A + B) + cos(A &amp;#8722; B)
                return i.subs(v*cos(a)*cos(b), v*S(1)/2*cos(a + b) + cos(a - b)) 
    if PowerQ(i):
        if i.has(sin):
            if (i.rewrite(sin, exp).expand().rewrite(exp, sin)).has(I):
                return i.rewrite(sin, exp).expand().rewrite(exp, sin).simplify()
            else:
                return i.rewrite(sin, exp).expand().rewrite(exp, sin)
        if i.has(cos):
            if (i.rewrite(cos, exp).expand().rewrite(exp, cos)).has(I):
                return i.rewrite(cos, exp).expand().rewrite(exp, cos).simplify()
            else:
                return i.rewrite(cos, exp).expand().rewrite(exp, cos)
    else:
        return i&lt;/pre&gt;
&lt;p&gt;Some tests for &lt;code&gt;TrigReduce()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt; assert TrigReduce(cos(x)**2) == cos(2*x)/2 + 1/2
 assert TrigReduce(cos(x)**2*sin(x)) == sin(x)/4 + sin(3*x)/4
 assert TrigReduce(cos(x)**2+sin(x)) == sin(x) + cos(2*x)/2 + 1/2
 assert TrigReduce(cos(x)**2*sin(x)**5) == 5*sin(x)/64 + sin(3*x)/64 - 3*sin(5*x)/64 + sin(7*x)/64
 assert TrigReduce(2*sin(x)*cos(x) + 2*cos(x)**2) == sin(2*x) + cos(2*x) + 1&lt;/pre&gt;
&lt;p&gt;I have taken some help from a reply in &lt;a href="https://stackoverflow.com/questions/30541734/how-to-rewrite-sinx2-to-cos2x-form-in-sympy"&gt;stackoverflow&lt;/a&gt;&amp;#160;and may be now we can answer that question much better.&lt;/p&gt;
&lt;p&gt;My next week&amp;#8217;s target would be to complete all the utility functions and fix bugs as much as possible.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/nesar2017.wordpress.com/237/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/nesar2017.wordpress.com/237/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=nesar2017.wordpress.com&amp;#038;blog=126779945&amp;#038;post=237&amp;#038;subd=nesar2017&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
  </channel>
</rss>
