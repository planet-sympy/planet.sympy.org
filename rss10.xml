<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-5</guid>
      <title>Coding Period Week 5</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Tue, 21 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-5/</link>
      <description>&lt;p&gt;&lt;strong&gt;Continue- nonlinsolve :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11111"&gt;#11111&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I found the case where complex solution may be missed. When &lt;code class="highlighter-rouge"&gt;solve_poly_system&lt;/code&gt; is solving polynomial equation and that result is used
in solving non polynomial-equation. May be &lt;code class="highlighter-rouge"&gt;solve_poly_system&lt;/code&gt; returned only real solution( so complex solution is not be used for further steps) so further step is with this real solution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It seems &lt;code class="highlighter-rouge"&gt;solve_poly_system&lt;/code&gt; is doing it&amp;#8217;s job since it is not designed for all solution. But we have &lt;code class="highlighter-rouge"&gt;substitution&lt;/code&gt; method using
&lt;code class="highlighter-rouge"&gt;solveset_real&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;solveset_complex&lt;/code&gt; and retuning all solutionn. In new commits I improved the code and now &lt;code class="highlighter-rouge"&gt;substitution&lt;/code&gt; method can solve all kind of system independently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I come across these kind of situation many times :&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In [68]: x, y, z, r, t = symbols('x, y, z, r, t', real = True)

In [69]: soln = solveset(sqrt(r)*Abs(tan(t))/sqrt(tan(t)**2 + 1) + x*tan(t),x,S.Reals)

In [70]: soln
Out[70]:
          &amp;#9127;      &amp;#8730;r&amp;#8901;&amp;#9474;tan(t)&amp;#9474;      &amp;#9131;
(-&amp;#8734;, &amp;#8734;) &amp;#8745; &amp;#9130;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9130;
          &amp;#9128;   _____________       &amp;#9132;
          &amp;#9130;  &amp;#9585;    2               &amp;#9130;
          &amp;#9129;&amp;#9586;&amp;#9585;  tan (t) + 1 &amp;#8901;tan(t)&amp;#9133;

In [71]: soln = solveset(sqrt(r)*Abs(tan(t))/sqrt(tan(t)**2 + 1) + x*tan(t),x)

In [72]: soln
Out[72]:
&amp;#9127;     -&amp;#8730;r&amp;#8901;&amp;#9474;tan(t)&amp;#9474;      &amp;#9131;
&amp;#9130;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9130;
&amp;#9128;   _____________       &amp;#9132;
&amp;#9130;  &amp;#9585;    2               &amp;#9130;
&amp;#9129;&amp;#9586;&amp;#9585;  tan (t) + 1 &amp;#8901;tan(t)&amp;#9133;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In other words :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In [1]: Intersection(FiniteSet(-x), S.Reals)
Out[1]: (-&amp;#8734;, &amp;#8734;) &amp;#8745; {x}

In [2]: Intersection(FiniteSet(x), S.Reals)
Out[2]: &amp;#8477; &amp;#8745; {x}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So I am not able to extract the &lt;code class="highlighter-rouge"&gt;-x&lt;/code&gt; here. Because of this &lt;code class="highlighter-rouge"&gt;nonlinsolve&lt;/code&gt; returning some extra soln.
One case is in test file : &lt;code class="highlighter-rouge"&gt;test_issue_5132&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I opened a PR for this &lt;a href="https://github.com/sympy/sympy/pull/11280"&gt;#11280&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If someone wants to see the changes I did in &lt;code class="highlighter-rouge"&gt;nonlinsolve&lt;/code&gt; then check these gist &lt;a href="https://gist.github.com/Shekharrajak/5e77fe344c996c17c177985853884985"&gt;nonlinsolve_till_24june_2016&lt;/a&gt;,
&lt;a href="https://gist.github.com/Shekharrajak/5d285ce0cf113cfc217c3e33c3ca04c0"&gt;nonlinsolve_till_21jun2016.py&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;continue..&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Fourth-Week</guid>
      <title>GSoC Fourth Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Mon, 20 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Fourth-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;This week &lt;a href="https://github.com/symengine/symengine/pull/955"&gt;Initial Implementation of Finitefield&lt;/a&gt; got merged. It will allow us to represent polynomial with integral coefficients in finite field.
Talking about the design, we are sticking to the dense representation, i.e. the &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; is a vector.&lt;/p&gt;

&lt;p&gt;This week there was an error in &lt;a href="https://ci.appveyor.com/"&gt;Appveyor&lt;/a&gt; build, I had no idea how to fix this. I tried to print with every passed test case and use &lt;code class="highlighter-rouge"&gt;-VV&lt;/code&gt; option for verbose mode, but it was of no use.
Isuru, then told me that I have to log into the Appveyor&amp;#8217;s VM and debug it. He helped with &lt;code class="highlighter-rouge"&gt;remmina&lt;/code&gt; and we found that there was problem in the &lt;code class="highlighter-rouge"&gt;gf_istrip()&lt;/code&gt; function, where I was erasing elements using iterators, but after any insertion or deletion iterators become invalid. So, it is better to use indices, or do re-assignment of iterators there.&lt;/p&gt;

&lt;p&gt;After that I started working on square free algorithms. In mathematics, a square-free polynomial is a polynomial defined over a field that is not a multiple of the square of a non unit factor. In general terms, they can be thought as a polynomial with no repeated roots.
And square free factorization is the first step towards factorization of polynomials in finite field.
So, I have implemented:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;GaloisFieldDict gf_diff() const;
bool gf_is_sqf() const;
std::vector&amp;lt;std::pair&amp;lt;GaloisFieldDict, integer_class&amp;gt;&amp;gt; gf_sqf_list() const;
GaloisFieldDict gf_sqf_part() const;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_diff&lt;/code&gt; differentiates the polynomial in the given field.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_is_sqf&lt;/code&gt; returns whether polynomial is squarefield in the given field.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_sqf_part&lt;/code&gt; returns the square free part of the polynomaial in the given field.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_sqf_list&lt;/code&gt; returns the square free decomposition of polynomial&amp;#8217;s monic representation in the given field.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This PR has also been merged. Currently I am working on Distinct Degree factorization.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC Week 2, 3</guid>
      <title>GSoC Week 2, 3</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sun, 19 Jun 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc_week_2_3.html</link>
      <description>&lt;p&gt;
            Hi everyone.
          &lt;/p&gt;
          &lt;br /&gt;
          &lt;br /&gt;
          &lt;p&gt;
            Here is a brief summary of what we did in the second and third week of GSoC.
          &lt;/p&gt;
                    &lt;p&gt;First of all I got late in blogging about our progress for the weeks 2, 3. Since the internet connection was disrupted(&lt;a href="https://gxyd.github.io/feeds/quot;https://en.wikipedia.org/wiki/Jat_reservation_agitation"&gt;reason&lt;/a&gt;) for almost 3 weeks in my city, so in between I had to move out to some other place. But still project progress is good :)
                    &lt;/p&gt;
          &lt;p&gt;
Status update:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gxyd.github.io/feeds/quot;https://github.com/sympy/sympy/pull/11140"&gt;PR #11140&lt;/a&gt; on implementation of strategies of coset enumeration has been &lt;i&gt;merged&lt;/i&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
We implemented the &lt;i&gt;Coset Enumeration&lt;/i&gt; strategies. Suppose $G$ is defined by a finite presentation, and $H$ is a subgroup of $G$ (for $H$ we currently only list of generators which generate $H$), which is specified by words in the generators of $G$ that generate $H$. The procedure is known as coset enumeration and is one of the most fundamental methods in CGT. No algorithm (its been proved mathematically [4]) can be guaranteed to terminate for &lt;i&gt;coset enumeration&lt;/i&gt;, so it can't be defined to have a fixed complexity.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Coset Table&lt;/i&gt; is equivalent to the permutation representation of the input group $G$ in its action by right multiplication on the right cosets of $H$. Beginning with the &lt;code&gt;Coset Table&lt;/code&gt;, we have initialised it with various attributes in &lt;i&gt;SymPy&lt;/i&gt;, most of them are instances of &lt;code&gt;list&lt;/code&gt;, they are appended on the way while strategies like &lt;i&gt;HLT&lt;/i&gt;, &lt;i&gt;Felsch&lt;/i&gt; run over it. Contrary to what I mentioned in my last post, &lt;code&gt;CosetTable&lt;/code&gt; is not a subclass of &lt;code&gt;list&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The algorithm we have implemented is known as &lt;i&gt;&lt;a href="https://gxyd.github.io/feeds/quot;https://en.wikipedia.org/wiki/Todd%E2%80%93Coxeter_algorithm"&gt;Todd-Coxeter algorithm&lt;/a&gt;&lt;/i&gt;. The algorithm can use too much memory and time, but still memory is more important resource than time in this algorithm. This algorithm has got two major implementations:
&lt;/p&gt;

&lt;p&gt;
&lt;h4&gt;&lt;u&gt;&lt;i&gt;HLT strategy&lt;/i&gt;&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
In this strategy whenever we use the C.scan_and_fill($\alpha$, $w$) for scanning the word $w$ over coset $\alpha$, routine for scanning which if the scan is incomplete makes a new definition of coset using &lt;code&gt;define&lt;/code&gt; then we make new definitions to enable the scan to complete; that is, we fill in the gaps in the scan of the relator or subgroup generator. Kalevi suggested to make some modification from the original pseudo-code, which resulted in quite a few improvements, since the changes removes un-necessary scanning.
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;
For calculating the index of $x^{-1}$, for a generator $x$, we initialised the Coset Table with a dictionary &lt;code&gt;A_dict_inv&lt;/code&gt;, which has &lt;code&gt;(gen,index)&lt;/code&gt; as &lt;code&gt;(key,value)&lt;/code&gt; pair.
&lt;code&gt;
&lt;pre&gt;
&gt;&gt;&gt; for x, index in self.A_dict.items():
...     if index % 2 == 0:
...         self.A_dict_inv[x] = self.A_dict[x] + 1
...     else:
...         self.A_dict_inv[x] = self.A_dict[x] - 1
&lt;/pre&gt;
&lt;/code&gt;
&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;
We changed the slicing of the Free Group elements, which now work this way.
&lt;code&gt;
&lt;pre&gt;
&gt;&gt;&gt; w = x**2*y**6
&gt;&gt;&gt; w[1]
x
&gt;&gt;&gt; w[3]
y
&lt;/pre&gt;
&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Since earlier it was only possible using the &lt;code&gt;.subword(i, i+1)&lt;/code&gt; to obtain the $i_{th}$ "word".
&lt;/p&gt;
&lt;br /&gt;

&lt;p&gt;
                        We have now completed the &lt;a href="https://gxyd.github.io/feeds/quot;https://github.com/sympy/sympy/pull/11140"&gt;PR #11140&lt;/a&gt;
            We used the utf-8 encoding in &lt;code&gt;sympy/combinatorics/fp_groups.py&lt;/code&gt; in its comments, which was generating the error in &lt;code&gt;Python2.7&lt;/code&gt; but not in &lt;code&gt;Python3.4&lt;/code&gt;
                        &lt;code&gt;
                        &lt;pre&gt;
SyntaxError: Non-ASCII character '\xce' in file /home/gaurav/Public/sympy/sympy/combinatorics/fp_groups.py
on line 79, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details
                        &lt;/pre&gt;
                        &lt;/code&gt;
                        and then using the line &lt;code&gt;# -*- coding: utf-8 -*-&lt;/code&gt; at the top of file resolved the issue, so seems like &lt;code&gt;Python2.x&lt;/code&gt; is more sensitive to such issues.
                    &lt;/p&gt;
                    &lt;p&gt;There was one error in the implemted code:
                        &lt;code&gt;
                        &lt;pre&gt;
&gt;&gt;&gt; from sympy.combinatorics.free_group import free_group
&gt;&gt;&gt; from sympy.combinatorics.fp_groups import FpGroup, coset_enumeration_r, CosetTable
&gt;&gt;&gt; F, x, y = free_group("x, y")
&gt;&gt;&gt; f = FpGroup(F, [x**2, y**3, (x*y)**3])
&gt;&gt;&gt; Y = [x*y]
&gt;&gt;&gt; C = coset_enumeration_r(f, Y)
&gt;&gt;&gt; C.table # this will return the table
&lt;/pre&gt;
&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
                        As for refinement, I will paste another one.
                    &lt;/p&gt;
                    &lt;p&gt;
&lt;code&gt;
&lt;pre&gt;
# these are the steps that happen internally
&gt;&gt;&gt; C = CosetTable(f, Y)
&gt;&gt;&gt; C.scan_and_fill(0, x*y)
&gt;&gt;&gt; C.scan_and_fill(0, x**2)
&gt;&gt;&gt; C.scan_and_fill(0, y**3)
&gt;&gt;&gt; C.scan_and_fill(0, (x*y)**3)
# till now coset table is fine.
# here the coset table returned is wrong.
                        &lt;/pre&gt;
                        &lt;/code&gt;
                    &lt;/p&gt;
                    &lt;p&gt;
                        In the implementation of &lt;code&gt;scan_and_fill&lt;/code&gt; the implemened code differed from that in the book in one significant aspect. In the book, &lt;code&gt;scan_and_fill&lt;/code&gt; looped until it filled the $\alpha$ row in the table. ("Made a new definition and continue with scan."). While the implemented code returned after one definition, the error occured since I tried removing the while loop (some testing purpose). Then we also added some "examples" from [2].
                    &lt;/p&gt;

&lt;i&gt;&lt;u&gt;&lt;h4&gt;Felsch strategy&lt;/h4&gt;&lt;/u&gt;&lt;/i&gt;
&lt;p&gt;
In this we first find the first undefined coset $\alpha$, in this instead of seeing ahead by making use of &lt;code&gt;lookahead&lt;/code&gt;, we make &lt;b&gt;deductions&lt;/b&gt;, which are put in a &lt;code&gt;deduction_stack&lt;/code&gt; (a &lt;code&gt;list&lt;/code&gt; instance which behaves a &lt;i&gt;stack&lt;/i&gt;), which contains the pair $(\alpha, x)$, whenever a new &lt;b&gt;definition&lt;/b&gt; or a &lt;b&gt;deduction&lt;/b&gt; is made, this reduces the number of un-necessary cosets made (loweing the memory use at the cost of time).
&lt;/p&gt;

&lt;p&gt;Though we have made use of &lt;code&gt;CosetTableDefaultMaxLimit = 409600&lt;/code&gt; (similar to that in &lt;i&gt;GAP&lt;/i&gt;), till now I haven't found a single example which would exhaust this much memory in our implementation, every one just seems to take too much of time.
&lt;/p&gt;

&lt;p&gt;
Python utilities learned on the way:
&lt;ul&gt;
&lt;li&gt;At one point we had to make a list of generator and inverse of generators of a finitely presented groups i.e &lt;code&gt;A&lt;/code&gt; for a &lt;code&gt;CosetTable&lt;/code&gt;, I did a bit of searching a arrived at using the &lt;a href="https://gxyd.github.io/feeds/quot;https://docs.python.org/2/library/itertools.html#itertools.chain.from_iterable"&gt;&lt;code&gt;chain.from_iterable&lt;/code&gt;&lt;/a&gt; from the &lt;code&gt;itertools&lt;/code&gt; which works as follows:
&lt;code&gt;
&lt;pre&gt;
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable((x**2, x**3) for x in range(4)))
[0, 0, 1, 1, 4, 8, 9, 27]
&lt;/pre&gt;
&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
Use of &lt;code&gt;product&lt;/code&gt; routine, since in &lt;code&gt;coset enumeration&lt;/code&gt;, we often iterate over  $w \in Y$ and $x \in A$.
&lt;/li&gt;
&lt;li&gt;
In &lt;code&gt;Python2.x&lt;/code&gt; a &lt;code&gt;list&lt;/code&gt; instance doesn't have a &lt;code&gt;copy&lt;/code&gt; attribute, so &lt;code&gt;list()&lt;/code&gt; function or &lt;i&gt;slicing&lt;/i&gt; is used to make a shallow copy. [3]
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;


                    &lt;p&gt;At the end of the post, here's one awesome small example of &lt;code&gt;coset enumeration&lt;/code&gt; using the &lt;i&gt;HLT&lt;/i&gt; strategy. Here is how the code works!! :)
                    &lt;code&gt;
                        &lt;pre&gt;
In[1]: from sympy import *
In[2]: from sympy.combinatorics.free_group import free_group
In[3]: from sympy.combinatorics.fp_groups import FpGroup, CosetTable, coset_enumeration_r
In[4]: F, x, y = free_group("x, y")
In[5]: f = FpGroup(F, [x**2, y**3, (x*y)**4])
In[6]: C = coset_enumeration_r(f, [x])
In[7]: C.table
Out[7]:[[0, 0, 1, 2],
      [3, 3, 2, 0],
      [6, 6, 0, 1],
      [1, 1, 4, 10],
      [5, 5, 10, 3],
      [4, 4, 6, 7],
      [2, 2, 7, 5],
      [8, 8, 5, 6],
      [7, 7, 9, 12],
      [10, 10, 12, 8],
      [9, 9, 3, 4],
      [None, 10, 12, None],
      [12, 12, 8, 9],
      [None, 12, 8, 9],
      [7, None, None, 13]]
In[8]: C.compress()
In[9]: C.standardize()
In[10]: C.table
Out[10]: [[0, 0, 1, 2],
        [3, 3, 2, 0],
        [4, 4, 0, 1],
        [1, 1, 5, 6],
        [2, 2, 7, 8],
        [8, 8, 6, 3],
        [9, 9, 3, 5],
        [10, 10, 8, 4],
        [5, 5, 4, 7],
        [6, 6, 11, 10],
        [7, 7, 9, 11],
        [11, 11, 10, 9]]

                        &lt;/pre&gt;
                    &lt;/code&gt;
                        
                    &lt;/p&gt;
                    &lt;p&gt;
                    My mentor, Kalevi, has been very much supportive, when I informed him about my possible abscence (due to internet unavailability), he even sent me a mail about the &lt;i&gt;things we could do next&lt;/i&gt;, even if I am offline.
                    So here they are: Cosets in Permutation Groups, Finitely presented abelian groups.
                    &lt;/p&gt;
                    &lt;h4&gt;References&lt;/h4&gt;
                    &lt;i&gt;

                    &lt;ul&gt; 
                      &lt;li&gt;1. Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O'Brien, "Handbook of computational group theory", Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-5848-372-3 .&lt;/li&gt;

                        &lt;li&gt;2. John J. Cannon, Lucien A. Dimino, George Havas and Jane M. Watson, Implementation and Analysis of the Todd-Coxeter Algorithm&lt;/li&gt;

                        &lt;li&gt;3. https://mail.python.org/pipermail/tutor/2006-November/051189.html&lt;/li&gt;
                        &lt;li&gt;4. http://www.gap-system.org/Manuals/doc/ref/chap47.html&lt;/li&gt;
                    &lt;/i&gt;
                    &lt;br /&gt;
                    &lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=305</guid>
      <title>GSoC Week 4 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sun, 19 Jun 2016 18:10:16 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/06/19/gsoc-week-4-progress/</link>
      <description>&lt;p&gt;As week #4 comes to an end, the headway I made last week was lost, with lots of memory related errors. But in terms of experience it was quite a good week.&lt;/p&gt;
&lt;p&gt;First of all, some loose ends of &lt;a href="https://github.com/symengine/symengine.rb/pull/51" target="_blank"&gt;PR #51&lt;/a&gt; in symengine.rb was tied up and it was merged, fully completing the FunctionSymbol functionality.&lt;/p&gt;
&lt;p&gt;Next, as I explained in the previous blogpost, the evaluation methods were implemented. The method &amp;#8216;evalf&amp;#8217; provides a single point to evaluate floating point values of mathematics expressions (real &amp;amp; complex), at a given precision.&lt;/p&gt;
&lt;p&gt;This was the first time I was contributing code directly to the SymEngine&amp;#8217;s C++ code. The coding part was pretty much straight-forward, as the method required only to get the expression to be evaluated, the precision needed, and whether it was a real number or not. Using these information, the evaluation was to be forwarded to eval_double, eval_mpfr, eval_complex_double or eval_mpc. But some memory leaks were present, costing me quite a lot of time to localize the errors and to rectify them.&lt;/p&gt;
&lt;p&gt;Now, except for a certain case in the cwrapper tests, everything seems to be working fine, and the work can be checked out under &lt;a href="https://github.com/symengine/symengine/pull/987" target="_blank"&gt;PR #987&lt;/a&gt; in symengine, and &lt;a href="https://github.com/symengine/symengine.rb/pull/55" target="_blank"&gt;PR #55&lt;/a&gt; in symengine.rb repository.&lt;/p&gt;
&lt;p&gt;Also, during this week I was checking out the possible implementation of matrices for the Ruby Wrappers. I decided to interface SymEngine matrices to NMatrix through the Ruby API. So, for the starters I will be going ahead with the SymEngine::DenseMatrix class.&lt;/p&gt;
&lt;p&gt;In Ruby, I plan to implement the following ways of implementing the DenseMatrix:&lt;/p&gt;
&lt;pre&gt;mat = SymEngine::DenseMatrix.new()
mat = SymEngine::DenseMatrix.new(SymEngine::DenseMatrix)
mat = SymEngine::DenseMatrix.new(NMatrix)
mat = SymEngine::DenseMatrix.new(Array)
mat = SymEngine::DenseMatrix.new(no_rows, no_columns)&lt;/pre&gt;
&lt;p&gt;Apart from the coding work, last week&amp;#8217;s code reviews were an interesting part of the learning experience. I was reviewing code of Gaurav &amp;#8211; another SciRuby GSoCer, who is also writing Ruby wrappers. Looking at his code and hearing what he had to tell about mine was quite interesting.&lt;/p&gt;
&lt;p&gt;See you next week, hopefully with better news on the SymEngine matrices!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/305/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/305/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=305&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=347</guid>
      <title>GSoC Week 4</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sun, 19 Jun 2016 07:14:47 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/06/19/gsoc-week-4/</link>
      <description>&lt;p&gt;I have been working on two things since my last blog post and they are: converting Symbolic Functions/Expressions to Holonomic and converting Holonomic to Hypergeometric. Let&amp;#8217;s discuss the former first:&lt;/p&gt;
&lt;p&gt;I wrote a method for converting Expressions earlier too, but that was very trivial, so this week began by me writing a Look-Up table technique to convert expressions. It is similar to the way &lt;code&gt;meijerint._rewrite1&lt;/code&gt;&amp;#160;converts to &lt;code&gt;meijerg&lt;/code&gt;&amp;#160;in the&amp;#160;&lt;code&gt;integrals&lt;/code&gt;&amp;#160;module. The method recursively searches for chunks in the expression that can be converted to Holonomic (using tables) and then uses the operation &lt;code&gt;+, *, ^&lt;/code&gt;&amp;#160;defined on Holonomic Functions to convert the whole expression.&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11222" target="_blank"&gt;#11222&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then I started working on to write a method that converts Holonomic Functions to Hypergeometric or a linear combination of them. (if it&amp;#8217;s possible, because every Holonomic Functions is not Hypergeometric.) First I asked questions I had to&amp;#160;Kalevi on Gitter about how to do it, and then finally wrote the code here&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11246" target="_blank"&gt;#11246&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me also give you an overview of things we have in the module so far.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Differential Operators and Recurrence Operators.&lt;/li&gt;
&lt;li&gt;Holonomic Functions with following operations: addition, multiplication, power, integration and composition).&lt;/li&gt;
&lt;li&gt;Computing Recurrence relation in Taylor coefficients.&lt;/li&gt;
&lt;li&gt;Series expansion using the recurrence. (Some know issues are there if origin is a regular singular point.)&lt;/li&gt;
&lt;li&gt;Numerical Computation (Runge-Kutta 4th Order and Euler&amp;#8217;s method.)&lt;/li&gt;
&lt;li&gt;Converting to Hypergeometric. (Currently working on this.)&lt;/li&gt;
&lt;li&gt;Converting Hypergeometric to Holonomic.&lt;/li&gt;
&lt;li&gt;Converting Meijer G-function to Holonomic.&lt;/li&gt;
&lt;li&gt;Converting expressions to Holonomic. (There doesn&amp;#8217;t seem to be a direct algorithm for converting algebraic functions which are not polynomials or rationals, so they are not supported right now.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week I will be continuing my work on converting to &lt;code&gt;hyper&lt;/code&gt;&amp;#160;and then further extending it to convert to expressions using &lt;code&gt;hyperexpand&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Good&amp;#160;luck to all fellow GSoCers&amp;#160;for Midterm Evaluation.&lt;/p&gt;
&lt;p&gt;Goodbye!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/347/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/347/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=347&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/06/19/Polynomial-Functionality</guid>
      <title>Polynomial Functionalities</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sun, 19 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/06/19/Polynomial-Functionality/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;The last week was spent on adding more functionality to all the three types of Integer Polynomials in SymEngine. Which meant that I had to basically wrap methods already existing in Piranha and Flint, and write new methods for the SymEngine polynomials to provide the required functionality. Details about said functions and the problems faced while implementing them are described in the rest of the post.&lt;/p&gt;

&lt;p&gt;Also this Saturday, some friends and I decided to visit the hill station of Lonavala for the day. It was a replenishing experience, and a break from the regular routine. Here&amp;#8217;s us!&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="http://srajangarg.github.io/assets/lonavala.jpg" /&gt;&lt;/p&gt;

&lt;h3 id="functions"&gt;Functions&lt;/h3&gt;

&lt;p&gt;I wanted to start off by adding a &lt;code class="highlighter-rouge"&gt;div_upoly&lt;/code&gt; functions for dividing two univariate polynomials. It is obvious that division of two polynomials with integer coefficients may very well result in polynomials with rational coefficients. But a rational polynomial class does not exist. So what does it mean to divide two univariate polynomials and get a integer polynomial quotient and remainder? The domain &lt;code class="highlighter-rouge"&gt;ZZ[x]&lt;/code&gt; is not a &lt;a href="https://en.wikipedia.org/wiki/Euclidean_domain"&gt;Euclidean Domain&lt;/a&gt;. Here is what we mean by Euclidean division,&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Two polynomials p, q can uniquely be written as
p = quo * q + rem 
deg(rem) &amp;lt; deg(q) or rem = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thus the euclidean division that we are so familiar with is not defined for this domain. So how do other libraries handle this division? I tried the division with Flint, Sage and SymPy.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In [14]: q = Poly(2*x)
In [15]: p = Poly(5*x**2)
In [16]: div(p, q, domain=ZZ)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Flint and Sage gave :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;quo = Poly(2*x, x, domain='ZZ') 
rem = Poly(x**2, x, domain='ZZ')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;while SymPy gave :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;quo = Poly(0, x, domain='ZZ') 
rem = Poly(5*x**2, x, domain='ZZ')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This was interesting, as SymPy gave a different answer than the other two. I asked about this behaviour on gitter, and had a brief explanation given by &lt;a href="https://github.com/jksuom"&gt;@jksuom&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The operation &lt;code class="highlighter-rouge"&gt;quo_rem&lt;/code&gt; is mathematically well defined only in so-called Euclidean domains. They are principal ideal domains (PIDs) equipped with a &amp;#8216;Euclidean function. &lt;code class="highlighter-rouge"&gt;ZZ[x]&lt;/code&gt; is not a PID, so there is no universal agreement on how &lt;code class="highlighter-rouge"&gt;quo_rem&lt;/code&gt; should be defined. I think that there are some appealing features in the way it is defined in sage, but one cannot say that SymPy&amp;#8217;s way would be wrong, either.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It seems that the main (only?) practical use of &lt;code class="highlighter-rouge"&gt;quo_rem&lt;/code&gt; in non-Euclidean domains is for testing if an element is divisible by another. That happens when the remainder vanishes. Both ways of defining &lt;code class="highlighter-rouge"&gt;quo_rem&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;ZZ[x]&lt;/code&gt; can be used to decide this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This explanation made a lot of sense, but I was anyways asked to open up &lt;a href="https://github.com/sympy/sympy/issues/11240"&gt;#11240&lt;/a&gt;, to know why SymPy handled division the way it did, and if it could be changed. Taking in all the inputs, I decided that I should not go ahead with a &lt;code class="highlighter-rouge"&gt;div_upoly&lt;/code&gt; function for now, instead I made a &lt;code class="highlighter-rouge"&gt;divides_upoly&lt;/code&gt; function which basically tells wether a polynomial divides the other or not. I had to implement the straight forward algorithm in SymEngine, while Flint already had a &lt;code class="highlighter-rouge"&gt;divides&lt;/code&gt; function and Piranha throws an exception on inexact division,  which I used to port it for Piranha polynomials.&lt;/p&gt;

&lt;p&gt;Other methods which were wrapped were &lt;code class="highlighter-rouge"&gt;gcd&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;lcm&lt;/code&gt; for both the Flint and the Piranha polynomials. I have not been able to write these functions for SymEngine polynomials yet. The most trivial algorithms for finding GCD of two univariate polynomials depends on euclidean division, and that does not exist in the integer ring polynomials. Some more information from &lt;a href="https://github.com/jksuom"&gt;@jksuom&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ring &lt;code class="highlighter-rouge"&gt;ZZ[x]&lt;/code&gt; is a unique factorization domain (UFD) even if it is not euclidean. It has &lt;code class="highlighter-rouge"&gt;gcd&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;lcm&lt;/code&gt;, but there is no euclidean algorithm for them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isuru suggested a hint for a simple algorithm, but I have not been able to follow it up yet. I&amp;#8217;ll catch up with it in the coming week. The next function I worked on was &lt;code class="highlighter-rouge"&gt;pow&lt;/code&gt;. Again this was already implemented in the two other libraries and I just had to wrap them. For SymEngine, I had to decide which algorithm to use, a naive repeated approach or the &lt;a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring"&gt;exponention by squaring&lt;/a&gt; algorithm. I also benchmarked the &lt;code class="highlighter-rouge"&gt;pow&lt;/code&gt; methods of Piranha too. All the work and the benchmarks are in &lt;a href="https://github.com/symengine/symengine/pull/989"&gt;#989&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Other functionalities like &lt;code class="highlighter-rouge"&gt;multieval&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;derivative&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;get_lc&lt;/code&gt; were also added for all the three intger polynomials.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There was an error in the Flint documentation, which was related with incorrect ordering of the arguments being passed to the &lt;code class="highlighter-rouge"&gt;divides&lt;/code&gt; function. It was reported in &lt;a href="https://github.com/wbhart/flint2/issues/267"&gt;#267&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Piranha required some implementations to be explicitly provided on the coefficient class, we are going to use. Thus, I had to overwrite some implementations like &lt;code class="highlighter-rouge"&gt;gcd_impl&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;pow_impl&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;divexact_impl&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;SymEngine::intger_class&lt;/code&gt; to work with &lt;code class="highlighter-rouge"&gt;piranha::polynomial&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will write &lt;code class="highlighter-rouge"&gt;gcd&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;lcm&lt;/code&gt; for SymEngine polynomials, and start on &lt;code class="highlighter-rouge"&gt;Basic -&amp;gt; Poly&lt;/code&gt; conversion to add to the coercion framework decided for SymEngine, soon.&lt;/p&gt;

&lt;p&gt;See you!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=546</guid>
      <title>GSoC Week 4</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 17 Jun 2016 19:07:30 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/06/17/gsoc-week-4/</link>
      <description>&lt;p&gt;Hi there! It&amp;#8217;s been four weeks at GSoC. This week, I have been working on integrations. I had a meeting with my mentors on 12th June. It was great. I got stuck while implementing the integrations of Singularity Function earlier.&amp;#160;I had already discussed that in my previous blog post.&amp;#160;But at the&amp;#160;meeting, I got some good ideas from Sartaj and Jason&amp;#160;which not only cleared my doubts but also helped me to complete the implementation&amp;#160;of integration of Singularity Functions. Firstly, they suggested me to start with the integration part in a new PR, since&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178&lt;/a&gt;&amp;#160;was quite good enough to get merged. Secondly, to integrate the Singularity Functions having exponents -1, we need to rewrite it as &amp;#160;DiracDeltas and then to use the methods of integration which are already available&amp;#160;at sympy&amp;#160;and then again rewrite it back as Singularity Functions. &amp;#160;Now I am almost completed with the &amp;#8220;Implementation of Singularity Functions&amp;#8221;.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178&lt;/a&gt;, I have&amp;#160;added the changes that Jason had suggested. This PR is now ready.&lt;/li&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;, I have almost completed implementing the integrations of Singularity Function both definite and indefinite. I have implemented methods to rewrite DiracDeltas and Heaviside back to Singularity Functions. &amp;#160;The arguments of DiracDeltas and Heavisides should be a&amp;#160;linear polynomial to use these methods.&lt;/li&gt;
&lt;li&gt;I have added a module named &amp;#8220;singularityfunctions&amp;#8221; in the integrals directory. In there I have defined a function &amp;#8220;singularityintegrate&amp;#8221;. This one is the core function to integrate the Singularity Functions. SingularityFunction(x, a, -1) perfectly behaves as DiracDelta(x &amp;#8211; a).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;To polish&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;&amp;#160;and get them merged.&lt;/li&gt;
&lt;li&gt;To start working with Beam Bending Module.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward toward an another great week. Cheers!&lt;/p&gt;
&lt;p&gt;Midterm Evaluation is Coming !!! All the best.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/546/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/546/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=546&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/06/17/GSoC-week-4.html</guid>
      <title>GSoC Week 3</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 17 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/06/17/GSoC-week-4.html</link>
      <description>&lt;p&gt;I started off this week writing the example code for a pendulum defined by x
and y coordinates instead of an angle, theta. This was to show how the
&lt;code class="highlighter-rouge"&gt;eombase.EOM&lt;/code&gt; class would handle a differential algebraic system. I also
altered the simple pendulum example I made early on in the project to show how
it would look as an &lt;code class="highlighter-rouge"&gt;eombase.EOM&lt;/code&gt; example. Of the examples I have made for the
base class this one stands out as currently being the only one making use of
the equations of motion generators (the other two have the equations of motion
entered by hand). While addressing comments on the PR, it was mentioned that a
more traditional documentation approach would allow greater visibility of the
desired results of the code as the output could be explicitly shown. I agreed
and moved all three examples to a single .rst document in PyDy and changed the
code to represent the documentation format over example code format. At this
point I made a list of all of the attributes and methods I though the base
class should represent and made sure they were represented in the example
documentation. In addition I included multiple ways I thought error messages
should be brought up for incorrect uses of the base class. This information is
currently awaiting review.&lt;/p&gt;

&lt;p&gt;In addition to the work on the base class I had to fix the kane benchmark I
made early on in the project. At some point in the last few months the input
order for &lt;code class="highlighter-rouge"&gt;kane.kanes_equations()&lt;/code&gt; was flipped and this caused the benchmark to
not be able to run on pervious versions of Sympy. My fix was to use a
try/except clause to catch the error produced by the older versions of Sympy
and alter the input order based on whether or not the error was produced. This
code sits at &lt;a href="https://github.com/sympy/sympy_benchmarks/pull/29"&gt;PR #29&lt;/a&gt; and it
too is awaiting review/approval.&lt;/p&gt;

&lt;p&gt;While I have been waiting for review of the base class PR, I have begun reading
through Roy Featherstone&amp;#8217;s book, &amp;#8220;Rigid Body Dynamics Algorithms&amp;#8221;. I have spent
time going through Jason&amp;#8217;s overhaul of &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; as well and trying to
provide as much useful feedback as I can.&lt;/p&gt;

&lt;p&gt;Lastly I reviewed &lt;a href="https://github.com/sympy/sympy/pull/11183#issuecomment-225102295"&gt;PR
#11209&lt;/a&gt; this
week. The PR correctly alters code that tests for the presence of a key in a
dictionary. It also altered the indentation of the code that immediately
followed. I eventually came to the conclusion that this was a correct
alteration because the variable &lt;code class="highlighter-rouge"&gt;eq_no&lt;/code&gt; is set in the dictionary key test and
is used in the code that follows the test. I commented that the PR looks good
to me and another member of SymPy merged it. This makes me slightly worried
that too much value may be attached to my opinion as I still feel like a
beginner.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;I will continue reading through Featherstone&amp;#8217;s book until I recieve feedback on
the proposed base class API at which time I will address the reviewer&amp;#8217;s
comments and hopefully begin work on the base class itself.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Open) Improved the explanation of the 5 equations in the Kane&amp;#8217;s Method
  docs &lt;a href="https://github.com/sympy/sympy/pull/11183"&gt;PR #11183&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Created a basis on which to discuss EOM class &lt;a href="https://github.com/pydy/pydy/pull/353"&gt;PR
  #353&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Minor fix in KanesMethod&amp;#8217;s docstring &lt;a href="https://github.com/sympy/sympy/pull/11186"&gt;PR
  #11186&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Fixed kane benchmark for different input order &lt;a href="https://github.com/sympy/sympy_benchmarks/pull/29"&gt;PR
  #29&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Fix issue #8193 &lt;a href="https://github.com/sympy/sympy/pull/11209"&gt;PR
  #11209&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Third-Week</guid>
      <title>GSoC Third Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Mon, 13 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Third-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;This week I had been working on the design of the &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; class and the &lt;code class="highlighter-rouge"&gt;GaloisFieldDict&lt;/code&gt; class.&lt;br /&gt;&lt;br /&gt;
Firstly, like &lt;code class="highlighter-rouge"&gt;UIntDict&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;GaloisFieldDict&lt;/code&gt; was also inheriting &lt;code class="highlighter-rouge"&gt;ODictWrapper&lt;/code&gt;, and had the &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; as &lt;code class="highlighter-rouge"&gt;map&amp;lt;unsigned int, integer_class&amp;gt;&lt;/code&gt; making it a sparse representation.&lt;br /&gt;
Then &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; was inherting &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt;, in which the &lt;code class="highlighter-rouge"&gt;Container&lt;/code&gt; was a &lt;code class="highlighter-rouge"&gt;GaloisFieldDict&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;
The &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; being a map, I made some more optimization to the code, mainly with the &lt;code class="highlighter-rouge"&gt;insert&lt;/code&gt; function. I gave extra attention to the fact that we can optimize insertion by providing an iterator as hint.&lt;br /&gt;
Apart from it, made a inplace copy of almost all the arithmetic and modular operations/functions. &lt;br /&gt;
Then, as we had already implemented the division operation in Finite field, so I overloaded the &lt;code class="highlighter-rouge"&gt;/&lt;/code&gt; operator.&lt;br /&gt;&lt;br /&gt;
Down the way, I saw one test constantly failing in Travis CI. The platform it was failing on was OSX. As I don&amp;#8217;t have access to OSX, the debugging took a long time, But after the debugging, I fixed some good bugs. It highlights the importance of writing good tests including corner cases.&lt;br /&gt;&lt;br /&gt;
It was all fine till now. Isuru (my mentor) realized that as we have to do a lot amount of division, and in that we will have to access all the elements of map less than degree of divisor (for calculating remainder). It will take more time with &lt;code class="highlighter-rouge"&gt;map&lt;/code&gt; than &lt;code class="highlighter-rouge"&gt;vector&lt;/code&gt;. So we decided to shift our &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; type to &lt;code class="highlighter-rouge"&gt;std::vector&amp;lt;integer_class&amp;gt;&lt;/code&gt;. Now the &lt;code class="highlighter-rouge"&gt;GaloisFieldDict&lt;/code&gt; class doesn&amp;#8217;t inherit from &lt;code class="highlighter-rouge"&gt;ODictWrapper&lt;/code&gt; while the &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; class still have the same structure. Now &lt;code class="highlighter-rouge"&gt;GaloisFieldDict&lt;/code&gt;&amp;#8217;s &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; being a &lt;code class="highlighter-rouge"&gt;vector&lt;/code&gt;, I had to implement a function &lt;code class="highlighter-rouge"&gt;gf_istrip()&lt;/code&gt;, which strips off the leading zeroes, so that the degree of our polynomial can be accessed directly by &lt;code class="highlighter-rouge"&gt;dict_.size()-1&lt;/code&gt; and most importantly the number of computation decreases.&lt;br /&gt;
As this work is in progress, I will post about it in the next week&amp;#8217;s post.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-4</guid>
      <title>Coding Period Week 4</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Mon, 13 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-4/</link>
      <description>&lt;h4 id="solveset-when-domain--sintegers"&gt;&lt;code class="highlighter-rouge"&gt;Solveset&lt;/code&gt; when &lt;code class="highlighter-rouge"&gt;domain = S.Integers&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11234"&gt;#11234&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right now we may not get our solution in Integer domain but we can use concept of diophantine equations in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;.
When I messaged about this in giiter channel Aaron told about the &lt;code class="highlighter-rouge"&gt;diophantine&lt;/code&gt;, already defined in solvers/diophantine.py.
So we can use &lt;code class="highlighter-rouge"&gt;diophantine&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to get Integer solution.&lt;code class="highlighter-rouge"&gt;diophantine&lt;/code&gt; is c</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=276</guid>
      <title>GSoC Week 3 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sun, 12 Jun 2016 19:13:04 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/06/12/gsoc-week-3-progress/</link>
      <description>&lt;p&gt;The week 3 in GSoC started with a backlog coming from the second week. But I was able to end the week on a happier note, by catching up with that work, and almost finishing the work assigned for this week. Apart from that, I have started reading on implementing a feature, not present in the original timeline as well.&lt;/p&gt;
&lt;p&gt;In order to complete the work from RealMPFR and ComplexMPC wrappers, I was able to get merged, &lt;a href="https://github.com/symengine/symengine/pull/972" target="_blank"&gt;PR #972&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine/pull/984" target="_blank"&gt;PR #984&lt;/a&gt; on symengine repository. The work from second week finally came to an end with &lt;a href="https://github.com/symengine/symengine.rb/pull/49" target="_blank"&gt;PR #49&lt;/a&gt; getting merged in the symengine.rb repository.&lt;/p&gt;
&lt;p&gt;For the third week&amp;#8217;s work, Series and Polynomials had to be postponed because, the symengine developers are still finalizing them. So, I was left with Derivatives, Substitutions and Abs. Those implementations were covered with &lt;a href="https://github.com/symengine/symengine/pull/982" target="_blank"&gt;PR #982&lt;/a&gt; in symengine repository and &lt;a href="https://github.com/symengine/symengine.rb/pull/50" target="_blank"&gt;PR #50&lt;/a&gt; in symengine.rb repository. &lt;a href="https://github.com/symengine/symengine.rb/pull/51" target="_blank"&gt;PR #51&lt;/a&gt; is currently under review, and a discussion on probable methods to extend the FunctionSymbol initialization function is currently underway.&lt;/p&gt;
&lt;p&gt;Speaking of the other extra work I am going to take, it is about the eval methods. Currently the symengine has four eval methods, one each for limited precision reals and complexes, and multiple precision reals and complexes. This needs to be provided through an interfacing method, which is of the following format:&lt;/p&gt;
&lt;pre&gt;&lt;span class="_5yl5"&gt;RCP&amp;lt;const Number&amp;gt; eval(const Basic &amp;amp;b, unsigned long bits = 53, bool real=False)

&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This needs to be written in C++, then wrapped in C and later in Ruby. Though I was planning to start working on it during the weekend, it was only possible to read and plan how to write the code. So next week, along with starting on the Matrices, I will look into achieving this as well.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/276/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/276/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=276&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/06/12/Piranha-Polynomials</guid>
      <title>Piranha Polynomials &amp; Iterators</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sun, 12 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/06/12/Piranha-Polynomials/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;I worked on wrapping Piranha polynomials within SymEngine this week. It felt much more interesting than wrapping Flint polynomials, mainly because I was reading the Piranha&amp;#8217;s source and was in direct touch with the  author of the library. Many thanks to &lt;a href="https://github.com/bluescarni"&gt;@bluescarni&lt;/a&gt; who helped me getting familiar with it. As before, I&amp;#8217;ll briefly summarize the work I did this week along with my progress.&lt;/p&gt;

&lt;h3 id="piranha-polynomials"&gt;Piranha Polynomials&lt;/h3&gt;

&lt;p&gt;Piranha&amp;#8217;s polynomial class is the &lt;code class="highlighter-rouge"&gt;piranha::polynomial&lt;/code&gt; class. It&amp;#8217;s templatized as follows:&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Cf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;polynomial&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;power_series&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are two major differences about Piranha Polynomials and SymEngine polynomials. Firstly, it uses a custom unordered map implementation called &lt;code class="highlighter-rouge"&gt;hash_set&lt;/code&gt; for storing it&amp;#8217;s degree-coefficient pairs. &lt;code class="highlighter-rouge"&gt;hash_set&lt;/code&gt; has been internally optimized for polynomial manipulations in general. On a side note, this makes SymEngine have all three types of polynomial representations too! Secondly, Piranha does not distinguish between univariate polynomials and multivariate polynomials. All polynomials are multivariate polynomials, univariate polynomials being a special case (with just one element in it&amp;#8217;s &lt;code class="highlighter-rouge"&gt;symbol_set&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here, &lt;code class="highlighter-rouge"&gt;Cf&lt;/code&gt; is the class for storing the coefficients, while &lt;code class="highlighter-rouge"&gt;Key&lt;/code&gt; are the monomials themselves. Unlike Flint, we can use any integer class as the coefficient class for the polynomials. So, the first question was wether to use &lt;code class="highlighter-rouge"&gt;piranha::integer&lt;/code&gt; (and use implicit conversions like I did in Flint polynomials) or &lt;code class="highlighter-rouge"&gt;SymEngine::integer_class&lt;/code&gt; as the integer class for Piranha polynomials. After a brief discussion with Isuru, we decided to go with SymEngine&amp;#8217;s integers. The &lt;code class="highlighter-rouge"&gt;Key&lt;/code&gt; class used is &lt;code class="highlighter-rouge"&gt;piranha::monomial&amp;lt;uint&amp;gt;&lt;/code&gt;, which means it will store one &lt;code class="highlighter-rouge"&gt;unsigned int&lt;/code&gt; per symbol (representing the degree, in each monomial).&lt;/p&gt;

&lt;h3 id="symengines-integers-in-piranhapolynomial"&gt;SymEngine&amp;#8217;s integers in &lt;code class="highlighter-rouge"&gt;piranha::polynomial&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;For an integer class to be usable as the &lt;code class="highlighter-rouge"&gt;Cf&lt;/code&gt; it should have some basic properties like, default constructibility, copy constructibility, &lt;code class="highlighter-rouge"&gt;nothrow&lt;/code&gt; destructibility, &lt;code class="highlighter-rouge"&gt;nothrow&lt;/code&gt; move assignability and &lt;code class="highlighter-rouge"&gt;nothrow&lt;/code&gt; move constructibility. As of yet, &lt;code class="highlighter-rouge"&gt;mpz_wrapper&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;fmpz_wrapper&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;mpz_class&lt;/code&gt; did not pass the &lt;code class="highlighter-rouge"&gt;nothrow&lt;/code&gt; checks. All that had to bee done was that I had to add &lt;code class="highlighter-rouge"&gt;noexcept&lt;/code&gt; to the wrappers we had already written. This allowed &lt;code class="highlighter-rouge"&gt;mpz_wrapper&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;fmpz_wrapper&lt;/code&gt; to be used as coefficients in Piranha polynomials. Ofcourse, Piranha&amp;#8217;s own integer class passes all these checks too.&lt;/p&gt;

&lt;p&gt;Currently, there is no solution for having &lt;code class="highlighter-rouge"&gt;mpz_class&lt;/code&gt; as the coefficient class for polynomials. Firstly, these gmpxx integers methods have not been marked &lt;code class="highlighter-rouge"&gt;nothrow&lt;/code&gt; yet. There is a forum &lt;a href="https://gmplib.org/list-archives/gmp-devel/2016-April/004271.html"&gt;post&lt;/a&gt; on how it can be added, and actually has been added in the development version but hasn&amp;#8217;t been released yet. Another reason  is that &lt;code class="highlighter-rouge"&gt;mpz_class&lt;/code&gt; uses &lt;a href="https://en.wikipedia.org/wiki/Expression_templates"&gt;expression templates&lt;/a&gt; for improved performance. This means that unlike normal integers, any arithmetic operation does not necessarily return the same integer class.&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;is_a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 		&lt;span class="c1"&gt;// true
&lt;/span&gt;
&lt;span class="n"&gt;mpz_class&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;is_a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;mpz_class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;	&lt;span class="c1"&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The reason it cannot be used within Piranha is that Piranha checks the coefficient type after each operation so that it knows what &lt;a href="https://en.wikipedia.org/wiki/Polynomial_ring"&gt;ring&lt;/a&gt; the polynomial belongs to. Here, it will be unable to detect what the ring is, as the returned coefficient will be an expression template. Thus, it was decided that the integer class &lt;code class="highlighter-rouge"&gt;mpz_class&lt;/code&gt; can&amp;#8217;t be used alongside Piranha with SymEngine. So, the following became invalid, on which a warning is thrown and the class is changed to &lt;code class="highlighter-rouge"&gt;mpz_wrapper&lt;/code&gt; :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;cmake -DWITH_PIRANHA=yes -DINTEGER_CLASS=gmpxx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All the work on Piranha polynomials and the &lt;code class="highlighter-rouge"&gt;cmake&lt;/code&gt; changes can be found in &lt;a href="https://github.com/symengine/symengine/pull/980"&gt;#980&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="iterators"&gt;Iterators&lt;/h3&gt;

&lt;p&gt;Currently this is what the &lt;code class="highlighter-rouge"&gt;print&lt;/code&gt; functions for our univariate integer polynomials looked like :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;UIntPoly&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="c1"&gt;// use it-&amp;gt;first and it-&amp;gt;second
&lt;/span&gt;	&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;UIntPolyFlint&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;degree&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="c1"&gt;// use it and p.get_coeff(it)
&lt;/span&gt;	&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These methods are very similar and do not deserve to be separate functions. All that was needed to unify these methods was to have iterators for each of the three classes, and then we can have use the same code for many functions like &lt;code class="highlighter-rouge"&gt;print&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;as_symbolic&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;derivative&lt;/code&gt;. This also called for a new base class to be made, &lt;code class="highlighter-rouge"&gt;UIntPolyBase&lt;/code&gt; from which these three integer polynomials inherit and it itself inherits from the original base class &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I stuck with the syntax of &lt;code class="highlighter-rouge"&gt;it-&amp;gt;first&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;it-&amp;gt;second&lt;/code&gt; for the unified iterators. Which means &lt;code class="highlighter-rouge"&gt;operator*&lt;/code&gt; needed to return a &lt;code class="highlighter-rouge"&gt;std::pair&amp;lt;uint, integer_class&amp;gt;&lt;/code&gt;. So, for SymEngine polynomials all I needed to do was return iterators to the internal dictionary and that was it. Not going into too much technicality, for Flint and Piranha I used custom iterators which had &lt;code class="highlighter-rouge"&gt;operator++&lt;/code&gt; defined on them and returned a pair whenever &lt;code class="highlighter-rouge"&gt;it-&amp;gt;&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;*it&lt;/code&gt; was called on them. They basically iterated over the degree and returned only for non-zero coefficients for both the libraries. The actual implementation of the iterator scheme can be seen in &lt;a href="https://github.com/symengine/symengine/pull/985"&gt;#985&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially I was happy with this approach and was able to write (unifying the three) :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;string print(const UIntPolyBase&amp;amp; p)
{
	for(auto it = p.dict_.begin(); it != p.dict_.end(); ++it)
	{
		// use it-&amp;gt;first and it-&amp;gt;second
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Isuru pointed out that instead of returning the &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt; in the pair, we should return a reference to it. Now, this made sense but was a bit tricky to implement. Also the iterator could no longer return reference like &lt;code class="highlighter-rouge"&gt;const integer_class&amp;amp;&lt;/code&gt;, as Flint did not even store it&amp;#8217;s coefficients as &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt;. To tackle this, another template parameter had to be added to the custom iterator class which determined the second term of the pair (which was supposed to be the reference to the coefficient in the internal storage of the polynomial). Also, I had to dig in to the Flint documentation and ask Piranha&amp;#8217;s author, for knowing how I could get &lt;code class="highlighter-rouge"&gt;const&lt;/code&gt; references to the coefficients in internal storage. After this was finally implemented, there was a new &lt;code class="highlighter-rouge"&gt;get_coeff_ref&lt;/code&gt; method, which does not copy but returns a reference to the required coefficient. The only downside to all this was that instead of &lt;code class="highlighter-rouge"&gt;it-&amp;gt;second&lt;/code&gt; I had to use &lt;code class="highlighter-rouge"&gt;to_integer_class(it-&amp;gt;second)&lt;/code&gt; everywhere in the common functions.&lt;/p&gt;

&lt;h3 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I saw that in SymEngine, there were lots of redundant header file includes in many files. I wrote a short python script which makes a header dependency tree, and automatically removes header includes which are not needed. After some manual inspection of the changes I pushed in &lt;a href="https://github.com/symengine/symengine/pull/981"&gt;#981&lt;/a&gt;. It was really amazing to see the script flag more than 500 lines of redundant includes. The PR has not been merged yet, though.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be working on higher level functionality like &lt;code class="highlighter-rouge"&gt;gcd&lt;/code&gt; in the coming week. Will keep you guys posted.&lt;/p&gt;

&lt;p&gt;Laters!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=431</guid>
      <title>GSoC Week 3</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sat, 11 Jun 2016 16:47:44 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/06/11/gsoc-week-3/</link>
      <description>&lt;p&gt;Hi! It&amp;#8217;s been three weeks into the coding period, &amp;amp; I have managed to get some pace.I had a meeting with &lt;a href="https://github.com/moorepants"&gt;Jason&lt;/a&gt; and &lt;a href="https://github.com/leosartaj"&gt;Sartaj&lt;/a&gt; on 5&lt;sup&gt;th&lt;/sup&gt;&amp;#160;of this month.&amp;#160;We exchanged our thoughts on implementing the integration of Singularity Function objects. Then our discussion moved on towards the implementation of the Beam Bending Module. We focused on whether a Beam object will be mutable or immutable.We ended up discussing two approaches for the implementation&amp;#160;of the integration of Singularity Function objects.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11137"&gt;PR 11137&lt;/a&gt;&amp;#160;has finally got merged.&lt;/li&gt;
&lt;li&gt;In&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178&lt;/a&gt;, I have added two important methods under &amp;#160;Singularity Function class.
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;rewrite(Heaviside)&lt;/li&gt;
&lt;li&gt;rewrite(DiracDelta)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;p&gt;These would help to convert a Singularity Function object into a mixture of DiracDeltas and Heavisides.&lt;/p&gt;
&lt;p&gt;But while doing the inverse i.e. rewriting DiracDeltas and Heavisides I got stuck. I have implemented that in a way which can&amp;#8217;t handle a bit complex expressions,but good for simple DiracDelta and Heaviside expressions. I need to work on this method.&lt;/li&gt;
&lt;li&gt;In the same PR, I am also working on the integration of the Singularity Functions. There are two approaches which I have discussed with my mentors.
&lt;ul&gt;
&lt;li&gt;Directly use the rules of integrations:- I mean if the&amp;#160;exponent is greater than zero then increase the exponent by 1 and divide the whole by the resulting exponent. Else just increase the exponent by 1.&lt;br /&gt;
The issue with this approach is if we perform Sympy integrations over SingularityFunction(x, a, 0) ,which is basically DiracDelta(x &amp;#8211; a), then it doesn&amp;#8217;t satisfy the fundamentals properties of DiracDelta integrations. For the purpose, I am trying the next approach.&lt;/li&gt;
&lt;li&gt;Using Heaviside and DiracDelta :- Convert the Singularity function into expressions containing DiracDeltas and Heavisides and then integrate that. Integrations of DiracDeltas and Heavisides are already there in Sympy. Then rewrite that result back into the Singularity Function. Lastly, just output that resulting expression.&lt;br /&gt;
Currently, I am working on rewriting the DiracDeltas and Heavisides back into the Singularity Function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Continue with the implementation of integrations of Singularity Functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for now, looking forward to week 4.&lt;/p&gt;
&lt;p&gt;Cheers. Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/431/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/431/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=431&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/06/10/GSoC-week-3.html</guid>
      <title>GSoC Week 3</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 10 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/06/10/GSoC-week-3.html</link>
      <description>&lt;p&gt;Today is Friday the 10th and thus marks the end of the third week of Google
Summer of Code. This week started off with continuing work on making test code
and a base class for &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt;. The work took a turn
early in the week when I started working on an example problem that would use
the base class instead of working on the base class and test code itself. This
resulted in more reading and studying of code examples. This week I also had
the opportunity to review multiple shorter PR&amp;#8217;s in addition to a longer one
that dealt directly with code in &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the very beginning of this week I migrated all property attributes from
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; into &lt;code class="highlighter-rouge"&gt;EOM&lt;/code&gt; as a base class. This work shows
up in &lt;a href="https://github.com/sympy/sympy/pull/11182"&gt;PR #11182&lt;/a&gt; which was
originally meant to just be a discussion on the API for the base class. It was
suggested to me to stop working on the actual implementation at this point and
work on planning out a more complete API.&lt;/p&gt;

&lt;p&gt;In order to come up with a more complete plan for the API for &lt;code class="highlighter-rouge"&gt;EOM&lt;/code&gt; I first had
to get a better understanding of what was done with the equations of motion
after the formation step. To do this I looked over
&lt;a href="https://github.com/pydy/pydy-tutorial-human-standing"&gt;pydy-tutorial-human-standing&lt;/a&gt;,
&lt;a href="http://nbviewer.jupyter.org/github/bmcage/odes/blob/master/docs/ipython/Planar%20Pendulum%20as%20DAE.ipynb"&gt;Planar Pendulum
Example&lt;/a&gt;,
&lt;a href="http://www.pydy.org/examples/double_pendulum.html"&gt;Double Pendulum Example&lt;/a&gt;
and &lt;a href="http://nbviewer.jupyter.org/github/pydy/pydy/blob/master/examples/mass_spring_damper/mass_spring_damper.ipynb"&gt;PyDy Mass Spring Damper
Example&lt;/a&gt;.
After the equations of motion are formed the most common use for them was for
time simulations using ODE integration (or DAE integration) and so the next
thing I did was look into the documentation for the integrators
(&lt;a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.odeint.html#scipy.integrate.odeint"&gt;scipy.integrate.odeint&lt;/a&gt;
and &lt;a href="https://github.com/bmcage/odes"&gt;scikit.odes.dae&lt;/a&gt;). With this information I
was able to begin work on an example problem in for the PyDy repository that
would make use of this new class.&lt;/p&gt;

&lt;p&gt;I found that Pydy&amp;#8217;s &lt;code class="highlighter-rouge"&gt;System&lt;/code&gt; class performed the work of rearrangeing the
equations of motion into a form accepted by the integrators and so the main
focus of the base class is to have the attributes that system expects. After
analyzing &lt;code class="highlighter-rouge"&gt;System&lt;/code&gt;&amp;#8217;s internals I went ahead and created a basic example of a
base class and submitted the code in &lt;a href="https://github.com/pydy/pydy/pull/353"&gt;PR
#353&lt;/a&gt; in the PyDy repository. The PR
shows manual entry of the equation of motion for a system with two masses,
springs and dampers and will be used for further discussion of the API.&lt;/p&gt;

&lt;p&gt;This week I reviewed two shorter PR&amp;#8217;s and one longer PR. The shorter PR&amp;#8217;s were
&lt;a href="https://github.com/sympy/sympy/pull/10698"&gt;PR #10698&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/10693"&gt;PR
#10693&lt;/a&gt; and covered sympy
documentation. The first requested removing a docstring of one of the modules
because the module had detailed documentation online. I suggested that this
would be a negative change to sympy overall and others in sympy came to the
same conclusion and it was promptly closed. The other documentation PR had a
couple of spelling fixes but also had some negative or non-useful changes and
is currently awaiting the author to remedy the latter. The Longer PR this week
was a continuation on the Kanes Method &lt;a href="https://github.com/sympy/sympy/pull/11183"&gt;PR
#11183&lt;/a&gt; Jason started last week and
is an effort to improve the readibility and overall cleanliness of
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;The current plan for the next steps of the project is to come up with a few
more examples of the base class in use. Once the example code has laid out an
API I will begin implementing the base class itself.&lt;/p&gt;

&lt;h3 id="prs-and-issues-referenced-in-post"&gt;PR&amp;#8217;s and Issues Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Open) Improved the explanation of the 5 equations in the Kane&amp;#8217;s Method
  docs &lt;a href="https://github.com/sympy/sympy/pull/11183"&gt;PR #11183&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) kane.old_linearizer &lt;a href="https://github.com/sympy/sympy/issues/11199"&gt;Issue
  #11199&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) EOMBase class migration of property attributes &lt;a href="https://github.com/sympy/sympy/pull/11182"&gt;PR
  #11182&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Created a basis on which to discuss EOM class &lt;a href="https://github.com/pydy/pydy/pull/353"&gt;PR
  #353&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Closed) Remove documented redundant comments &lt;a href="https://github.com/sympy/sympy/pull/10698"&gt;PR
  #10698&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Docmentation comments corrections &lt;a href="https://github.com/sympy/sympy/pull/10693"&gt;PR
  #10693&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://github.com/kshitij10496/2016/06/10/GSoC-Week-03/</guid>
      <title>GSoC Week 03 - The One With Function Range (Part II)</title>
      <author>Kshitij Saraogi(kshitij10496)</author>
      <pubDate>Fri, 10 Jun 2016 00:00:00 GMT</pubDate>
      <link>https://github.com/kshitij10496/2016/06/10/GSoC-Week-03/</link>
      <description>&lt;p&gt;Hey !&lt;/p&gt;

&lt;p&gt;This week I worked on implementing a method for finding the range of a function in a given domain.
Following from last weeek&amp;#8217;s research on the same, I tried to develop these utility functions.&lt;/p&gt;

&lt;h3 id="implementation"&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Here, I have defined the two functions along with some of their implementation details:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class="highlighter-rouge"&gt;continuous_in(f, x, interval)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The function returns the sub-domains as an &lt;code class="highlighter-rouge"&gt;Union&lt;/code&gt; of &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; in case a discontinuity exists in the &lt;code class="highlighter-rouge"&gt;interval&lt;/code&gt;. If the function is continuous in the entire domain, the &lt;code class="highlighter-rouge"&gt;interval&lt;/code&gt; itself is returned.&lt;/p&gt;

&lt;p&gt;For this we need to consider 2 primary conditions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Domain constraints for real functions&lt;/strong&gt;
I have also added some code for domain constraints in &lt;code class="highlighter-rouge"&gt;sqrt&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;log&lt;/code&gt; functions.
Using the &lt;code class="highlighter-rouge"&gt;solve_univariate_inequality&lt;/code&gt; method (as the name suggests, it solves univariate inequalities),
we calculate these constraints.&lt;br /&gt;
Given &lt;code class="highlighter-rouge"&gt;f(x) = sqrt(g(x))&lt;/code&gt;, we determine the range of values of &lt;code class="highlighter-rouge"&gt;x&lt;/code&gt; for which the function &lt;code class="highlighter-rouge"&gt;g(x) &amp;gt;= 0&lt;/code&gt;.&lt;br /&gt;
Similarly, for &lt;code class="highlighter-rouge"&gt;f(x) = log(g(x))&lt;/code&gt;, the interval of &lt;code class="highlighter-rouge"&gt;x&lt;/code&gt; in which &lt;code class="highlighter-rouge"&gt;g(x) &amp;gt; 0&lt;/code&gt; is the constrained interval.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Singularities&lt;/strong&gt;
For determining the discontinuities, I tried to solve the reciprocal of the given function using &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;:&lt;code class="highlighter-rouge"&gt;
solveset(1/f, x, interval)&lt;/code&gt;. The &lt;code class="highlighter-rouge"&gt;singularities&lt;/code&gt; function can also be used here but its implementation is 
restricted to rational functions only. There are possibilities of improving this function to create a universal
function which returns all the possible singularities of the function in a given domain.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class="highlighter-rouge"&gt;function_range(f, x, domain)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Like the name suggests, this method returns the range of a univariate function in a given domain. This function is primarily designed for the purpose of &lt;code class="highlighter-rouge"&gt;solve_decomposition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function calls the above implemented &lt;code class="highlighter-rouge"&gt;continuous_in&lt;/code&gt; method for finding the actual domain of &lt;code class="highlighter-rouge"&gt;f&lt;/code&gt;. Following this, we iterate over each &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; object returned by &lt;code class="highlighter-rouge"&gt;continuous_in&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By using the boundaries of the interval and first derivate test, we determine the crtical points in the interval 
and their corresponding critical values.&lt;/p&gt;

&lt;p&gt;For determining the values of the function at the singularities, we determine its limit at that point. 
For this, I use the &lt;code class="highlighter-rouge"&gt;limit&lt;/code&gt; function of SymPy.&lt;/p&gt;

&lt;p&gt;After calculating the local extremas, I calculate the global minima and maxima using the &lt;code class="highlighter-rouge"&gt;inf&lt;/code&gt;(infimum) and &lt;code class="highlighter-rouge"&gt;sup&lt;/code&gt;(supremum) of the &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; of all critical values. The range, which is the &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; of these extremasm, is returned.&lt;/p&gt;

&lt;h3 id="git-log"&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/11141"&gt;PR#11141&lt;/a&gt;: Method for solving equations using Decomposition and Rewriting
&lt;em&gt;Opened this week&lt;/em&gt; &lt;br /&gt;
&lt;a href="https://github.com/sympy/sympy/pull/11224"&gt;PR#11224&lt;/a&gt;: Methods for finding the range of a function in a given domain&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That was all for this week.&lt;br /&gt;
My task for the upcoming days would be to update my &lt;code class="highlighter-rouge"&gt;solve_decomposition&lt;/code&gt; method to accomodate these methods.
I aim to get all these PR merged before the midterm evaluation.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-3</guid>
      <title>Coding Period Week 3</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Wed, 08 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-3/</link>
      <description>&lt;h3 id="continue-simplified-solution-for-trigonometric-equation"&gt;Continue: Simplified solution for Trigonometric Equation:&lt;/h3&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11188"&gt;#11188&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Problems :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When I tried more testcases having sqrt and other types I found new issues on &lt;code class="highlighter-rouge"&gt;reduce_imageset&lt;/code&gt; method. Some of the Simplified
solutions contains undesired &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt; values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Changes in solveset/_solve_radical&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sometimes &lt;code class="highlighter-rouge"&gt;_solve_radical&lt;/code&gt; may get &lt;code class="highlighter-rouge"&gt;exp(I*x)&lt;/code&gt; terms and solving them we give Imageset, I added the&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;if isinstance(result, ImageSet) or any(isinstance(r, ImageSet) for r in result.args):
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;in the method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using &lt;code class="highlighter-rouge"&gt;factor_list&lt;/code&gt; in solve_trig :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are many cases we can do factor of expression and solve each factor may give us more simplified solution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I added the &lt;code class="highlighter-rouge"&gt;factor_list&lt;/code&gt; and solving each factors and union the solution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I analyzed how &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form is solved and found correct order to use &lt;code class="highlighter-rouge"&gt;factor&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;factor_list&lt;/code&gt; ,the summery
is in this &lt;a href="https://gist.github.com/Shekharrajak/17fdcd2320f572fc9fc8674823137e20"&gt;gist&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
  &lt;li&gt;I implemented the above order and shifted the &lt;code class="highlighter-rouge"&gt;reduce_imageset&lt;/code&gt; method in &lt;code class="highlighter-rouge"&gt;_union&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt;.
I created &lt;code class="highlighter-rouge"&gt;_union_simiplify&lt;/code&gt; a helper method for &lt;code class="highlighter-rouge"&gt;_union&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class="highlighter-rouge"&gt;_union_simplify&lt;/code&gt; better than my previous implementation :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Previous implementation was returning solution in simplified &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt;, although it passed the all
test-case except 2-3 cases. But these 2-3 test-cases taught me you are doing over simplification.
So now I understood that we should not simplify the &lt;code class="highlighter-rouge"&gt;ImageSet(s)&lt;/code&gt; of the one factor solution, it may get simplified
with other factor solution ImageSet(s).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simplify them if there is difference of &lt;code class="highlighter-rouge"&gt;pi&lt;/code&gt;, that means club [(2&lt;em&gt;n + 1) and (2&lt;/em&gt;n) =&amp;gt; (n&lt;em&gt;pi)] or [(2&lt;/em&gt;n* + 1)
and (2&lt;em&gt;n&lt;/em&gt;pi + 2) =&amp;gt; (n*pi)].&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So now _solve_trig uses factor_list for trig eq and then solve each factor F_i. To solve each factor F_i first do
F_i.rewrite(exp) and get this exp form factors F_ij so now the unnecessary exp will come out that dont contribute in
final solution. That&amp;#8217;s why we get simplified &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; that will be Union with previous solution. Inside the
Union =&amp;gt; _union =&amp;gt; _union_simplify checks for simplification with already present &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt;. This is the process
till last factor F_i.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meanwhile :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;After working on blog for 1 week created my own blog template powered by Jekyll. and shifted the old blog into github.
PR for the blog link update in planet: &lt;a href="https://github.com/sympy/planet-sympy/pull/42"&gt;pull/42&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I edited my old template(already hosted on &lt;a href="http://s-hacker.info"&gt;s-hacker.info&lt;/a&gt;) to make it mobile responsive. Now it works perfectly for mobile. &lt;a href="http://shekharrajak.github.io/"&gt;shekharrajak.github.io&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Found a issue in &lt;code class="highlighter-rouge"&gt;factor_list&lt;/code&gt;. &lt;a href="https://github.com/sympy/sympy/issues/11198"&gt;issues/11198&lt;/a&gt; , When I passed
&lt;code class="highlighter-rouge"&gt;f = sqrt(2)*sin(x) -1&lt;/code&gt; into &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; I got this problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To solve &lt;code class="highlighter-rouge"&gt;factor_list&lt;/code&gt; issue I opened a PR &lt;a href="https://github.com/sympy/sympy/pull/11201"&gt;pull/11201&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=291</guid>
      <title>GSoC: Week 3</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Tue, 07 Jun 2016 10:17:45 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/06/07/gsoc-week-3/</link>
      <description>&lt;p&gt;As I wrote&amp;#160;in my blog post last week, Our&amp;#160;plan was to implement numerical methods to compute values of a Holonomic function at given points and convert symbolic function/expressions. Let&amp;#8217;s look at what I implemented during this time&amp;#160;one by one.&lt;/p&gt;
&lt;p&gt;I started by working on to implement the most basic and popular &lt;code&gt;Euler's method&lt;/code&gt;&amp;#160;for numerical integration of holonomic ode&amp;#8217;s. Given a set a points in the complex plane, the algorithm computes numerical values of Holonomic function at each point using the Euler&amp;#8217;s method.&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11180"&gt;#11180&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next I moved on to write a method for converting Meijer G-function to a Holonomic Function. In the module &lt;code&gt;meijerint&lt;/code&gt;&amp;#160;we have method &lt;code&gt;meijerint._rewrite1&lt;/code&gt;&amp;#160;to convert expressions/functions to &lt;code&gt;meijerg&lt;/code&gt;&amp;#160;. Now this method can be used first to convert to &lt;code&gt;meijerg&lt;/code&gt;&amp;#160;and then converting this result finally to Holonomic Functions. I wrote methods&amp;#160;&lt;code&gt;from_meijerg&lt;/code&gt;&amp;#160;and &lt;code&gt;from_sympy&lt;/code&gt;&amp;#160;respectively for this purposes. &lt;a href="https://github.com/sympy/sympy/pull/11187"&gt;#11187&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are also familiar with the fact that &lt;code&gt;Euler's method&lt;/code&gt;&amp;#160;doesn&amp;#8217;t give much accurate results and for better accuracy one needs higher order numerical methods e.g. Runge-Kutta 4th Order method A.K.A &lt;code&gt;RK4&lt;/code&gt; method. I wrote this method and made it the default method for numerical computation. As expected, the results are much more accurate using RK4 and enough for our present purposes. &lt;a href="https://github.com/sympy/sympy/pull/11195"&gt;#11195&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am now looking for bugs inside everything implemented so far in the module, will be working on solving them and also will make things optimal wherever there is a possibility. More on what to implement next is yet to be discussed.&lt;/p&gt;
&lt;p&gt;Thank You!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/291/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/291/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=291&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Second-Week</guid>
      <title>GSoC Second Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Mon, 06 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Second-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;This week, I implemented some algorithms (&lt;code class="highlighter-rouge"&gt;gf_div&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;gf_gcd&lt;/code&gt; etc.) and apart from it I looked into the design consideration also.&lt;/p&gt;

&lt;h1 id="algorithms-implemented"&gt;Algorithms Implemented&lt;/h1&gt;

&lt;p&gt;I implemented 
- &lt;code class="highlighter-rouge"&gt;gf_div&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C+++"&gt;void GaloisFieldDict::gf_div(const GaloisFieldDict &amp;amp;o,
                         const Ptr&amp;lt;GaloisFieldDict&amp;gt; &amp;amp;quo,
                         const Ptr&amp;lt;GaloisFieldDict&amp;gt; &amp;amp;rem) const
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will change the value of &lt;code class="highlighter-rouge"&gt;quo&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;rem&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_quo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will return the quotient only. It will help when we only need quotient after dividing.
It is better than &lt;code class="highlighter-rouge"&gt;gf_div&lt;/code&gt; in terms of time complexity.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_lshift&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is efficient way to multiply a polynomial in &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; by &lt;code class="highlighter-rouge"&gt;x**n&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_rshift&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is efficient way to divide a polynomial in &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; by &lt;code class="highlighter-rouge"&gt;x**n&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;void GaloisFieldDict::gf_rshift(const integer_class n,
                            const Ptr&amp;lt;GaloisFieldDict&amp;gt; &amp;amp;quo,
                            const Ptr&amp;lt;GaloisFieldDict&amp;gt; &amp;amp;rem) const
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like gf_div, it also changes the value of &lt;code class="highlighter-rouge"&gt;quo&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;rem&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_sqr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will square the polynomial in &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_pow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It uses binary multiplication to power a polynomial in &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_monic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Changes a polynomial to its monic representation, i.e. &lt;code class="highlighter-rouge"&gt;3*x**2 + 4&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;GF(5)&lt;/code&gt; becomes &lt;code class="highlighter-rouge"&gt;x**2 + 3&lt;/code&gt;. Here leading coefficient becomes &lt;code class="highlighter-rouge"&gt;one&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;gf_gcd&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;gf_lcm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;gf_gcd&lt;/code&gt; by Euclidean Algorithm and &lt;code class="highlighter-rouge"&gt;gf_lcm&lt;/code&gt; is product of the two polys divided by their gcd in the finite field.&lt;/p&gt;

&lt;h1 id="design-change"&gt;Design Change&lt;/h1&gt;

&lt;p&gt;SymEngine&amp;#8217;s codebase for &lt;code class="highlighter-rouge"&gt;UIntPoly&lt;/code&gt; has changed, it inherits &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt;, which has two private variables, one is to store the variable and other is container. &lt;code class="highlighter-rouge"&gt;UIntPoly&lt;/code&gt; uses &lt;code class="highlighter-rouge"&gt;UIntDict&lt;/code&gt; as a container and &lt;code class="highlighter-rouge"&gt;UIntDict&lt;/code&gt; is inherited from &lt;code class="highlighter-rouge"&gt;ODictWrapper&lt;/code&gt;.
Now as &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; is just representation of polynomial so I needed something similar, so I made &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; inherit from &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt;, and made a container named &lt;code class="highlighter-rouge"&gt;GaloisFieldDict&lt;/code&gt;.
This prevented a lot of code duplicacy.
Still there is a lot of conversation going on this topic, I will better post after the final design is fixed.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/06/06/Flint-Polynomials</guid>
      <title>Flint Polynomials</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Mon, 06 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/06/06/Flint-Polynomials/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;This week has not been as interesting as the last. Most of my work this week involved wrapping Flint Polynomials, for use in SymEngine. I will discuss their internal implementation and how they were integrated to the library.&lt;/p&gt;

&lt;h3 id="flint-polynomials"&gt;Flint Polynomials&lt;/h3&gt;

&lt;p&gt;Flint&amp;#8217;s integer polynomial class is the &lt;code class="highlighter-rouge"&gt;fmpz_poly&lt;/code&gt; class. Flint, being a C library also provides a C++ wrapper for most of it&amp;#8217;s classes. In our case, it&amp;#8217;s the &lt;code class="highlighter-rouge"&gt;fmpz_polyxx&lt;/code&gt; class. As discussed last week, the arithmetic operators for the class have already been overloaded and it can be seamlessly used with the base class which is already set up.&lt;/p&gt;

&lt;p&gt;Internally, flint uses a dense representation of polynomials. What this means is that the coefficient for each degree in the polynomial are stored in a vector. This is in contrast to a sparse approach which deals stores only non-zero coefficients of a polynomial in a dictionary. Flint also uses it&amp;#8217;s own integer class as the coefficient type. Flint&amp;#8217;s integers are basically similar to GMP integers, and also follow the same naming conventions. (eg. &lt;code class="highlighter-rouge"&gt;fmpz_t&lt;/code&gt; is analogous to &lt;code class="highlighter-rouge"&gt;mpz_t&lt;/code&gt;) They have internal optimizations to make them faster for use within the flint library itself. Flint does not provide the option to use a custom integer class as the type of coefficients like Piranha does.&lt;/p&gt;

&lt;p&gt;All the work related to flint polynomials can be seen in &lt;a href="https://github.com/symengine/symengine/pull/971"&gt;#971&lt;/a&gt;. The majority of the PR concerns introducing a new class &lt;code class="highlighter-rouge"&gt;UIntPolyFlint&lt;/code&gt; and all the necessary functionality like &lt;code class="highlighter-rouge"&gt;__hash__&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;eval&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;compare&lt;/code&gt;. Test cases have also been added, to see if the polynomial manipulation is working as intended. There is some additional minor work done here apart from this class introduction.&lt;/p&gt;

&lt;p&gt;The polynomial base class now has three methods :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="n"&gt;from_container&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="n"&gt;from_vec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;These methods are, as indicated from their names, used to construct the polynomial from any of the three sources. So, for example to construct a &lt;code class="highlighter-rouge"&gt;UIntPolyFlint&lt;/code&gt;, you can :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;PolyFlint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PolyFlint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmpz_polyxx&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PolyFlint&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PolyFlint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_vec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;integer_class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PolyFlint&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PolyFlint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer_class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="integerclass-conversions"&gt;&lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt; Conversions&lt;/h3&gt;

&lt;p&gt;Another issue was that methods like &lt;code class="highlighter-rouge"&gt;eval&lt;/code&gt; must return integers of &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt;. Thus, we needed functions to convert &lt;code class="highlighter-rouge"&gt;fmpzxx&lt;/code&gt; to any of the 4 possible integer classes used by SymEngine. The 4 integers used by SymEngine are :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;1. mpz_class         The default C++ class provided by GMP
2. mpz_wrapper       SymEngine's wrapper around GMP's mpz_t
3. piranha::integer  Piranha's integer class
3. fmpz_wrapper      SymEngine's wrapper around Flint's fmpz_t
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We, might even require such conversion for Piranha polynomials. So, I generalized this and made &lt;code class="highlighter-rouge"&gt;to_integer_class()&lt;/code&gt; which takes in either &lt;code class="highlighter-rouge"&gt;flint::fmpzxx&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;piranha::integer&lt;/code&gt; and returns an &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt;. There was a small discussion on where these functions should be placed, with Isuru which was insightful. Basically, what I was doing earlier caused a considerable &lt;a href="https://github.com/symengine/symengine/pull/971#issuecomment-223743950"&gt;increase&lt;/a&gt; in compilation time, which was later corrected. An example of one such function is :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="cp"&gt;#if SYMENGINE_INTEGER_CLASS == GMP || GMPXX
#ifdef HAVE_SYMENGINE_FLINT
&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;integer_class&lt;/span&gt; &lt;span class="nf"&gt;to_integer_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;flint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmpzxx&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;integer_class&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;fmpz_get_mpz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_mpz_t&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_data&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif
#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;code class="highlighter-rouge"&gt;get_coeff()&lt;/code&gt; function was also added to the polynomial base is a much needed function for any polynomial manipulation.&lt;/p&gt;

&lt;h3 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There were some changes done to the polynomial structure before the flint polynomials were introduced. Constructor of the polynomials from vectors was removed, as it wasn&amp;#8217;t required. And a &lt;code class="highlighter-rouge"&gt;from_vec&lt;/code&gt; was added for the SymEngine polynomial dictionaries &lt;code class="highlighter-rouge"&gt;UIntDict&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;UExprDict&lt;/code&gt;. The changes can be seen here &lt;a href="https://github.com/symengine/symengine/pull/965/"&gt;#965&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Travis CI builds, SymEngine was using flint-2.4.4 from a static location. There&amp;#8217;s a &lt;a href="https://github.com/wbhart/flint2/issues/217"&gt;bug&lt;/a&gt; that I encountered using this version, which dealt with incorrect header declaration in one of the flint files. Now, we clone the flint repository from  &lt;a href="https://github.com/wbhart/flint2/"&gt;wbhart/flint2&lt;/a&gt; to use in the CI builds. The change is in &lt;a href="https://github.com/symengine/symengine/pull/973"&gt;#973&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#8217;m working on wrapping Piranha polynomials next week. After that is done, I plan to start getting higher level functionality like &lt;code class="highlighter-rouge"&gt;gcd&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;factorize&lt;/code&gt; ready.&lt;/p&gt;

&lt;p&gt;Ciao!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=336</guid>
      <title>GSoC Week 2</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sun, 05 Jun 2016 07:39:33 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/06/05/gsoc-week-2/</link>
      <description>&lt;p&gt;Hi there! It&amp;#8217;s been two weeks into the coding period, &amp;amp; I have managed to flip some bits. I had a meeting with &lt;a href="https://github.com/moorepants"&gt;Jason&lt;/a&gt; and &lt;a href="https://github.com/leosartaj"&gt;Sartaj&lt;/a&gt; on 30&lt;sup&gt;th&lt;/sup&gt; April. We were discussing on the&amp;#160;implementation of Singularity Functions. I have implemented them using the properties of Heaviside and Diracdelta&amp;#160;under eval() method. But they suggested me to return Heaviside and Diracdelta&amp;#160;directly instead of their properties&amp;#160;only.&amp;#160;This way we can reuse the functionality that has been already there in Sympy. I tried doing that,but I am having problems with the representation&amp;#160;part.&lt;/p&gt;
&lt;h5&gt;&lt;em&gt;With the former one:-&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;In [2]: SingularityFunction(x, 3, 4)
Out[2]:                          
       4      
&amp;lt;x - 3&amp;gt;&lt;/code&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;&lt;em&gt;With the latter one:-&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;In [3]: SingularityFunction(x, 3, 4)
Out[4]: 
       4 
(x - 3) &amp;#8901;Heaviside(x - 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have to figure out the representation part of Singularity Function class. If I can succeed, then we can follow the latter idea of implementation without any worry.&lt;/p&gt;
&lt;p&gt;We further discussed a bit about the integrations of Singularity Functions.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Progress of Week 2&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;The major portion of this week went into working with the printing modules. Due to which I had to switch between the targets of this week and the next week.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11139"&gt;PR 11139&lt;/a&gt;, I was finally able to figure out how to implement the pretty printing of derivatives of the DiracDelta Class similar to the one with latex printing. Hence, it got merged.&lt;/li&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178&lt;/a&gt;, I&amp;#8217;ve enabled the pretty printing and latex printing of Singularity Functions and added their tests too. The output somewhat looks like (both in pretty printing and latex printing :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;In [3]: SingularityFunction(x, 3, 4)
Out[3]:                          
       4      
&amp;lt;x - 3&amp;gt;

&lt;/code&gt;&lt;code&gt;In [4]: SingularityFunction(x, -5, 4)
Out[4]:                          
       4      
&amp;lt;x + 5&amp;gt;

&lt;/code&gt;&lt;code&gt;In [5]: SingularityFunction(x, 0, 4)
Out[6]:                          
   4      
&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;I was looking into &amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11192"&gt;PR 11192&lt;/a&gt;, it seems a great work to me. Docstrings are quite well defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;To get&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11103"&gt;PR 11103&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11137"&gt;PR 11137&lt;/a&gt;&amp;#160;merged.&lt;/li&gt;
&lt;li&gt;Integrations of Singularity Functions.&lt;/li&gt;
&lt;li&gt;Improve the Implementation of Singularity Functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for now, looking forward to week 3.&lt;/p&gt;
&lt;p&gt;Cheers. Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/336/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/336/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=336&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://github.com/kshitij10496/2016/06/04/GSoC-Week-02/</guid>
      <title>GSoC Week 02 - The One With Function Range (Part I)</title>
      <author>Kshitij Saraogi(kshitij10496)</author>
      <pubDate>Sat, 04 Jun 2016 00:00:00 GMT</pubDate>
      <link>https://github.com/kshitij10496/2016/06/04/GSoC-Week-02/</link>
      <description>&lt;p&gt;This week I worked on developing methods for computing the range of an univariate function.
For this pupose, I spent most of my time in research; reading previous discussions on mailing lists, pull requests and wikis.&lt;/p&gt;

&lt;h3 id="progress"&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Suppose, we want to solve the following equation in the variable &lt;code class="highlighter-rouge"&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;sin(x) = &amp;#960; / 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can straight away state that this equations has &lt;em&gt;no solutions&lt;/em&gt; as the range of the function &lt;code class="highlighter-rouge"&gt;sin&lt;/code&gt; is -1 to 1 &lt;br /&gt;
i.e &lt;code class="highlighter-rouge"&gt;sin(x) &amp;#8712; [-1, 1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thus, we find that the range of the function can also be used to leverage the solutions of an equation. The implementation of a function to determine the range of a function in a given domain is particularly interesting for checking whether an equation is at all solvable.&lt;/p&gt;

&lt;p&gt;In the last meeting, Amit had suggested me to read the conversation on&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/2723"&gt;PR#2723&lt;/a&gt; : Fixed imageset for Interval&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/2925"&gt;PR#2925&lt;/a&gt; : find singularities for any expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along with this, I read the following mailing lists discussions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://groups.google.com/forum/#!searchin/sympy/minimize/sympy/Na_p5pm1I7M/V6uv4ZAkp2oJ"&gt;Find minimum value of a function symbolically&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://groups.google.com/forum/#!topic/sympy/8TM8cnuzkG8"&gt;Best way to find extrema of function over interval&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://groups.google.com/forum/#!searchin/sympy/singularity/sympy/ijhl7rkHEbk/lsWTuJ2Nb8wJ"&gt;GSoC 2013 Idea - Find Domain / Range / Continuity / Singularity of a Function&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://groups.google.com/forum/#!searchin/sympy/singularity/sympy/c_fpCu9QiII/n2KaXN-z3rwJ"&gt;On a general representation for singularities and infinities&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://groups.google.com/forum/#!searchin/sympy/singularity/sympy/mJlCxuZ5uZw/peWogHzbKekJ"&gt;Functions: Singularity and Continuity&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All this research helped me appreciate the difficulty of the problem at hand. Also, my approach to solving this issue is heavily inspired from these discussions.&lt;/p&gt;

&lt;h3 id="design"&gt;&lt;strong&gt;Design&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The methodology of determining the range of a function:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Determine the points of discontinuities in the concerned domain.&lt;/li&gt;
  &lt;li&gt;Divide the entire domain into sub-domains about the above-determined singularities.&lt;/li&gt;
  &lt;li&gt;Use the &lt;a href="https://en.wikipedia.org/wiki/Derivative_test#Second_derivative_test"&gt;Derivative Test&lt;/a&gt; to locate the critical points of the function within each sub-domain.&lt;/li&gt;
  &lt;li&gt;Calcuate the corresponding values of the function at the critical points and the boundary values of the sub-domains.&lt;/li&gt;
  &lt;li&gt;The extremas of the function in the entire domain are the maximum and minimum values in all the smaller domains combined.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For now, I have thought of designing 2 functions to solve this issue:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Function to divide the domain into sub-domains.&lt;/li&gt;
  &lt;li&gt;Function to calculate the extremum values.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="git-log"&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/11141"&gt;PR#11141&lt;/a&gt; : Method for solving equations using Decomposition and Rewriting
&lt;a href="https://github.com/sympy/sympy/pull/11164"&gt;PR#11164&lt;/a&gt; : Intersection of certain ImageSets with Intervals&lt;/p&gt;

&lt;h3 id="thoughts"&gt;&lt;strong&gt;Thoughts&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;After tommorrow&amp;#8217;s meeting, I will iron out a more concrete design.
My goal for next week would be to implement the above-said functions.&lt;/p&gt;

&lt;p&gt;Looking forward to another exciting week !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=255</guid>
      <title>GSoC Week 2 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Fri, 03 Jun 2016 17:09:47 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/06/03/gsoc-week-2-progress/</link>
      <description>&lt;p&gt;Despite having a smooth flow in week 1, my luck ran over halfway through this week. It can be called quite a bumpy ride.&lt;/p&gt;
&lt;p&gt;At the start of the week it was really great, I got Complex Doubles ready with the &lt;a href="https://github.com/symengine/symengine.rb/pull/46" target="_blank"&gt;PR #46&lt;/a&gt;, along with the Real Doubles. Another quick fix for the CWrapper was covered with &lt;a href="https://github.com/symengine/symengine/pull/966" target="_blank"&gt;PR &amp;#160;#966&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the troubles began to appear with me moving into wrapping RealMPFRs. &lt;a href="http://www.mpfr.org/" target="_blank"&gt;MPFR&lt;/a&gt;&amp;#160;is a library for arbitrary precision floating point numbers. This is implemented in SymEngine as RealMPFR, and I started work on wrapping this, along with MPC for complex numbers for both C (&lt;a href="https://github.com/symengine/symengine/pull/972" target="_blank"&gt;PR #972&lt;/a&gt;) and Ruby (&lt;a href="https://github.com/symengine/symengine.rb/pull/49" target="_blank"&gt;PR #49&lt;/a&gt;). On the Ruby side, it was expected to&amp;#160;be initialized with Floats, Strings or BigDecimals.&lt;/p&gt;
&lt;p&gt;After a very bumpy ride, mainly because of me not being very much used to memory management in C, and some issues which had to be fixed along the way (&lt;a href="https://github.com/symengine/symengine/issues/974" target="_blank"&gt;Issue #974&lt;/a&gt;). Struggling with that, I somehow was able to finish the MPFR part (actually currently waiting for all the tests to run), and will be able to move on to MPC (should be easier and doable within a day, now that MPFR is already done).&lt;/p&gt;
&lt;p&gt;But that means when I start next week, I will have a backlog, which I don&amp;#8217;t like to have hovering over me. Anyway, I hope to clear the backlog and get back to track by next weekend.&lt;/p&gt;
&lt;p&gt;Have a nice weekend!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/255/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/255/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=255&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/06/03/GSoC-week-2.html</guid>
      <title>GSoC Week 2</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 03 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/06/03/GSoC-week-2.html</link>
      <description>&lt;p&gt;This week involved more research and learning than coding and as such the
results are less visible. I made some changes to the test code for models.py
under mechanics, I spend time looking through the structure and workings of
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt;, and created a
&lt;a href="https://github.com/sympy/sympy/pull/11182"&gt;PR&lt;/a&gt; to hold the EOM class
development discussion.&lt;/p&gt;

&lt;p&gt;The tests for test_models.py were timing out and so it was suggested that I
change the tests from using rhs() to testing mass matrices and force vectors. I
put these changes together and on my machine this halved the run time of the
tests. After this change was added to &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
#11168&lt;/a&gt; and the tests passed the
models.py and its test code files were merged.&lt;/p&gt;

&lt;p&gt;To learn more about how &lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; work I began by
reading through much of the documentation for the mechanics module. Included
were the pages on the two methods themselves, information on how linearization
is performed in the code and three different examples in which the two methods
are used to solve dynamics problems. As I read through the documents I
occassionally found places that could use some minor adjustments and I presented
these changes in &lt;a href="https://github.com/sympy/sympy/pull/11117"&gt;PR #11117&lt;/a&gt; which
has since been merged.&lt;/p&gt;

&lt;p&gt;In addition to reading the documentation for information, I went through the
code for each method themselves. I made note of all of the attributes,
properties and methods that each of the classes contained and compared these
between the classes. In order to compare the differences in how information was
stored in each of the classes I needed to return to the Kane&amp;#8217;s method and
Lagrange&amp;#8217;s method documentation pages. At this point Jason was able to clarify
much of my confusion regarding the different equations that the pages
contained. Jason decided this clarification would be useful to add to the pages
themselves and introduced &lt;a href="https://github.com/sympy/sympy/pull/11183"&gt;PR
#11183&lt;/a&gt;. I reviewed this PR for him
though my contribution was more along the lines of pointing out places that
might need clarification and changes that might improve the flow of the page
rather than of the content itself.&lt;/p&gt;

&lt;p&gt;Last major line of work this week was beginning the equations of motion class
itself. It was suggested by Jason that it might be useful to have the *Method
classes return a class containing the equations of motion information. I have
decided that for the moment this would be a better pursuit than creating a
parent class from which the *Methods would inherit. The *Methods classes tend to
be different in their approach to forming the equations of motion and thus I do
now currently believe that a parent class could be overly useful for multiple
*Methods. What new methods could benefit from, however, is a unified output
format as the rest of the code could be written to accept the new output rather
than specific Method classes. This would I feel would promote the addition of
new Methods more than a inherited base class would. Along this line I have
created a branch that holds the code for the new equations of motion class and
its test code. Currently the work is to transfer the pseudo-code I have into
real code.&lt;/p&gt;

&lt;p&gt;I have finished reading A Beginners Guide to 6-D Vectors (Part 2) but have made
no other progress towards Featherstone&amp;#8217;s method this week other than locating a
copy of his book.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;Next week I plan to continue working on filling out the equation of motion
class along with its test code. The next step would be to integrate this into
&lt;code class="highlighter-rouge"&gt;KanesMethod&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;LagrangesMethod&lt;/code&gt; to see what tests fail and where additional
work would be needed. Also I plan to look into Featherstone&amp;#8217;s book and the
python implementation of spatial vector algebra to see what I might need to
work on in order to implement his method in SymPy.&lt;/p&gt;

&lt;h3 id="prs-and-issues-referenced-in-post"&gt;PR&amp;#8217;s and Issues Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Merged) Pydy models migration &lt;a href="https://github.com/sympy/sympy/pull/11168"&gt;PR
  #11168&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Physics documentation &lt;a href="https://github.com/sympy/sympy/pull/11117"&gt;PR
  #11117&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Improved the explanation of the 5 equations in the Kane&amp;#8217;s Method
  docs &lt;a href="https://github.com/sympy/sympy/pull/11183"&gt;PR #11183&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) [WIP] EOMBase class development &lt;a href="https://github.com/sympy/sympy/pull/11182"&gt;PR
  #11182&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id="articlesbooks-referenced-in-post"&gt;Articles/Books Referenced in Post&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5663690"&gt;A Beginners Guide to 6-D Vectors (Part
   2)&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period_week-2</guid>
      <title>Coding Period Week 2</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Wed, 01 Jun 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period_week-2/</link>
      <description>&lt;h3 id="system-of-inequalities"&gt;System of Inequalities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Right now solve uses &lt;code class="highlighter-rouge"&gt;reduce_inequalitie&lt;/code&gt;s to solve system of equations. But it is not designed for more than one variable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ex: system = &lt;code class="highlighter-rouge"&gt;[2*x - 3*y &amp;lt;= 12, x+5*y &amp;lt;=20, x&amp;gt;0] symbols = [x,y])  &lt;/code&gt;
you will get :&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;NotImplementedError&lt;/code&gt;:&lt;br /&gt;
inequality has more than one symbol of interest&lt;br /&gt;
We know answer is &lt;code class="highlighter-rouge"&gt;[0 &amp;lt; x &amp;lt;120/13 and 2(x-6)/3 &amp;lt;= y &amp;lt;= (20-x)/5]&lt;/code&gt;&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;[x = 120/13 and y = 28/13]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt; already have project on this &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Ideas#cylindrical-algebraic-decomposition"&gt;Cylindrical algebraic decomposition&lt;/a&gt; to Provide an interface for solving systems of polynomial inequalities.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we want to feature like old &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; then just need to pass system of inequalities having one variable to solve
for one variable. After checking this use &lt;code class="highlighter-rouge"&gt;reduce_inequalitie(system, symbol)&lt;/code&gt; it will return solution. It is easy to implement.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="general-solution-for-trigonometric-equations"&gt;General solution for Trigonometric equations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11188"&gt;#11188&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Previous work in this problem : &lt;a href="https://github.com/sympy/sympy/pull/10898"&gt;#10898&lt;/a&gt;,
&lt;a href="https://github.com/sympy/sympy/pull/10713"&gt;#10713&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/10733"&gt;#10733&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problems in old method :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;_solve_trig&lt;/code&gt; changes the trig equation in &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form (it&amp;#8217;s fine). But then fraction and solving equation
for it&amp;#8217;s parts makes more number of &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt;. If we have more number of &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; then we get more number of &lt;code class="highlighter-rouge"&gt;imageset&lt;/code&gt;,
Since we &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt; for each &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; factors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It retuns &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; when it can&amp;#8217;t solve, but its expression is in ` exp&lt;code class="highlighter-rouge"&gt; form mostly with &lt;/code&gt;I` and
in complicated form.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;some times &lt;code class="highlighter-rouge"&gt;_solve_as_poly&lt;/code&gt; can solve Trig equations, but it is not using it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;New implemention :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I added &lt;code class="highlighter-rouge"&gt;reduce_imageset&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;solveset.py&lt;/code&gt; to reduce the number of union returned by &lt;code class="highlighter-rouge"&gt;_solve_trig&lt;/code&gt; method. As Harsh said it is
no specific to &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;, so I moved the method to &lt;code class="highlighter-rouge"&gt;sets/sets.py&lt;/code&gt;. I added the doctests and test-cases in &lt;code class="highlighter-rouge"&gt;test_sets.py&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now solving the &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form directly using &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;. This makes the less number of &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; in many cases.
But to solve equation having &lt;code class="highlighter-rouge"&gt;tan&lt;/code&gt; in it, will be complicated, for that I changed the &lt;code class="highlighter-rouge"&gt;solve_rational&lt;/code&gt; method,
so that it can handle  &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; with &lt;code class="highlighter-rouge"&gt;I&lt;/code&gt;. in denominator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now using &lt;code class="highlighter-rouge"&gt;_solve_as_poly&lt;/code&gt; when &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; can&amp;#8217;t solve it using &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form. If this also can&amp;#8217;t solve then retuns
the &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; having simple trig functions, which is understandable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;reduce_imageset :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;reduce_imageset&lt;/code&gt; take the &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; or Union of &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; and returns the minimum number of &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;First we extract the &lt;code class="highlighter-rouge"&gt;Lambda&lt;/code&gt; expression from the each &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; and take principle values. Separate the positive and negative principle values and sort them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;+ve and -ve values are passed into &lt;code class="highlighter-rouge"&gt;interpolate&lt;/code&gt; method defined in &lt;code class="highlighter-rouge"&gt;polys/polyfuncs.py&lt;/code&gt; to get the general function in terms
of Dummy &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If only one &lt;code class="highlighter-rouge"&gt;Imageset&lt;/code&gt; or value in +ve or -ve value list then return that as it is. Here we need to note that Dummy &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt; defined here
is different then original lambda expression, so need to return original &lt;code class="highlighter-rouge"&gt;imageset&lt;/code&gt;. So I am storing original &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; in dict with
its principle vales.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If more than one +ve/-ve values are there then interpolate expression will be &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; expression and return.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here I separe the -ve and +ve values because interpolate returns complicated expressions if we both types of values.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also I sorted the +ve and -ve list, to get simplified expression from interpolate.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problems :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In this PR &lt;code class="highlighter-rouge"&gt;solveset_real(tan(x), x)&lt;/code&gt; returns &lt;code class="highlighter-rouge"&gt;imageset(Lambda(n, pi*(n - 1)), S.Integers)&lt;/code&gt;
but I want &lt;code class="highlighter-rouge"&gt;imageset(Lambda(n, n*pi), S.Integers)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Issues :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Meanwhile I found a issue in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;. &lt;a href="https://github.com/sympy/sympy/issues/11194"&gt;issues/11194&lt;/a&gt;.
&lt;code class="highlighter-rouge"&gt;2*sin(x) - 2*sqrt(3)*cos(x) - sqrt(3)*tan(x) +3 = 0&lt;/code&gt; can be easily solved if we factorize it correctly. But I haven&amp;#8217;t found
a good way to get its factor. I tried &lt;code class="highlighter-rouge"&gt;factor&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;expand(Trig + True)&lt;/code&gt; , &lt;code class="highlighter-rouge"&gt;expand_trig&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;rewrite(sin)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=201</guid>
      <title>GSoC: Week 2 Begins</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Mon, 30 May 2016 16:00:08 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/05/30/gsoc-week-2-begins/</link>
      <description>&lt;p&gt;First, I am going to&amp;#160;talk about what has been done since last week. I implemented methods to find a recurrence relation in the coefficients of Power series expansion of a Holonomic Function, and then method to find the Power series.&lt;/p&gt;
&lt;p&gt;One of the many interesting properties of Holonomic Functions is that the coefficients in Power series expansion of a Holonomic function is a Holonomic sequence, i.e. these coefficients satisfy a recurrence relation having polynomial coefficients.&lt;/p&gt;
&lt;p&gt;This recurrence relation can be used to efficiently calculate the coefficients of Power series. The PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11153" target="_blank"&gt;11153&lt;/a&gt;&amp;#160;had these methods and got merged today. Here are a couple of examples of the implementation.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In []: p = HolonomicFunction(Dx &amp;#8211; 1, x, 0, [1]) &amp;#160;# exp(x)&lt;br /&gt;
In []: p.to_sequence()&lt;/p&gt;
&lt;p&gt;Out []:&amp;#160;HolonomicSequence((-1) + (n + 1)Sn, n), u(0) = 1&lt;/p&gt;
&lt;p&gt;In []: p.series()&lt;/p&gt;
&lt;p&gt;Out []:&amp;#160;1 + x + x**2/2 + x**3/6 + x**4/24 + x**5/120 + O(x**6)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For this week it is planned first to implement a method to numerically integrate differential equations of holonomic type from any point &lt;code&gt;x=a&lt;/code&gt;&amp;#160;to &lt;code&gt;x=b&lt;/code&gt;&amp;#160;in the complex plane. The next thing to implement after this&amp;#160;would probably be converting symbolic functions/expressions to Holonomic Functions.&lt;/p&gt;
&lt;p&gt;Cheers and Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/201/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/201/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=201&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=261</guid>
      <title>GSoC Week 1</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Mon, 30 May 2016 14:18:39 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/05/30/gsoc-week-1/</link>
      <description>&lt;p&gt;The First week of the coding period has come to an end, I had a meeting with Jason and Sartaj, my mentors, on 22nd of May. I was going to start working on the Singularity Functions class, so we had a discussion on how to proceed. We exchanged our thoughts on removing the is_real check for the arguments passed through the rewrite(Piecewise) method. We also discussed how we can let the pretty printer prints the derivatives of DiracDelta class. They suggested me to review some Pull Requests of other members in order to encourage them, interact with other community members &amp;#160;and learn. The meeting was quite interesting. We ended up discussing many new things that we can implement.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Progress of Week 1&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11139"&gt;PR 11139&lt;/a&gt;, I was trying to figure out how to pretty print the derivative of DiracDelta class as:-&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;In [1]: DiracDelta(y, 3)
Out[1]:
 (3)
&amp;#948;   (y)&lt;/pre&gt;
&lt;p&gt;Jason helped me to figure out the&amp;#160;way. I will try to complete the implementation part by the middle of the next week.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178&lt;/a&gt;, I have started working on the Singularity Functions class. Sartaj suggested me to keep the implementation of pretty printing part for later. Till now I have defined eval(), fdiff(), rewrite(Piecewise) only.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;In [2]: SingularityFunction(x, a, n)
Out[2]: &lt;/code&gt;&lt;code&gt;SingularityFunction(x, a, n)

&lt;/code&gt;&lt;code&gt;In [3]: SingularityFunction(y, &lt;span class="pl-c1"&gt;6&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;).diff(y)
Out[3]: &lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-k"&gt;*&lt;/span&gt;SingularityFunction(y, &lt;span class="pl-c1"&gt;6&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;)

In [4]: SingularityFunction(x, &lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;5&lt;/span&gt;).rewrite(Piecewise)
Out[4]: Piecewise(((x &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;)&lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-c1"&gt;5&lt;/span&gt;, x &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;), (&lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;True&lt;/span&gt;))

&lt;/code&gt;&lt;code&gt;In [5]: SingularityFunction(x, 3, 2).subs(x, 6)
Out[5]: 9&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;I was reviewing&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11065" target="_blank"&gt;PR 11065&lt;/a&gt;&amp;#160;and have suggested some modifications. The idea of having an another argument for defining the value of Heaviside(0) is great. But at the same time, we can not allow that argument to pass values other than 1 and 1/2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Implementation of a&amp;#160;method to integrate Singularity Functions.&lt;/li&gt;
&lt;li&gt;Adding the&amp;#160;pretty printing of the derivatives of DiracDelta.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward toward an another great week. Cheers!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/261/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/261/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=261&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=232</guid>
      <title>GSoC Week 1 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sun, 29 May 2016 08:14:24 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/05/29/gsoc-week-1-progress/</link>
      <description>&lt;p&gt;The GSoC coding period started earlier this week. I have been coding for 6 days untils now, and am taking a break on Sunday!&lt;/p&gt;
&lt;p&gt;For this week, according to&amp;#160;GSoC proposal I started with wrapping the Complex Numbers class into Ruby. This week and the next are supposed to be for Complex numbers and Doubles.&lt;/p&gt;
&lt;p&gt;Straight from my proposal :&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Complex Numbers in the SymEngine can be of three different types.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex Double&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex Int&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Complex mpc&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Apart from wrapping these three different types into Ruby, this part will also include converting between the SymEngine Complex types and the &lt;/span&gt;&lt;a href="http://ruby-doc.org/core-1.9.3/Complex.html"&gt;&lt;span style="font-weight: 400;"&gt;Ruby Complex types&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Like wise, for floating point representation there are two types:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Real Double&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Real mpfr&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;These classes will be wrapped during this week of the project, as well as converting between these types and Ruby&amp;#8217;s Float and BigDecimal data types.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The Complex Numbers (excluding Complex Double and &amp;#160;Complex mpc) was wrapped successfully with &lt;a href="https://github.com/symengine/symengine.rb/pull/39" target="_blank"&gt;PR #39&lt;/a&gt;, while also fixing a couple of issues (&lt;a href="https://github.com/symengine/symengine.rb/issues/19" target="_blank"&gt;Issue #19&lt;/a&gt; and &lt;a href="https://github.com/symengine/symengine.rb/issues/21" target="_blank"&gt;Issue #21&lt;/a&gt;). Interestingly, the Ruby Spec was updated by @zverok during this week and I had the opportunity to learn a lot about Specs as I had to re-write the specs in the new style.&lt;/p&gt;
&lt;p&gt;On the other side, in the symengine/symengine repo, the CWrappers were updated to accommodate both Complex and Double numbers and successfully merged with &lt;a href="https://github.com/symengine/symengine/pull/954" target="_blank"&gt;PR #954&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The work on Doubles and Complex Doubles have already started in &lt;a href="https://github.com/symengine/symengine/pull/954" target="_blank"&gt;PR #46&lt;/a&gt;, and is almost completed. This should be ready to merge by mid next week, and by the end of next week I am hoping to complete mpc and mpfr for Complex and Doubles, and move on to the actual 3rd week work. Being ahead of the schedule is always great as it reduces pressure on my self!&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/232/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/232/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=232&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://github.com/kshitij10496/2016/05/29/GSoC-Week-01/</guid>
      <title>GSoC Week 01 - The One with Intersections</title>
      <author>Kshitij Saraogi(kshitij10496)</author>
      <pubDate>Sun, 29 May 2016 00:00:00 GMT</pubDate>
      <link>https://github.com/kshitij10496/2016/05/29/GSoC-Week-01/</link>
      <description>&lt;p&gt;Hi there !&lt;/p&gt;

&lt;p&gt;The first of Coding Period in this year&amp;#8217;s GSoC is over.
This past week I worked on developing &lt;code class="highlighter-rouge"&gt;solve_decomposition&lt;/code&gt; - the method for solving equation by the principles of &lt;a href="http://kshitij10496.github.io/2016/05/22/Solving-equations-via-Decomposition-and-Rewriting/"&gt;Decomposition and Rewriting&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="progress"&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;While implementing the method, I came across two operations that needed to be developed before proceeding further:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Intersection of Null &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; wth an &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Intersection of &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; with &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before going into the details, lets have an understanding of the objects we will be working with.&lt;/p&gt;

&lt;h4 id="range"&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; object represents a range of integers. &lt;br /&gt;
It inherits from the SymPy &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; class.&lt;br /&gt;
This implies that the set operations can be carried out on &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; objects as well.&lt;/p&gt;

&lt;p&gt;For instance,&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# represents the first 5 natural numbers&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hence, a null &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; object represents an empty list of numbers.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# definition of a null Range  &lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id="interval"&gt;&lt;strong&gt;Interval&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;An &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; object represents a real valued interval as a &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt;.&lt;br /&gt;
All the values within the boundary values are &lt;code class="highlighter-rouge"&gt;contained&lt;/code&gt; in this object.&lt;br /&gt;
Some special sets such as &lt;code class="highlighter-rouge"&gt;Reals&lt;/code&gt; are inherit from &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; objects.&lt;br /&gt;
Both - open and closed intervals are supported.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# represents the interval between 0 and 1&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id="imageset"&gt;&lt;strong&gt;ImageSet&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Suppose you want to the values of x which satisfy the equation : &lt;code class="highlighter-rouge"&gt;sin(x) = 0&lt;/code&gt;.&lt;br /&gt;
We know that the solution of this equation is given by: &lt;code class="highlighter-rouge"&gt;x = n&amp;#8901;&amp;#960; , n &amp;#8714; &amp;#8484;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to represent this set expression in SymPy, we have &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt;.&lt;br /&gt;
An &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; object represents an image of a set under a mathematical function.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#8901;&amp;#960;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="err"&gt;&amp;#8714;&lt;/span&gt; &lt;span class="err"&gt;&amp;#8484;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Now that we have some knowledge about these 3 &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; objects, let us now discuss the issues in turn:&lt;/p&gt;

&lt;h3 id="intersection-of-null-range-wth-an-interval"&gt;&lt;strong&gt;Intersection of Null &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; wth an &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;With the information at hand, we can distinctly state that the result of intersection of a null &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; with an real-valued &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt; should be an &lt;code class="highlighter-rouge"&gt;EmptySet&lt;/code&gt;.&lt;br /&gt;
Currently, a &lt;code class="highlighter-rouge"&gt;NotImplementedError&lt;/code&gt; is raised.&lt;/p&gt;

&lt;h4 id="current-implementation"&gt;&lt;em&gt;Current Implementation&lt;/em&gt;&lt;/h4&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In []: Intersection(Range(0), Interval(0, 10))
# results in a NotImplementedError
In []: Intersection(S.Integers, Interval(0.2, 0.8))
# results in a NotImplementedError
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After adding a base-case (via &lt;code class="highlighter-rouge"&gt;if-else&lt;/code&gt; clause) for checking a null &lt;code class="highlighter-rouge"&gt;Range&lt;/code&gt; object in the &lt;code class="highlighter-rouge"&gt;_intersect&lt;/code&gt; method, this issue was solved.&lt;/p&gt;

&lt;h4 id="new-implementation"&gt;&lt;em&gt;New Implementation&lt;/em&gt;&lt;/h4&gt;
&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In []: Intersection(Range(0), FiniteSet(0, 10))
Out[]: EmptySet()

In []: Intersection(S.Integers, Interval(0.2, 0.8))
Out[]: EmptySet()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I added few tests to highlight this fact and pushed the code. &lt;br /&gt;
This PR was merged really quickly, thanks to Aaron.&lt;/p&gt;

&lt;h3 id="intersection-of-imageset-with-interval"&gt;&lt;strong&gt;Intersection of &lt;code class="highlighter-rouge"&gt;ImageSet&lt;/code&gt; with &lt;code class="highlighter-rouge"&gt;Interval&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Suppose we are interested in the values of &lt;code class="highlighter-rouge"&gt;n&amp;#8901;&amp;#960;&lt;/code&gt; within an interval range, say -10 to 10.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We expect our system to reflect this behaviour.
Hence, we expect something like the following interface:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, we currently return an unevaluated &lt;code class="highlighter-rouge"&gt;Intersection&lt;/code&gt; object.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Intersection&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Integers&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In order to develop this intersection, I used the methodology described &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Solvers-Progress#meeting-03"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We try to contract the interval so as to simplify the problem and reduce it to the following type :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_set&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_interval&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Following this, we return the result of intersection of &lt;code class="highlighter-rouge"&gt;f&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;g&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As we can notice, this method is limited to the case where the expression is linear in the variable &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt;.&lt;br /&gt;
We cannot use this method to determine the intersection of the following:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;Intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;# not possible now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have worked on this method intensively for the last 3-4 days.&lt;br /&gt;
There were several edge-cases that needed to be handled cautiously( handling complex values).
The PR is up for review and I am hopeful it will get merged in the next week.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="git-log"&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/11149"&gt;PR #11149&lt;/a&gt; : Intersection of null Range and an Interval returns EmptySet&lt;br /&gt;
&lt;a href="https://github.com/sympy/sympy/pull/11164"&gt;PR #11164&lt;/a&gt; : Intersection of certain ImageSets with Intervals&lt;/p&gt;

&lt;p&gt;In the next week, I will try to design a method to determine the range of a function in the given domain.&lt;br /&gt;
This will require some digging up and a bit of research.&lt;/p&gt;

&lt;p&gt;Looking forward to it !&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/05/29/Wrap-a-Lot</guid>
      <title>Wrap a lot</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sun, 29 May 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/05/29/Wrap-a-Lot/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;As I pointed out in last week&amp;#8217;s post, I have begun my work on the wrapping aspects of my project. The final aim of wrapping the polynomial class is to provide users with the option of using specialized polynomial libraries like Flint and Piranha.&lt;/p&gt;

&lt;p&gt;Right at the beginning of the project, I was lacking the basic idea of how the wrapping will work. Mostly I was confused by the fact that we have to right common code for all the libraries (SymEngine, Flint &amp;amp; Piranha) with the problem being, each of the these libraries have different internal representation and methods. By the end of the week, thanks to Isuru, I have much more understanding of the desired structure of the code. Here&amp;#8217;s a short summary on how it will work.&lt;/p&gt;

&lt;h3 id="polynomial-base"&gt;Polynomial Base&lt;/h3&gt;
&lt;p&gt;There will be four end (derived) classes. &lt;code class="highlighter-rouge"&gt;UIntPoly&lt;/code&gt; &amp;amp; &lt;code class="highlighter-rouge"&gt;UExprPoly&lt;/code&gt; (the SymEngine) polynomials, &lt;code class="highlighter-rouge"&gt;UIntPolyFlint&lt;/code&gt; and also &lt;code class="highlighter-rouge"&gt;UIntPolyPiranha&lt;/code&gt;. Each of these classes derive from the base class called &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt;. Now the base class must have methods and members which can be used commonly by each of the derived classes. Thus, the base class should have two members, the &lt;code class="highlighter-rouge"&gt;var&lt;/code&gt; which depicts the variable of the polynomial and a &lt;code class="highlighter-rouge"&gt;container&lt;/code&gt; which contains the data about the polynomial (basically the coefficients corresponding to each degree).&lt;/p&gt;

&lt;p&gt;This is skeleton of how the classes should look like :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UPolyBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;Symbol&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="n"&gt;Container&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the derived polynomials
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyPiranha&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;piranha&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;polynomail&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntPolyFlint&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UPolyBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;flint&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmpz_polyxx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="symengines-container"&gt;SymEngine&amp;#8217;s Container&lt;/h3&gt;

&lt;p&gt;The containers of the Flint and Piranha will be discussed in detail in the upcoming weeks. We now had to think about what the container must be for SymEngine. Also we have to merge as much functionality as possible. I saw that both the external libraries had operators overloaded for addition, subtraction, multiplication and division. So, methods like &lt;code class="highlighter-rouge"&gt;add_poly&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;sub_poly&lt;/code&gt; etc. could be made common in the base class itself if I implemented a container for holding SymEngine polynomials which also has it&amp;#8217;s operators overloaded.&lt;/p&gt;

&lt;p&gt;I was not familiar with the symbolic side of the polynomials, and found out that a container had already been made for &lt;code class="highlighter-rouge"&gt;UExprPoly&lt;/code&gt; called &lt;code class="highlighter-rouge"&gt;UExprDict&lt;/code&gt;. The class was nothing but a wrapper around &lt;code class="highlighter-rouge"&gt;map&amp;lt;int, Expression&amp;gt;&lt;/code&gt;. It had overloaded methods for addition, subtraction etc. So, technically this dictionary was storing all the information about the polynomials. I just had to create another similar wrapper for &lt;code class="highlighter-rouge"&gt;map&amp;lt;uint, integer_class&amp;gt;&lt;/code&gt; for the integer counterpart of the polynomial class. This resulted in &lt;a href="https://github.com/symengine/symengine/pull/946"&gt;#946&lt;/a&gt; and Isuru mentioned that most of the code for both these dictionary wrappers is about the same! So, I decided to make a base class for polynomial dictionary wrappers and both of these can inherit from that. Any different implementations (like &lt;code class="highlighter-rouge"&gt;*=&lt;/code&gt;) can be overridden in the derived class if needed.&lt;/p&gt;

&lt;p&gt;The ordered map base looks like :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ODictWrapper&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;friend&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ODictWrapper&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the derived wrappers
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UIntDict&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ODictWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;integer_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIntDict&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UExprDict&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ODictWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UExprDict&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="finishing-the-class"&gt;Finishing the class&lt;/h3&gt;

&lt;p&gt;After the containers for SymEngine were complete, I started implementing the polynomial base class, from which the two current polynomial classes will inherit. The class turned out to be very similar to the prototype described above. Accessor methods were added and basic polynomial functions were added &lt;a href="https://github.com/symengine/symengine/pull/951"&gt;#951&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All we have to do now for functions like &lt;code class="highlighter-rouge"&gt;add_poly&lt;/code&gt; is use the overloaded operators on the containers. Also, template argument deduction will automatically allow us to call the functions directly on two same polynomial types.&lt;/p&gt;

&lt;p&gt;An example of a common template function for addition :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;RCP&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;add_upoly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_poly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_poly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_var&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and how easily it can be used :&lt;/p&gt;

&lt;div class="language-c++ highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uint_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;   &lt;span class="c1"&gt;// 2*x + 1
&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uint_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;            &lt;span class="c1"&gt;// 2*x**2
&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;add_upoly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="miscellaneous-work"&gt;Miscellaneous Work&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The names of the classes I refer to here are the new names. The old names were a little unintuitive, so decided to change them, along with introducing a new subfolder in the repository to hold all code related to polynomials (and their tests). Some code was also shifted to places more apt, all changes can be seen here &lt;a href="https://github.com/symengine/symengine/pull/960"&gt;#960&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are a small number of miscellaneous changes that need to be worked out in the overall structure, here they are &lt;a href="https://github.com/symengine/symengine/pull/962"&gt;#962&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More on this and Flint next week! Goodbye!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC Week 1</guid>
      <title>GSoC Week 1</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sat, 28 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc_week_1.html</link>
      <description>&lt;p&gt;
Hi everyone.
&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;
Here is a brief summary of what we have been doing for the first week of GSoC.
&lt;/p&gt;
&lt;p&gt;
In last week we opened the &lt;a href="https://github.com/sympy/sympy/pull/11140"&gt;PR #11140&lt;/a&gt; for working on implementing the Finitely Presented Groups and Coset Enumeration. Implementing the Coset Enumeration first understanding how the routine mentioned in [1] interact with each other. Since The different routines being: &lt;code&gt;define&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;coincidence&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;rep&lt;/code&gt;. Most of these methods have different versions as well, which can be made to be suitable for a particular class of groups.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;Coset Table&lt;/code&gt;: We represented it using list of lists data structure, inner lists are of fixed length, twice the number of generators, the outer list can grow as much as needed. We started with writing code for the &lt;code&gt;define&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt; routines. There was one typo in [1] for &lt;code&gt;scan&lt;/code&gt; routine, which I somehow intuitively passed initially while writing code from pseudo-code, but came across it when reading the pseudo-code again. (I didn't expected the book to contain such a type in pseudo-code). Intially we started with &lt;code&gt;-1&lt;/code&gt; as an entry for undefined slots but since &lt;code&gt;-1&lt;/code&gt; may lead to problems as Python will accept it as an index with no error indications, allowing the bugs to pass silently. So we chose &lt;code&gt;None&lt;/code&gt; as a better option to opt for.
&lt;/p&gt;
&lt;p&gt;
We wanted to make sure, these implemeted methods work as expected, so I wrote extensive tests (currently in doctests), 4 of which have been taken from [1] while one from the original Todd Coxeter paper [2].
&lt;/p&gt;
&lt;p&gt;
Just yesterday we decided to make &lt;code&gt;Coset Table&lt;/code&gt; a &lt;code&gt;class&lt;/code&gt;, since every &lt;code&gt;Coset Table&lt;/code&gt; in itself has certain attributes which are changed along the execution of the Enumeration, which can be better represented by a &lt;code&gt;class&lt;/code&gt;. It's struture is be something like&lt;br /&gt;&lt;br /&gt;
&lt;code&gt;
&lt;pre&gt;
class CosetTable(list):
    def __init__(self, fp_grp, subgroup):
        self.fp_group = fp_grp
        self.subgroup = subgroup
        self._A = list(chain.from_iterable((gen, gen**-1)
                  for gen in self.fp_group.generators))
        self.append([None]*len(self.A))

    @property
    def is_complete(self):
        for coset in self:
            for res in coset:
                if res is None:
                    return False
        return True

    # other methods
&lt;/pre&gt;
&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
On the other side we are working on &lt;a href="https://github.com/sympy/sympy/pull/11150"&gt;PR#11150&lt;/a&gt;, which deals with implementation of &lt;code&gt;FreeAbelianGroup&lt;/code&gt;, it wouldn't be tough to get along with this PR, since it is just similar to the previously implemented &lt;code&gt;FreeGroup&lt;/code&gt;, with &lt;code&gt;dict&lt;/code&gt; as its data structure.
&lt;/p&gt;
&lt;p&gt;
&lt;h4&gt;For next week&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Complete the &lt;code&gt;Coset Table&lt;/code&gt; PR, i.e implement the different strategies of Felsch, HLT. I am pretty sure, this task would take more than 1 week, since there are whole lot of other strategies which if we decide to implement would take up a lot of time, even the &lt;code&gt;Lookahead&lt;/code&gt; version of Todd Coxeter is there, which specifies a whole new data-structure for different compoents involved in Enumeration.&lt;/li&gt;
    &lt;li&gt;Later, implement different methods for &lt;code&gt;FpGroup&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Anyway, I'm really enthusiastic about my project and hope that we'll have some nice and reasonably fast algorithms in CGT by the end of the summer!
&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;i&gt;
&lt;ul&gt;
  &lt;li&gt;1. Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O'Brien, "Handbook of computational group theory";, Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-5848-372-3 .&lt;/li&gt;
  &lt;li&gt;2. A practical method for enumerating cosets of a finite abstract group by J. A. TODD (University of Manchester), and H.S.M. Coxeter (University of Cambridge)&lt;/li&gt;
&lt;/i&gt;
&lt;br /&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/article&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
