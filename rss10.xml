<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=122</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): Everything about SymPy&#x2019;s Column module</title>
      <pubDate>Thu, 28 Nov 2019 19:56:42 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/11/29/everything-about-sympys-column-module/</link>
      <description>&lt;p&gt;The Column class implemented in &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt; enables the
continuum mechanics module of SymPy to deal with column buckling related
calculations. The Column module can calculate the moment equation, deflection
equation, slope equation and the critical load for a column defined by a user.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Example use-case of Column class:&lt;/strong&gt;&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.column import Column
&amp;gt;&amp;gt;&amp;gt; from sympy import Symbol, symbols
&amp;gt;&amp;gt;&amp;gt; E, I, P = symbols('E, I, P', positive=True)
&amp;gt;&amp;gt;&amp;gt; c = Column(3, E, I, 78000, top="pinned", bottom="pinned")
&amp;gt;&amp;gt;&amp;gt; c.end_conditions
{'bottom': 'pinned', 'top': 'pinned'}
&amp;gt;&amp;gt;&amp;gt; c.boundary_conditions
{'deflection': [(0, 0), (3, 0)], 'slope': [(0, 0)]}
&amp;gt;&amp;gt;&amp;gt; c.moment()
78000*y(x)
&amp;gt;&amp;gt;&amp;gt; c.solve_slope_deflection()
&amp;gt;&amp;gt;&amp;gt; c.deflection()
C1*sin(20*sqrt(195)*x/(sqrt(E)*sqrt(I)))
&amp;gt;&amp;gt;&amp;gt; c.slope()
20*sqrt(195)*C1*cos(20*sqrt(195)*x/(sqrt(E)*sqrt(I)))/(sqrt(E)*sqrt(I))
&amp;gt;&amp;gt;&amp;gt; c.critical_load()
pi**2*E*I/9
&lt;/pre&gt;



&lt;h1&gt;&lt;strong&gt;The Column class&lt;/strong&gt;&lt;/h1&gt;



&lt;p&gt;The Column class is non-mutable,&lt;span id="more-122"&gt;&lt;/span&gt; which means unlike the Beam class, a user cannot change the attributes of the class once they are defined along with the object definition. Therefore to change the attribute values one will have to define a new object.&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;Reasons for creating a non-mutable class&lt;/strong&gt;&lt;/h3&gt;



&lt;ul&gt;&lt;li&gt; From a backward-compatibility perspective, it is always possible to  adopt a different plan and add mutability later but not the other way  around. &lt;/li&gt;&lt;li&gt;Most things are immutable in SymPy which is useful for caching etc. Matrix is an example where allowing mutability has lead to many problems that are now impossible to fix without breaking backwards compatibility.&lt;/li&gt;&lt;/ul&gt;



&lt;h2&gt;&lt;strong&gt;Working of the column class:&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;
The &lt;strong&gt;governing equation&lt;/strong&gt; for column buckling is:&lt;/p&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/qfv6QbVnotFKUPebBoLgBNPjNz5uhN6g2-mbfBzDTR13Cb5z4BkAM7RHGerTtvqEzMzjQFL8r44iYeIVTm0OpYX6f0QWn2rCuz1qxKNVnvM6LHnTX9mfJ9pyBzPmBaFGZPrdiy-p" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;If we determine the the &lt;strong&gt;moment equation&lt;/strong&gt; of the column ,on which the buckling load is applied, and place it in the above equation,  we might be able to get the deflection by further solving the differential equation for &lt;strong&gt;y&lt;/strong&gt;. &lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Step-1: To determine the internal moment.&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;This is simply done by assuming deflection at any arbitrary cross section at a distance&lt;strong&gt; x&lt;/strong&gt; from the bottom as &lt;strong&gt;y &lt;/strong&gt;and then multiplying this by the load &lt;strong&gt;P&lt;/strong&gt; and for eccentric load another moment of magnitude &lt;strong&gt;P*e&lt;/strong&gt; is added to the moment.&lt;/p&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-129" src="https://ishanaj.files.wordpress.com/2019/11/image-2.png?w=641" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Simple load&lt;/strong&gt; &lt;strong&gt;is given by&lt;/strong&gt;:&amp;#160;&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/mY4nhR2YWfTEITzlL8LFRGnPq2KXPcwbyAGajOWtTkMEBYtTKGya0n4r62RolTLImOGjXazs0RqAjOyAy3K94vrM4G_xZxRKV-GBdG2uULX9qap7xPsgI6ahIY4-tXbx1zYH2LNR" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Eccentric load is given by:&amp;#160;&lt;/strong&gt;&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/vIfQDO151xRZO2hcDi9pSPeyafqlYmTUBnr_zszHjiZiv07cOA6xnuu__5EslONxpPtQFY5RaUGLXefgY0AtHip6Y6LgANv3XZ1uo790QctxO-Q5qTledCkiTuKzmpaMzJ5LBt-e" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Step-2: &lt;/strong&gt;This moment can then be substituted in the governing equation and the resulting differential equation can be solved using SymPy&amp;#8217;s &lt;strong&gt;dsolve()&lt;/strong&gt; for the &lt;strong&gt;deflection y&lt;/strong&gt;.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Applying different end-conditions&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;The above steps considers a simple example of a column pinned at both of its ends. But the end-condition of the column can vary, which will cause the moment equation to to vary.&lt;/p&gt;



&lt;p&gt;Currently &lt;strong&gt;four&lt;/strong&gt; basic supports are implemented:&amp;#160; Pinned-pinned, fixed-fixed, fixed-pinned, one pinned-other free.&lt;/p&gt;



&lt;p&gt;Depending on the supports the moment due to applied load would change as:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Pinned-Pinned:&lt;/strong&gt;&amp;nbsp; no change in moment&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/1rNjrJP3SC6q80sWh9m5-EAj80_YLYSmCECNYMqGh0n24r7EAqP5D8b-joCrvjhV0pnoQeD5EWrcStUufFj8zgHGSIMkk-lrnRPfkxYIJP42RIzh6pCNxthuEP83wWDdhAAZ8I30" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter is-resized"&gt;&lt;img alt="" height="218" src="https://lh4.googleusercontent.com/ki5Fbllhkj2xCcEJiRQxPyuTDlJnQGPfjcvk2GNjnJq5tNd83--zKWRKMck4v9TRx7SINESjNxcmdsXaXh6Le1-fBp8pQLY7pVTy-H_o895Ts_813cFmjlQDfbp34i3RJ3Qvb9RR" width="217" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Fixed-fixed&lt;/strong&gt;: reaction moment M is included&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/76IEGW9i83Am9oy_YQC7xm2BVGnEw_BcgM_bQxUgnVdWY4hBpgIIbhE4bG0C8FLpNYpajyoi7F_z8g4uVLfEZOfjv3dQBQ9fvLnIFVZUJvsIaleRSUVA7B1vrQsBj5FY3Ln3H6sx" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/8jXG4tyFMgAzJOanpHqj-d_f37-OkFrntfuhulynED1JjhNT6h_UkHmcAtDyN3Rem95uYIoKuhHUkslItdgIictxZC8dS_6mA9xbW-YxcDgMtyJ-L46UExUNH8VR8octca5v7RWa" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Fixed-pinned:&lt;/strong&gt;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/zphyPG-BZaoTYFrhY1NVWVza7oBX85d-K3HIDXF02bpcG_3gMsA8zMD-T6UO1X7GX4ssJYeok9IFCILq18GZMDkztjLdA_IA_Otq-qSM30Us22gwqPjPwPnhubYPG3jwtwzq0yML" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;Here &lt;strong&gt;M&lt;/strong&gt; is the restraint moment at &lt;strong&gt;B (&lt;/strong&gt;which is fixed&lt;strong&gt;). &lt;/strong&gt;To counter this, another moment is considered by applying a horizontal force &lt;strong&gt;F&lt;/strong&gt; at point A.&lt;/p&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/2Wlvbp1qFbq2p9uf057TCNM7StusOl0J5VAFU-qMQ0BhKTDDdtvP_l-tPgSkC9vmmsAaJd3QR8sEddl_z4LsAqo5FBKEvQNVF6eEssYdex61ENPUb4qWf6nFV7OkZV1Hy5ftDCdJ" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;One pinned- other free:&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/8vG470fp-wb2CzGMHfR5_chDnr4SqLGM0pAaRXXLSiDklpxXlcCoVOAh8q4dc97ZjWF3GM5-HvPGO1RzRhevUpDxl-cM6pHhztiTxJY-P7Ft04bfciVYK-FnzYJTZr4TvNqqX_wJ" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;div class="wp-block-image"&gt;&lt;figure class="aligncenter"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/eoHyQWUNWNOTFDsofRof215piNvdk9OqETpA4YQWRlp904vpTx69eKRxW12NdAHGxTBNRs63oyP87cMT36DE5judlZWoVeh_7zpP7Vxq5MZ_RkUieecAZGgxSm8Hj5RpKrZIk87g" /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;h2&gt; &lt;strong&gt;Solving for slope and critical load&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;Once we get the deflection equation we can solve for the slope by differentiating the deflection equation with respect to &lt;strong&gt;x&lt;/strong&gt;. This is done by SymPy&amp;#8217;s &lt;strong&gt;diff()&lt;/strong&gt; function&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
self._slope = self._deflection.diff(x)
&lt;/pre&gt;



&lt;h2&gt;&lt;strong&gt;Critical load&lt;/strong&gt;&lt;/h2&gt;



&lt;p&gt;Critical load for single bow buckling condition can be easily determined by the substituting the boundary conditions in the deflection equation and solving it for &lt;strong&gt;P&lt;/strong&gt; i.e the load.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Even if the user provides the applied load, during the entire calculation, we consider the  load to be &lt;strong&gt;P&lt;/strong&gt;. Whenever the &lt;strong&gt;moment()&lt;/strong&gt;, &lt;strong&gt;slope(), deflection(),&lt;/strong&gt; &lt;strong&gt;etc&lt;/strong&gt;. methods are called the variable &lt;strong&gt;P &lt;/strong&gt;is replaced with the users value. This is done so that it is easier for us to calculate the critical load in the end.&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
defl_eqs = []
# taking last two bounndary conditions which are actually
# the initial boundary conditions.
for point, value in self._boundary_conditions['deflection'][-2:]:
    defl_eqs.append(self._deflection.subs(x, point) - value)

# C1, C2 already solved, solve for P
self._critical_load = solve(defl_eqs, P, dict=True)[0][P]
&lt;/pre&gt;



&lt;p&gt;The case of the pinned-pinned end condition is a bit tricky.  On solving the differential equation via &lt;strong&gt;dsolve()&lt;/strong&gt;, the deflection comes out to be zero. This problem has been described in &lt;a href="https://ishanaj.wordpress.com/2019/07/08/gsoc19-week-6-completing-the-column-class/#more-56"&gt;this&lt;/a&gt; blog. Its calculation is handled a bit differently in the &lt;a href="https://github.com/sympy/sympy/pull/17122/files#diff-00c8ee080a295764f42be4b0e448935dR225"&gt;code&lt;/a&gt;. Instead of directly solving it via &lt;strong&gt;dsolve()&lt;/strong&gt;, it is solved in steps, and the trivial solutions are removed. This technique not only solves for the deflection of the column, but simultaneously also calculates the critical load it can bear.&lt;/p&gt;



&lt;p&gt;Although this may be considered as a hack to the problem. I think in future it would be better if &lt;strong&gt;dsolve()&lt;/strong&gt; gets the ability to remove the trivial solutions. But this seems to be better as of now.&lt;/p&gt;



&lt;p&gt;A problem that still persists is the calculation of critical load for pinned-fixed end condition. Currently, it has been made as an XFAIL, since to resolve that either &lt;strong&gt;solve()&lt;/strong&gt; or &lt;strong&gt;solveset() &lt;/strong&gt;has to return the solution in the required form. An &lt;a href="https://github.com/sympy/sympy/issues/17162"&gt;issue &lt;/a&gt;has been raised on GitHub, regarding the same.&lt;/p&gt;



&lt;p&gt;Hope that gives a crisp idea about the functioning of SymPy&amp;#8217;s Column module.&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=113</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-12 &#x2013; The Final wrap-up</title>
      <pubDate>Tue, 20 Aug 2019 17:10:27 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/08/20/gsoc19-week-12-the-final-wrap-up/</link>
      <description>&lt;p&gt;This was the last week of the coding
period. With not much of work left, the goal was to wrap-up the PR&amp;#8217;s.&lt;/p&gt;



&lt;p&gt;The week started with the merge of &amp;nbsp;&lt;a href="https://github.com/sympy/sympy/pull/17001"&gt;PR #17001&lt;/a&gt; which implemented a method &lt;strong&gt;cut_section()&lt;/strong&gt; in the polygon class, in order to get two new polygons when a polygon is cut via a line. After this a new method &lt;strong&gt;first_moment_of_area()&lt;/strong&gt; was added in &lt;a href="https://github.com/sympy/sympy/pull/17153"&gt;PR #17153&lt;/a&gt;. This method used &lt;strong&gt;cut_section()&lt;/strong&gt; for its implementation. Tests for the same were added in this PR. Also the existing documentation was improved. I also renamed the &lt;strong&gt;polar_modulus()&lt;/strong&gt; function to &lt;strong&gt;polar_second_moment_of_area() &lt;/strong&gt;which was a more general term as compared to the previous name. This PR also got &lt;strong&gt;merged&lt;/strong&gt; later on.&lt;/p&gt;



&lt;p&gt;Now, we are left with two more PR&amp;#8217;s to go.
&lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt; (Column
Buckling) and &lt;a href="https://github.com/sympy/sympy/pull/17345"&gt;PR #17345&lt;/a&gt;
(Beam diagram). The column buckling probably requires a little more
documentation. I will surely look into it and add some more explanations and references
to it. Also, the beam diagram PR has been completed and documented. A few more
discussions to be done on its working and we will be ready with it.&lt;span id="more-113"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;I believe that by the end of this week
both of these will finally get a merge.&lt;/p&gt;



&lt;p&gt;Another task that remains is the implementation of the &lt;a href="https://github.com/sympy/sympy/issues/17302"&gt;Truss class&lt;/a&gt;. Some rigorous debate and discussion is still needed to be done before we start its implementation. Once we agree on the implementation needs and API it won&amp;#8217;t be a difficult task to write it through.&lt;/p&gt;



&lt;p&gt;Also, since the final evaluations have
started I will be writing the project report which I have to submit before the
next week ends.&lt;/p&gt;



&lt;p&gt;Since officially the coding period ends here, there would be no ToDo&amp;#8217;s for the next week, just the final wrapping up and will surely try to complete the work that is still left.&lt;/p&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks! &lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=105</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-11- Heading to the final week</title>
      <pubDate>Tue, 13 Aug 2019 17:26:54 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/08/13/gsoc19-week-11-heading-to-the-final-week/</link>
      <description>&lt;p&gt;With the end of this week the &lt;strong&gt;draw()&lt;/strong&gt; function has been completely implemented. The work on &lt;a href="https://github.com/sympy/sympy/pull/17345"&gt;PR #17345&lt;/a&gt; has been completed along with the documentations.&lt;/p&gt;



&lt;p&gt;As mentioned in the previous blog this PR was an attempt to make the &lt;strong&gt;draw()&lt;/strong&gt; function use SymPy&amp;#8217;s own plot() rather than importing matplotlib externally to plot the diagram. The idea was to plot the load equation which is in terms of singularity function. This would directly plot uniformly distributed load, uniformly varying load and other higher order loads except for point loads and moment loads.&lt;br /&gt; The task was now to plot the remaining parts of the diagram which were:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;A rectangle for drawing the beam&lt;/li&gt;&lt;li&gt;Arrows for point loads&lt;/li&gt;&lt;li&gt;Markers for moment loads and supports &lt;/li&gt;&lt;li&gt;Colour filling to fill colour in inside the higher order loads (order &amp;gt;=0).&lt;span id="more-105"&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Instead of making temporary hacks to implement these, I went a step further to give the plotting module some additional functionalities. Apart from helping in implementing the &lt;strong&gt;draw()&lt;/strong&gt; function, &amp;nbsp;this would also enhance the plotting module.&lt;/p&gt;



&lt;p&gt;The basic idea was to have some additional keyworded arguments in the &lt;strong&gt;plot()&lt;/strong&gt; function. Every keyworded argument would be a list of dictionaries where each dictionary would represent the arguments (or parameters) that would have been passed in the corresponding matplotlib functions.&lt;/p&gt;



&lt;p&gt;These are the functions of matplotlib that can now be accessed using &lt;strong&gt;sympy&amp;#8217;s plot()&lt;/strong&gt;, along with where there are used in our current situation:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.Rectangle.html"&gt;matplotlib.patches.Rectangle&lt;/a&gt;&amp;nbsp;-to draw the beam&lt;/li&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.annotate.html"&gt;matplotlib.pyplot.annotate&lt;/a&gt;&amp;nbsp;&amp;#8211; to draw arrows of load&lt;/li&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/3.1.1/api/markers_api.html"&gt;matplotlib.markers&lt;/a&gt;&amp;#8211; to draw supports and moment loads&lt;/li&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.fill_between.html"&gt;fill_between()&lt;/a&gt; &amp;#8211; to fill an area with color&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Another thing which is worth mentioning is that to use &lt;strong&gt;fill_between() &lt;/strong&gt;we would require numpy&amp;#8217;s &lt;strong&gt;arange()&lt;/strong&gt; for sure. Although it might be better if we could avoid using an external module directly, but I guess this is unavoidable for now. &lt;/p&gt;



&lt;p&gt;Also, I have added an option for the user to scale the plot and get a pictorial view of it in case where the plotting with the exact dimensions doesn&amp;#8217;t produce a decent diagram. For eg. If the magnitude of the load (order &amp;gt;= 0) is relatively higher to other applied loads or to the length of the beam, the load plot might get out of the final plot window. &lt;/p&gt;



&lt;p&gt;Here is an example:&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
&amp;gt;&amp;gt;&amp;gt; R1, R2 = symbols('R1, R2')
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')

&amp;gt;&amp;gt;&amp;gt; b1 = Beam(50, 20, 30)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(10, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b1.apply_load(R1, 10, -1)
&amp;gt;&amp;gt;&amp;gt; b1.apply_load(R2, 30, -1)
&amp;gt;&amp;gt;&amp;gt; b1.apply_load(90, 5, 0, 23)
&amp;gt;&amp;gt;&amp;gt; b1.apply_load(10, 30, 1, 50)
&amp;gt;&amp;gt;&amp;gt; b1.apply_support(50, "pin")
&amp;gt;&amp;gt;&amp;gt; b1.apply_support(0, "fixed")
&amp;gt;&amp;gt;&amp;gt; b1.apply_support(20, "roller")
# case 1 on the left
&amp;gt;&amp;gt;&amp;gt; p = b1.draw()
&amp;gt;&amp;gt;&amp;gt; p.show()

# case 2 on the right
&amp;gt;&amp;gt;&amp;gt; p1 = b1.draw(pictorial=True)
&amp;gt;&amp;gt;&amp;gt; p1.show()
&lt;/pre&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-107" src="https://ishanaj.files.wordpress.com/2019/08/screenshot-10-08-2019-23_04_45.png" /&gt;&lt;/figure&gt;



&lt;h2&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Getting leftover PR&amp;#8217;s merged&lt;/li&gt;&lt;li&gt;Initiating implementation of Truss class&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-08-06-week-10.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 10: Matrix Wildcard Redux</title>
      <pubDate>Tue, 06 Aug 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-08-06-week-10.html</link>
      <description>&lt;p&gt;For this week, I&amp;#8217;ve made some more minor changes to the &lt;a href="https://github.com/sympy/sympy/pull/17299"&gt;&lt;code&gt;Indexed&lt;/code&gt; pull request&lt;/a&gt; from last week, in addition to filing a new &lt;a href="https://github.com/sympy/sympy/pull/17347"&gt;matrix wildcard pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="matrix-wildcards-again"&gt;Matrix Wildcards (again)&lt;/h3&gt;
&lt;p&gt;Since &lt;a href="https://github.com/sympy/sympy/pull/17223"&gt;#17223&lt;/a&gt; was merged this week, I started with an implementation of matrix wildcards that takes advantage of the functionality included in the pull request. I thought that this would be relatively straightforward, with an implementation of the &lt;code&gt;matches&lt;/code&gt; method for the &lt;code&gt;MatrixWild&lt;/code&gt; subclass being enough. There was one problem though: the underlying matching implementation assumes that all powers in the expression are an instance of the &lt;code&gt;Pow&lt;/code&gt; class. However, this isn&amp;#8217;t true for matrix expressions: the &lt;code&gt;MatPow&lt;/code&gt; class, which represents matrix powers, is a subclass of its own. I&amp;#8217;m not exactly sure what the reason for this is, since a quick change of &lt;code&gt;MatPow&lt;/code&gt; to inherit from &lt;code&gt;Pow&lt;/code&gt; doesn&amp;#8217;t seem to break anything. I&amp;#8217;ll probably look into this a bit more, since I think this might have something to do with the fact that Matrix exponents can also include other matrices.&lt;/p&gt;
&lt;p&gt;My solution for this was to allow temporarily allow expansion of powers by recursing through the expression tree and setting the &lt;code&gt;is_Pow&lt;/code&gt; field of each matrix power to &lt;code&gt;True&lt;/code&gt; and later reverting these states later. It doesn&amp;#8217;t look pretty, but it does seem to work (you can see the code &lt;a href="https://github.com/sympy/sympy/blob/17fb5010e36e10de156dad032d2aea376051df24/sympy/matrices/expressions/matmul.py#L178-L197"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ll try to get started with some optimizations that utilize this wildcard class once the pull request gets merged.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=91</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-10- An alternative to the draw() function</title>
      <pubDate>Mon, 05 Aug 2019 17:58:18 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/08/05/gsoc19-week-10-an-alternative-to-the-draw-function/</link>
      <description>&lt;p&gt;This was
the end of the tenth week, and we have entered the final phase of the project.&lt;/p&gt;



&lt;p&gt;For the last phase we have Truss calculations to be implemented in the continuum_mechanics module. I had initiated a discussion regarding what needs to be done and how the implementation will move forward in an &lt;a href="https://github.com/sympy/sympy/issues/17302"&gt;issue #17302&lt;/a&gt;. We will have to analyse a bit more about making Truss calculations symbolic and what benefits one might get in solving it symbolically. We have some good packages to compare from like &lt;a href="https://anastruct.readthedocs.io/en/latest/?badge=latest"&gt;this&lt;/a&gt;. I guess a bit more discussion is needed before we go ahead with it. &lt;/p&gt;



&lt;p&gt;Besides this, I had worked on improving the &lt;strong&gt;draw()&lt;/strong&gt; function implemented in the previous week in &lt;a href="https://github.com/sympy/sympy/pull/17240"&gt;PR #17240&lt;/a&gt;. I modified it to use the &lt;strong&gt;_backend&lt;/strong&gt; attribute for plotting the beam diagram. This could have worked until &lt;span id="more-91"&gt;&lt;/span&gt;I realised that using the &lt;strong&gt;_backend&lt;/strong&gt; attribute doesn&amp;#8217;t really has affect the &lt;strong&gt;Plot object. &lt;/strong&gt;To understand the last statement, lets go to how &lt;strong&gt;sympy.plot() &lt;/strong&gt;works.&lt;/p&gt;



&lt;p&gt;In simple terms, the equations that we pass through the &lt;strong&gt;plot()&lt;/strong&gt; function as arguments are actually stored in&lt;strong&gt; _series&lt;/strong&gt; attribute. So we can indirectly say that the basic data of the plot is stored in this attribute. But using the &lt;strong&gt;_backend &lt;/strong&gt;attribute wouldn&amp;#8217;t alter &lt;strong&gt;_series &lt;/strong&gt;at all and if &lt;strong&gt;_series &lt;/strong&gt;remains empty at the start it would end up storing nothing. &lt;/p&gt;



&lt;p&gt;But we are of course getting a decent plot at the end, so shouldn&amp;#8217;t we probably ignore this? No, it would surely  give the plot but we won&amp;#8217;t be getting a fully defined&lt;strong&gt; Plot &lt;/strong&gt;object which we can further use with &lt;strong&gt;PlotGrid&lt;/strong&gt; to get a subplot which includes all the five plots related to the beam.&lt;/p&gt;



&lt;p&gt;Keeping this in mind, I tried an alternative way to directly use&lt;strong&gt; sympy.plot() &lt;/strong&gt;&amp;nbsp;to give the plot. Although a bit hard and time taking to do, I have intiated this in a draft &lt;a href="https://github.com/sympy/sympy/pull/17345"&gt;PR #17345&lt;/a&gt;. This PR perfectly plots a rectangular beam and loads (except point and moment loads). Only things that are left here are to plot supports and arrows denoting the direction of the load.&lt;/p&gt;



&lt;p&gt;The example below shows how it functions: (keep in mind it just plots the basic structure of the intended beam diagram, it hasn&amp;#8217;t been completed yet)&lt;/p&gt;



&lt;div class="wp-block-group"&gt;&lt;div class="wp-block-group__inner-container"&gt;&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')
&amp;gt;&amp;gt;&amp;gt; b = Beam(9, E, I)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(-12, 9, -1)  # gets skipped
&amp;gt;&amp;gt;&amp;gt; b.apply_load(50, 5, -2)  # gets skipped
&amp;gt;&amp;gt;&amp;gt; b.apply_load(3, 6, 1, end=8)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(4, 0, 0, end=5)
&amp;gt;&amp;gt;&amp;gt; b.draw()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;figure class="wp-block-image size-large is-resized"&gt;&lt;img alt="" class="wp-image-92" height="351" src="https://ishanaj.files.wordpress.com/2019/08/screenshot-05-08-2019-19_49_21.png" width="449" /&gt;&lt;/figure&gt;



&lt;p&gt;I also tried to complete the leftover PR&amp;#8217;s in this week, but still some work is left.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Next week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Completing the &lt;strong&gt;draw() &lt;/strong&gt;function&lt;/li&gt;&lt;li&gt;Documentation and testing&lt;/li&gt;&lt;li&gt;Starting Truss implementations&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=74</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-9- Analyzing the draw() function</title>
      <pubDate>Mon, 29 Jul 2019 05:43:20 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/29/gsoc19-week-9-analyzing-the-draw-function/</link>
      <description>&lt;p&gt;With the
end of this week the third phase officially ends. &lt;/p&gt;



&lt;p&gt;There has been some discussions in the &lt;a href="https://github.com/sympy/sympy/pull/17240"&gt;PR #17240&lt;/a&gt; which implements the &lt;strong&gt;draw() &lt;/strong&gt;function. We might change the name of the function to &lt;strong&gt;plot() &lt;/strong&gt;which is more consistent with the previous beam methods &lt;strong&gt;plot_shear_force()&lt;/strong&gt;, &lt;strong&gt;plot_bending_moment(), &lt;/strong&gt;etc.&lt;/p&gt;



&lt;p&gt;Another discussion was about making this beam diagram a part of the &lt;strong&gt;plot_loading_results(), &lt;/strong&gt;which basically intends to plot all the beam related plots. Although currently the beam diagram uses &lt;strong&gt;matplotlib &lt;/strong&gt;as an external module, whereas the &lt;strong&gt;plot_loading_results()&lt;/strong&gt; uses &lt;strong&gt;PlotGrid&lt;/strong&gt; which is Sympy&amp;#8217;s internal functionality. So it would be a bit tricky to merge those two.&lt;span id="more-74"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;We also discussed the idea or rather the possibility of directly making use of SymPy&amp;#8217;s own plot to create a beam diagram. SymPy&amp;#8217;s &lt;strong&gt;plot() &lt;/strong&gt;is capable to plotting Singularity functions, so the load applied on the beam can also be plotted using &lt;strong&gt;sympy.plot() &lt;/strong&gt;as beam.load is indeed in terms of singularity function. But there is a problem when it comes to point loads and moment loads as the are in terms singularity function of negative order (or exponent). Not sure whether the sympy plot for singularity functions of negative order is plotted correctly, but the current plot won&amp;#8217;t help us in drawing point loads and moment loads. We might have to deal with it separately.&lt;/p&gt;



&lt;p&gt;I have
opened a discussion in the &lt;a href="https://groups.google.com/forum/?fromgroups#!topic/sympy/gmBNI-sffls"&gt;mailing
list&lt;/a&gt; regarding whether the plot is correct for singularity functions of negative
order, or what else should be done in order to get it corrected.&lt;/p&gt;



&lt;p&gt;Also, it will be difficult to plot a rectangle (for making beam) and markers (for making supports) via sympy.plot(). One idea is to go with the &lt;strong&gt;_backend&lt;/strong&gt; attribute of sympy.plot() which helps in directly using the &lt;strong&gt;backend &lt;/strong&gt;(i.e. matplotlib backend). I will have a look over it.&lt;/p&gt;



&lt;p&gt;Of
course if the beam diagram is made using SymPy&amp;#8217;s own plot it would surely be
preferred but for that we also need work on &lt;strong&gt;sympy.plot()&lt;/strong&gt; as currently it is limited to certain functionalities.&lt;/p&gt;



&lt;p&gt;From the
next week I will be starting with the last phase of implementing a Truss structure
and its respective calculations.&lt;/p&gt;



&lt;p&gt;Since only last few weeks are left, I think I will be able to make a draft PR for the last phase implementation by the end of the next week. And then we would only be left with minor things and leftovers of the previous phases.&lt;/p&gt;



&lt;p&gt;Also, I am glad to share that I was able to pass the second evaluations. So once again thank you mentors for all your support and guidance!&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Starting phase-IV&amp;nbsp; implementations&lt;/li&gt;&lt;li&gt;Simultaneously working and discussing previous
PR&amp;#8217;s.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will
keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=60</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-8- The draw() function in action</title>
      <pubDate>Mon, 22 Jul 2019 04:50:39 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/22/gsoc19-week-8-the-draw-function-in-action/</link>
      <description>&lt;p&gt;The 8&lt;sup&gt;th&lt;/sup&gt; week has ended and we are now in the middle of phase &amp;#8211;III.&lt;/p&gt;



&lt;p&gt;Last week was a bit of research-based, understanding &lt;strong&gt;matplotlib &lt;/strong&gt;and how it can be used to plot a beam diagram. I had a conversation with Jason Moore and Jashan where Jason shared a link of a &lt;a href="https://github.com/alfredocarella/simplebendingpractice"&gt;repository&lt;/a&gt;, which also was a bit of help as I took some hints from it for the &lt;strong&gt;draw() &lt;/strong&gt;function. After a lot of investigation and analysis, I was finally able to make a draft &lt;a href="https://github.com/sympy/sympy/pull/17240"&gt;PR # 17240&lt;/a&gt; which did the work as we intended.&lt;/p&gt;



&lt;p&gt;Here is an example of how it would function:&lt;span id="more-60"&gt;&lt;/span&gt;&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;

# This example has no prior logic involved. It just tests whether every functionality works or not

&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')

&amp;gt;&amp;gt;&amp;gt; b1 = Beam(50, E, I)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(-10, 0, -1)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(R1, 10, -1)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(R2, 30, -1)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(9, 5, 0, 23)

&amp;gt;&amp;gt;&amp;gt; b1.apply_load(9, 30, 1, 50)

&amp;gt;&amp;gt;&amp;gt; b1.apply_support(50, "pin")

&amp;gt;&amp;gt;&amp;gt; b1.apply_support(0, "fixed")

&amp;gt;&amp;gt;&amp;gt; b1.apply_support(20, "roller")

&amp;gt;&amp;gt;&amp;gt; b1.draw()

&lt;/pre&gt;



&lt;figure class="wp-block-image size-large is-resized .single-blog-image {display: none; }"&gt;&lt;img alt="" class="wp-image-62" height="387" src="https://ishanaj.files.wordpress.com/2019/07/61594696-552b5900-ac0c-11e9-96f9-4ba257dbf92c-1.png" width="467" /&gt;&lt;/figure&gt;



&lt;p&gt;Here we are using &lt;strong&gt;matplotlib&lt;/strong&gt; and &lt;strong&gt;numpy&lt;/strong&gt; by importing them as external modules. Of course, it would be better to have it done via &lt;strong&gt;SymPy&amp;#8217;s&lt;/strong&gt; own &lt;strong&gt;plot()&lt;/strong&gt;, but I think that is something we could work on in later stages as&lt;strong&gt; SymPy&amp;#8217;s plot()&lt;/strong&gt; is limited to work on equations and stuff (although on can use &lt;strong&gt;_backend &lt;/strong&gt;attribute for further functionalities). &amp;nbsp;Also to be noted here that &lt;strong&gt;SymPy&amp;#8217;s plot()&lt;/strong&gt; is not a replica of &lt;strong&gt;matplotib&amp;#8217;s plot()&lt;/strong&gt; but it makes it easier for SymPy equation to be plotted and it uses&amp;nbsp;&lt;strong&gt;matplotlib&lt;/strong&gt; to do so.&lt;/p&gt;



&lt;p&gt;Following are the&lt;strong&gt; m&lt;/strong&gt;&lt;strong&gt;atplotlib&lt;/strong&gt; modules/classes used:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.Rectangle.html"&gt;matplotlib.patches.Rectangle&lt;/a&gt;&amp;nbsp;-to draw the beam&lt;/li&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.annotate.html"&gt;matplotlib.pyplot.annotate&lt;/a&gt;&amp;nbsp;&amp;#8211; to draw arrows of load&lt;/li&gt;&lt;li&gt;&lt;a href="https://matplotlib.org/3.1.1/api/markers_api.html"&gt;matplotlib.markers&lt;/a&gt;&amp;#8211; to draw supports&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Also, considering Jason&amp;#8217;s &lt;a href="https://github.com/sympy/sympy/pull/17240#issuecomment-513577696"&gt;comment&lt;/a&gt; in the PR, I will have to work on making &lt;strong&gt;SymPy&amp;#8217;s plot()&lt;/strong&gt; to accept a singularity function, so that it would be easier to plot &lt;strong&gt;loads &lt;/strong&gt;which are indeed equations of Singularity function. This is still in consideration, so I will have to look into it and of course will have a discussion on how it is to be done.&lt;/p&gt;



&lt;p&gt;Currently, I am not able to determine how to plot parabolic loads. I think this could be added later as we should currently focus on plotting simple parts and certainly work on other complexities later. But we can have a discussion on it.&lt;/p&gt;



&lt;p&gt;Other PR&amp;#8217;s are still being parallelly worked on.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Working on the idea of plotting singularity function via SymPy&amp;#8217;s plot()&lt;/li&gt;&lt;li&gt;Plotting parabolic loads&lt;/li&gt;&lt;li&gt;Writing documentation and tests&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-30-week-9.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 9: Matrices to Indexed</title>
      <pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-30-week-9.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-07-22-week-8.html"&gt;previous post&lt;/a&gt; for Week 8&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For this week, I&amp;#8217;ve started with &lt;a href="https://github.com/sympy/sympy/pull/17299"&gt;#17299&lt;/a&gt;. This pull request is meant to extend support for the &lt;code&gt;MatrixExpr&lt;/code&gt; class by allowing for conversion into an &lt;code&gt;Indexed&lt;/code&gt; class in which contractions equivalent to the matrix expression are represented.&lt;/p&gt;
&lt;h2 id="conversion-to-indexed"&gt;Conversion to &lt;code&gt;Indexed&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;as_indexed&lt;/code&gt; method that the pull request introduces is pretty self-explanatory:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; n, m &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'n m'&lt;/span&gt;, integer&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;True&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, n, m)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; B &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, m, n)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e &lt;span class="op"&gt;=&lt;/span&gt; A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e.as_indexed()&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;A[i, j]&lt;span class="op"&gt;*&lt;/span&gt;B[j, k]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A matrix multiplication between two matrix symbols is equivalent to a contraction along the index &lt;span class="math inline"&gt;&lt;em&gt;j&lt;/em&gt;&lt;/span&gt; (Since matrix multiplication is equivalent to a contraction along a single index).&lt;/p&gt;
&lt;h3 id="relationship-to-codegen"&gt;Relationship to Codegen&lt;/h3&gt;
&lt;p&gt;The purpose of the pull request is to allow conversion to help in the generation of code related to some matrix expressions. This is because there&amp;#8217;s already an existing infrastructure for code generation through contractions (something that the still-WIP &lt;a href="https://github.com/sympy/sympy/pull/17170"&gt;#17170&lt;/a&gt; addresses). The currently work in progress PR is meant to aid in extending code generation to matrix expressions instead of just &lt;code&gt;Indexed&lt;/code&gt; objects. This same conversion might also be possible using the &lt;code&gt;Codegen*&lt;/code&gt; classes in &lt;code&gt;array_utils&lt;/code&gt;, though this way seems to make more sense since it&amp;#8217;s entirely possible to use the function for non-codegen related purposes.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;My plans for this week are to continue working on the pull request and start with the new Matrix Wildcard pull request.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-22-week-8.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 8: Non-Commutative Wildcards</title>
      <pubDate>Mon, 22 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-22-week-8.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-07-14-week-7.html"&gt;previous post&lt;/a&gt; for Week 7&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I spent most of this week rewriting the non-commutative matching code in Sympy&amp;#8217;s core as Aaron suggested. The pull request for this rewrite is available at &lt;a href="https://github.com/sympy/sympy/pull/17223"&gt;#17223&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="non-commutative-matching-in-sympy"&gt;Non-commutative matching in SymPy&lt;/h2&gt;
&lt;p&gt;SymPy already supports matching within non-commutative multiplication expressions. While I mentioned in my last blog post that this matching support was limited, I&amp;#8217;ll go into a bit more detail about what those limitations (which sometimes produce wrong results) are:&lt;/p&gt;
&lt;h3 id="no-matching-based-on-structure"&gt;No matching based on structure&lt;/h3&gt;
&lt;p&gt;Matching within commutative SymPy expressions allows for taking the structure of expressions into account. Two commutative SymPy expressions match only if both contain the same non-wildcard symbols:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; a, x, y, z&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; w &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'w'&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span class="op"&gt;=&lt;/span&gt; x&lt;span class="op"&gt;*&lt;/span&gt;y&lt;span class="op"&gt;*&lt;/span&gt;w&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m.matches(x&lt;span class="op"&gt;*&lt;/span&gt;y&lt;span class="op"&gt;*&lt;/span&gt;z)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;{w_: z}&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m.matches(a&lt;span class="op"&gt;*&lt;/span&gt;x&lt;span class="op"&gt;*&lt;/span&gt;z)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt; specifies that the expression must contain both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in addition to whatever the wildcard matches. For this reason, &lt;code&gt;m&lt;/code&gt; matches &lt;code&gt;x*y*z&lt;/code&gt; but not &lt;code&gt;a*x*z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The corresponding example for non-commutative expressions does not work as expected, as it does not match when we expect it to:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B, C, D &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'A:D'&lt;/span&gt;, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'W'&lt;/span&gt;, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M &lt;span class="op"&gt;=&lt;/span&gt; A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;W&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M.matches(A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;C)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M.matches(A&lt;span class="op"&gt;*&lt;/span&gt;D&lt;span class="op"&gt;*&lt;/span&gt;C)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="expressions-dont-respect-non-commutativity"&gt;Expressions don&amp;#8217;t respect non-commutativity&lt;/h3&gt;
&lt;p&gt;In instances where matching does seem to work, the non-commutativity of expressions is not respected:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B, C, D &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'A:D'&lt;/span&gt;, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; w &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'w'&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (w&lt;span class="op"&gt;*&lt;/span&gt;A&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;C).matches(x&lt;span class="op"&gt;*&lt;/span&gt;C&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;*&lt;/span&gt;A)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" title="5"&gt;{w_: x}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two expressions should &lt;em&gt;not&lt;/em&gt; have matched, since the order of the non-commutative expressions were different. I reported this same error for matrix expressions in issue &lt;a href="https://github.com/sympy/sympy/issues/17172"&gt;#17172&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="sub-expressions-arent-expanded"&gt;Sub-expressions aren&amp;#8217;t expanded&lt;/h3&gt;
&lt;p&gt;The matching code should be able to match portions of powers, which are represented differently in the SymPy AST. As an example, a non-commutative matcher such as &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;em&gt;W&lt;/em&gt;&lt;/span&gt; (where &lt;span class="math inline"&gt;&lt;em&gt;W&lt;/em&gt;&lt;/span&gt; is a wildcard) should match &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt; with &lt;span class="math inline"&gt;{&lt;em&gt;W&lt;/em&gt;&amp;#8196;&amp;#8614;&amp;#8196;&lt;em&gt;A&lt;/em&gt;}&lt;/span&gt;. I wasn&amp;#8217;t able create a working example of this using the existing matching code.&lt;/p&gt;
&lt;h2 id="matching-implementation"&gt;Matching Implementation&lt;/h2&gt;
&lt;p&gt;Since order needs to be taken into account for matching non-commutative expressions, the new matching code essentially does what a regular expression matcher would do, with nodes taking the place of characters and wildcards taking the place of the &lt;code&gt;.+&lt;/code&gt; regular expression.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;The matching PR still needs to be polished, and the related documentation needs to be updated, so I&amp;#8217;ll be working on that. I&amp;#8217;ll also start with extending matrix matching from this PR.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=58</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-7- Starting with the phase-III draw() function</title>
      <pubDate>Mon, 15 Jul 2019 03:02:10 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/15/gsoc19-week-7-starting-with-the-phase-iii-draw-function/</link>
      <description>&lt;p&gt;The week was successfully completed as planned. The work on &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;Column class&lt;/a&gt; has been completed.&lt;/p&gt;



&lt;p&gt;The documentation and tests have been written and with some changes in the &lt;strong&gt;solve_slope_deflection()&lt;/strong&gt; and &lt;strong&gt;critical_load(),&lt;/strong&gt; the &lt;strong&gt;Column&lt;/strong&gt; class is now able to handle cases with trivial solutions of the constants ( C1 &amp;amp; C2) which made the deflection equation zero.&lt;/p&gt;



&lt;p&gt;Apart from this, another problem that we had with the &lt;strong&gt;pinned-fixed&lt;/strong&gt; end condition, where &lt;strong&gt;solve()&lt;/strong&gt; wasn&amp;#8217;t giving the output in the required form, has temporary been handled by making an &lt;strong&gt;XFAIL &lt;/strong&gt;test against it. We can work on it later. Either there has to be some changes in &lt;strong&gt;solve()&lt;/strong&gt;&amp;nbsp;so that we would be able to handle our case or we might have to figure out a way to rewrite it into the desired form.&lt;span id="more-58"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;With the end of this week,&amp;nbsp;&lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/17153"&gt;PR #17153&lt;/a&gt; are complete and ready for review. I have made some changes addressing some of the reviews, and we can have further discussions on it.&lt;/p&gt;



&lt;p&gt;Now, also moving on to the next phase, I have done a bit of research on it. I will most probably open a discussion to have an initial discussion regarding how work will progress in this stage. This phase is regarding plotting the beam diagrams using &lt;a href="https://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. I have also considered &lt;strong&gt;pyglet&lt;/strong&gt; plotting module of SymPy, which according to the &lt;a href="https://docs.sympy.org/latest/modules/plotting.html#plotting-geometric-entities"&gt;documentation&lt;/a&gt; is capable of plotting geometries, but there has been some problems in this module and it doesn&amp;#8217;t seem to be working well. I had earlier made an &lt;a href="https://github.com/sympy/sympy/issues/16537"&gt;issue #16537&lt;/a&gt; regarding the same, but there seems to be no improvement here.&lt;/p&gt;



&lt;p&gt;So, we will be discussing the rest in an issue-cum-discussion, in the upcoming week.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Next week:&lt;/strong&gt;&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;Working on the Stage-III&lt;/li&gt;&lt;li&gt;Simultaneously, discussing the leftover PR&amp;#8217;s and trying to finish them and make a merge.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Most probably, on successful discussion and planning, I will be opening a draft work-in-progress PR for the &lt;strong&gt;draw()&lt;/strong&gt; function in stage &amp;#8211;III.&lt;/p&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-14-week-7.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 7: Matrix Wildcards</title>
      <pubDate>Sun, 14 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-14-week-7.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-07-07-week-6.html"&gt;previous post&lt;/a&gt; for Week 6&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I spent most of this week on extending wildcard support for matrix expressions, along with some more explorations in printing array contractions.&lt;/p&gt;
&lt;h2 id="matrices-and-wildcards"&gt;Matrices and Wildcards&lt;/h2&gt;
&lt;p&gt;As I&amp;#8217;ve probably mentioned in the last two blog posts, SymPy&amp;#8217;s support for matching matrix expressions through the &lt;code&gt;Wild&lt;/code&gt; class is currently severely limited (&lt;a href="https://github.com/sympy/sympy/issues/17172"&gt;when it works&lt;/a&gt;). While it is possible to construct a non-commutative &lt;code&gt;Wild&lt;/code&gt;, it isn&amp;#8217;t able to match expressions in a matrix multiplication:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W, X &lt;span class="op"&gt;=&lt;/span&gt; symbols(&lt;span class="st"&gt;'W, X'&lt;/span&gt;, cls&lt;span class="op"&gt;=&lt;/span&gt;Wild, commutative&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt;  N&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, N, N), MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, N, N)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;type&lt;/span&gt;((A &lt;span class="op"&gt;*&lt;/span&gt; B).match(W &lt;span class="op"&gt;*&lt;/span&gt; X))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="st"&gt;'NoneType'&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s also currently not possible to combine matrices and wildcards in expressions, since wildcards don&amp;#8217;t have a defined shape and so may only function as scalars:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span class="op"&gt;+&lt;/span&gt; A&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="pp"&gt;TypeError&lt;/span&gt;: Mix of Matrix &lt;span class="kw"&gt;and&lt;/span&gt; Scalar symbols&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span class="op"&gt;*&lt;/span&gt; A&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="pp"&gt;NotImplementedError&lt;/span&gt;: noncommutative scalars &lt;span class="kw"&gt;in&lt;/span&gt; MatMul are &lt;span class="kw"&gt;not&lt;/span&gt; supported.&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="matrixwild"&gt;&lt;code&gt;MatrixWild&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I spent most of this week working on &lt;a href="https://github.com/sympy/sympy/pull/17177"&gt;#17177&lt;/a&gt;, which implements a &lt;code&gt;MatrixWild&lt;/code&gt; class that functions as both a wildcard and a matrix expression. In order to construct the wildcard, we need to give it a shape:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; N&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.matrices.expressions.matexpr &lt;span class="im"&gt;import&lt;/span&gt; MatrixWild&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; W, X &lt;span class="op"&gt;=&lt;/span&gt; MatrixWild(&lt;span class="st"&gt;'W'&lt;/span&gt;, N, N), MatrixWild(&lt;span class="st"&gt;'X'&lt;/span&gt;, N, N)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike in the example above using &lt;code&gt;Wild&lt;/code&gt;, compound expressions are able to match against a matrix multiplication:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, N, N), MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, N, N)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (A &lt;span class="op"&gt;*&lt;/span&gt; B).match(W &lt;span class="op"&gt;*&lt;/span&gt; X)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" title="3"&gt;{W_: A, X_: B}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in order for matrix wildcards to match, their shape must match with the target expression:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'x'&lt;/span&gt;, N, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e &lt;span class="op"&gt;=&lt;/span&gt; A &lt;span class="op"&gt;*&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e.shape&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;(N, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;type&lt;/span&gt;(e.match(W))&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" title="6"&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="st"&gt;'NoneType'&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if we don&amp;#8217;t care about dimension, we can include another wildcard in the matrix wildcard&amp;#8217;s shape:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'M'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; w &lt;span class="op"&gt;=&lt;/span&gt; Wild(&lt;span class="st"&gt;'w'&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Y &lt;span class="op"&gt;=&lt;/span&gt; MatrixWild(&lt;span class="st"&gt;'Y'&lt;/span&gt;, w, w)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; M.match(Y)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" title="5"&gt;{w_: &lt;span class="dv"&gt;3&lt;/span&gt;, Y_: M}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this is a good first step to the matching functionality I was looking for with &lt;code&gt;unify&lt;/code&gt; for rewriting matrix expressions, there is still quite a bit of functionality (and tests) to be implemented, along with an unknown number of bugs to fix.&lt;/p&gt;
&lt;h2 id="printing-indexed-bases"&gt;Printing Indexed Bases&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve also been working on a small pull request to improve the functionality the printing &lt;code&gt;IndexedBases&lt;/code&gt; so that it instead uses intermediate values (represented through the new code generation classes) to accumulate the values of contractions. Currently, this does nothing but break existing compatibility (Fortran versions older than Fortran 95 don&amp;#8217;t support variable declarations in arbitrary locations, and the variable currently defaults to a 32-bit floating point number), though I think this is a good first step for supporting the printing of more complex contractions.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;For this week, I plan to finish with the implementation of&lt;code&gt;MatrixWild&lt;/code&gt; (and hopefully get started with using it for rewriting matrix expressions), along with making some more progress on the indexed bases pull request.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=56</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-6-Completing the Column class.</title>
      <pubDate>Mon, 08 Jul 2019 04:44:15 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/08/gsoc19-week-6-completing-the-column-class/</link>
      <description>&lt;p&gt;The sixth week has ended with a lot of work to be done ahead.&lt;/p&gt;



&lt;p&gt;Last week the work was majorly focused on the work in progress &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;PR #17122&lt;/a&gt;. I have included the critical load function which makes the Column class capable of determining the critical load. Some problems still came up in solving some equations. I have made an &lt;a href="https://github.com/sympy/sympy/issues/17162"&gt;issue&lt;/a&gt; related to those.&lt;/p&gt;



&lt;p&gt;An equation similar to &lt;strong&gt;tan(x) &amp;#8211; x&lt;/strong&gt; comes up while determining the critical load for the&amp;nbsp;&lt;strong&gt;pinned-fixed&lt;/strong&gt;&amp;nbsp;end-condition. SymPy&amp;#8217;s &lt;strong&gt;solve() &lt;/strong&gt;won&amp;#8217;t be able to solve such an equation, and as per the solution given in the &lt;a href="https://github.com/sympy/sympy/issues/17162"&gt;issue&lt;/a&gt;, I think that &lt;strong&gt;nsolve()&lt;/strong&gt; would surely help in this case. So I will be going ahead to solve it using the approximation returned by &lt;strong&gt;nsolve()&lt;/strong&gt; to handle this condition.&lt;span id="more-56"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;Another problem that I faced was determining deflection and critical load for the&amp;nbsp;&lt;strong&gt;pinned-pinned&lt;/strong&gt;&amp;nbsp;end-condition. Here, the deflection comes out to be:&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;C1*sin(sqrt(P)*x/(sqrt(E)*sqrt(I)))&lt;/strong&gt; +&lt;strong&gt; C2*cos(sqrt(P)*x/(sqrt(E)*sqrt(I)))&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;Now on solving it for constants &lt;strong&gt;C1&lt;/strong&gt; and &lt;strong&gt;C2, &lt;/strong&gt;using initial boundary conditions,&amp;nbsp;both come out to be &lt;strong&gt;0&lt;/strong&gt;, making the deflection &lt;strong&gt;zero&lt;/strong&gt;. This implies that no buckling occurs, which is not the case.&lt;/p&gt;



&lt;p&gt;Even when solving it manually, this situation occurs, we deal with it by putting &lt;strong&gt;C2 = 0 &lt;/strong&gt;and instead of putting &lt;strong&gt;C1 = 0,&lt;/strong&gt; we consider the &lt;strong&gt;sin &lt;/strong&gt;term equal to zero and then solve for &lt;strong&gt;P (critical load).&amp;nbsp;&lt;/strong&gt;So, I will be adding a few more lines of code to deal with this situation.&lt;/p&gt;



&lt;p&gt;Apart from working on this module, I have also opened another &lt;a href="https://github.com/sympy/sympy/pull/17153"&gt;PR #17153&lt;/a&gt; which implement methods&amp;nbsp;to determine &lt;strong&gt;section modulus&lt;/strong&gt; and &lt;strong&gt;polar modulus&lt;/strong&gt; of any polygon (more precisely a cross-section). Initially it was a draft PR, but now the work has been completed on it. Once I get the approval, I will also be adding the same for the Ellipses module. Also, if &lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/17001"&gt;cut_section()&lt;/a&gt; &lt;/strong&gt;gets successfully implemented I will be adding another method to determine the first moment.&lt;/p&gt;



&lt;p&gt;I am pretty sure the work on &lt;strong&gt;Column class&lt;/strong&gt; will be successfully completed before the end of the next week. Also, we will be heading towards the next stage which intends to plot beam diagrams using matplotlib. Till then we can have an initial discussion regarding the same.&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Improving the &lt;strong&gt;critical_load()&lt;/strong&gt; to handle the above problems&lt;/li&gt;&lt;li&gt;Completing the Column class (documentation and tests)&lt;/li&gt;&lt;li&gt;Starting with the next phase&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-07-07-week-6.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 6: Unification and Tensors Continued</title>
      <pubDate>Sun, 07 Jul 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-07-07-week-6.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-06-28-week-5.html"&gt;previous post&lt;/a&gt; for Week 5&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This week I&amp;#8217;ve made some progress on matching and tensors, though I haven&amp;#8217;t filed any pull requests.&lt;/p&gt;
&lt;h2 id="unification"&gt;Unification&lt;/h2&gt;
&lt;p&gt;I have a working implementation of rewriting non-commutative expressions using SymPy&amp;#8217;s unify. It works by generating a &lt;code&gt;ReplaceOptim&lt;/code&gt; object that applies the rewriting rules to any term it&amp;#8217;s called with. Here&amp;#8217;s how we specify the rewriting rules:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; Symbol, MatrixSymbol&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span class="op"&gt;=&lt;/span&gt; Symbol(&lt;span class="st"&gt;'N_matcher'&lt;/span&gt;, integer&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;True&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; X &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'X_matcher'&lt;/span&gt;, n, n)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Y &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'Y_matcher'&lt;/span&gt;, n, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; variables &lt;span class="op"&gt;=&lt;/span&gt; [n, X, Y]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; matcher &lt;span class="op"&gt;=&lt;/span&gt; X&lt;span class="op"&gt;**&lt;/span&gt;(&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; Y&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; goal &lt;span class="op"&gt;=&lt;/span&gt; MatrixSolve(X, Y)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the combination of &lt;code&gt;matcher&lt;/code&gt; and &lt;code&gt;variables&lt;/code&gt; specifies that we&amp;#8217;re looking for any expression of the form &lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;sup&gt;&amp;#8197;&amp;#8722;&amp;#8197;1&lt;/sup&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/span&gt;, where both &lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;/span&gt; and &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/span&gt; can be any compound matrix expression. The inclusion of &lt;code&gt;n&lt;/code&gt; in &lt;code&gt;variables&lt;/code&gt; imposes the additional restriction that the matrix expression matched by &lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;/span&gt; must be square (i.e. &lt;span class="math inline"&gt;&lt;em&gt;n&lt;/em&gt;&amp;#8197;&amp;#215;&amp;#8197;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt;) while the expression matched by &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/span&gt; must be a vector (i.e. &lt;span class="math inline"&gt;&lt;em&gt;n&lt;/em&gt;&amp;#8197;&amp;#215;&amp;#8197;1&lt;/span&gt;). &lt;code&gt;goal&lt;/code&gt; specifies what the matched expression should be replaced with, where &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; serve as stand-ins for the matched terms.&lt;/p&gt;
&lt;p&gt;After specifying our goals, we can construct the object and apply the replacement to some expressions:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; replacer &lt;span class="op"&gt;=&lt;/span&gt; gen_replacement_operator(matcher, goal, variables)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B, x &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;), MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;), MatrixSymbol(&lt;span class="st"&gt;'x'&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; replacer(A &lt;span class="op"&gt;**&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; x)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;(MatrixSolve(A, vector&lt;span class="op"&gt;=&lt;/span&gt;x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; replacer(A &lt;span class="op"&gt;**&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; B)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;A &lt;span class="op"&gt;**&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="op"&gt;*&lt;/span&gt; B&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first term was replaced since the dimensions of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; agreed with what was specified in matcher, while the second expression was left untouched since &lt;code&gt;B&lt;/code&gt; is not a vector.&lt;/p&gt;
&lt;p&gt;While the matcher does work, I haven&amp;#8217;t filed a pull request because of some problems which don&amp;#8217;t seem like they could be easily addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I had to give add the suffix &lt;code&gt;_matcher&lt;/code&gt; to the variable names to avoid variable capture, since SymPy symbols are considered equal if they have the same name. &lt;code&gt;unify&lt;/code&gt; does not support &lt;code&gt;Dummy&lt;/code&gt; symbols as variables.&lt;/li&gt;
&lt;li&gt;Some compound expressions are not matched. I&amp;#8217;ve narrowed this down to the way the variables are being passed to &lt;code&gt;unify&lt;/code&gt;, since they need to be converted to symbols. It seems like this conversion sometimes causes expressions to no longer be unifiable.&lt;/li&gt;
&lt;li&gt;Unification doesn&amp;#8217;t seem to work for a mixture of commutative and non-commutative expressions. I&amp;#8217;m not sure if this is a problem with &lt;code&gt;unify&lt;/code&gt; itself or the way that I&amp;#8217;m using it, since the only test of &lt;code&gt;unify&lt;/code&gt; in the SymPy codebase involving matrix expressions is on matrix multiplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned in my last blog post, SymPy already supports this sort of pattern matching through &lt;code&gt;Wild&lt;/code&gt;, though it currently does not support expressions involving matrices. Before trying to address these issues, I think it would be worthwhile to look into extending the functionality of &lt;code&gt;Wild&lt;/code&gt; as an alternative.&lt;/p&gt;
&lt;h2 id="tensors"&gt;Tensors&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve made some progress in low-level code generation of matrix expressions. I tried seeing if instances of classes in the &lt;code&gt;array_utils&lt;/code&gt; module could be converted to SymPy&amp;#8217;s AST representation before being passed off to the code generators. This doesn&amp;#8217;t seem possible at the moment, since the AST has a number of limitations (such as not supporting variables in &lt;code&gt;for&lt;/code&gt; loop ranges). The &lt;code&gt;IndexedBase&lt;/code&gt; printer already has some of the functionality that I&amp;#8217;m trying to implement, so I&amp;#8217;ve settled on extending the printer to support arbitrary contractions. This same functionality can probably be reused for the &lt;code&gt;array_utils&lt;/code&gt; printers. The implementation will hopefully be straightforward.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;My goal for this week is to have a pull request for the tensor code generation ready, along with a plan for what to do with matching.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=54</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-5 &#x2013; Moving on with a Non-mutable Column class</title>
      <pubDate>Sun, 30 Jun 2019 18:52:29 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/07/01/gsoc19-week-5-moving-on-with-a-non-mutable-column-class/</link>
      <description>&lt;p&gt;A lot of things happened this week and I am happy to inform you that &lt;a href="https://github.com/sympy/sympy/pull/17055"&gt;PR #17055&lt;/a&gt; has been successfully merged. The beam module now supports the cross-sectional shape of the beam as an alternative parameter to the second moment. With this, the aim of the stage-I to integrate the geometry module with beam module has been accomplished.&lt;/p&gt;



&lt;p&gt;Although we need to add some examples in the docs, to make it easier for the user to understand how to use this new feature.&lt;/p&gt;



&lt;p&gt;Coming on to stage-II, I had already, initiated a &lt;a href="https://github.com/sympy/sympy/issues/17072"&gt;discussion&lt;/a&gt; to finalize the API of the new Column class that is to be implemented as a part of the continuum mechanics module in this stage.&lt;span id="more-54"&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;We concluded that it would be much better if the Column class remains non-mutable i.e. unlike the beam class where a beam is formed in a piecewise form, the new Column class would take all its required input data during the declaration and then one can call different methods to calculate different things.&lt;/p&gt;



&lt;p&gt;I have made a &lt;a href="https://github.com/sympy/sympy/pull/17122"&gt;work-in-progress PR #17122&lt;/a&gt; implementing the Column class which performs the required buckling calculations. Currently, I have not included a method to calculate the critical load as there was a bit of problem with the form of the equation which the &lt;strong&gt;dsolve() &lt;/strong&gt;returns after solving the differential equation of buckling. &lt;a href="https://docs.sympy.org/latest/modules/solvers/ode.html" rel="noopener" target="_blank"&gt;&lt;strong&gt;dsolve(&lt;/strong&gt;)&lt;/a&gt; is SymPy&amp;#8217;s differential equation solver.&lt;/p&gt;



&lt;p&gt;In general, if we solve the general equation of buckling manually, we might apply the &lt;strong&gt;method of undetermined coefficients&lt;/strong&gt;, which of course even &lt;strong&gt;dsolve() &lt;/strong&gt;&amp;nbsp;is capable to apply, but it gives the answer in an exponent form, while we need it in a trigonometric form (for ease of further calculations). So after seeking different methods trying to convert this equation in terms of &lt;strong&gt;sin(x)&lt;/strong&gt; and &lt;strong&gt;cos(x), &lt;/strong&gt;I finally had to put that problem in the discussion, where Oscar Benjamin, gave an idea to declare the variables as positive in order to get it in terms of &lt;strong&gt;sin &lt;/strong&gt;and&lt;strong&gt; cos.&amp;nbsp;&lt;/strong&gt;I tried that it works well for our case. I will have to figure out the further calculation of the critical load.&lt;/p&gt;



&lt;p&gt;Hopefully will be updating the code with a new method to calculate critical load, soon.&lt;/p&gt;



&lt;p&gt;Also, I have planned to have a method to solve the &lt;strong&gt;unknown reactions&lt;/strong&gt; and &lt;strong&gt;reaction moments&lt;/strong&gt;, which would use the &lt;strong&gt;boundary conditions&lt;/strong&gt; to get their values.&lt;/p&gt;



&lt;p&gt;With all these things going on, this week we also had our first evaluations, and I am very happy to say that I have passed it. &lt;strong&gt;Thanks to the mentors!&lt;/strong&gt;&lt;/p&gt;



&lt;h2&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;Next Week:&lt;/strong&gt;&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Completing Column class with all its methods&lt;/li&gt;&lt;li&gt;Adding tests and documentation.&lt;/li&gt;&lt;li&gt;Starting discussions for the next stage.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;I will try to finish working on the Column class this weekend.&lt;/p&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-06-28-week-5.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Week 5: Unification and Tensors</title>
      <pubDate>Fri, 28 Jun 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-06-28-week-5.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-06-21-weeks-3-and-4.html"&gt;previous post&lt;/a&gt; for Weeks 3 and 4&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This week I&amp;#8217;ve been mostly doing background reading. This post is mostly a summary of what I learned.&lt;/p&gt;
&lt;h2 id="unification"&gt;Unification&lt;/h2&gt;
&lt;p&gt;In short, unification is the process of finding substitutions of variables within two terms two terms to make them identical. For example, if we have the expressions &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&amp;#8197;+&amp;#8197;2&lt;em&gt;y&lt;/em&gt;&lt;/span&gt; and &lt;span class="math inline"&gt;&lt;em&gt;a&lt;/em&gt;&amp;#8197;+&amp;#8197;3&lt;em&gt;b&lt;/em&gt;&lt;/span&gt;, the substitution &lt;span class="math inline"&gt;{&lt;em&gt;x&lt;/em&gt;&amp;#8196;&amp;#8614;&amp;#8196;&lt;em&gt;a&lt;/em&gt;,&amp;#8198;&lt;em&gt;y&lt;/em&gt;&amp;#8196;&amp;#8614;&amp;#8196;3,&amp;#8198;&lt;em&gt;b&lt;/em&gt;&amp;#8196;&amp;#8614;&amp;#8196;2}&lt;/span&gt; is a unifier, since applying the substitution to both expressions makes gives us the identical expression of &lt;span class="math inline"&gt;&lt;em&gt;a&lt;/em&gt;&amp;#8197;+&amp;#8197;3&amp;#8197;&amp;#8901;&amp;#8197;2&lt;/span&gt;. While this particular substitution includes variables from both expressions, we&amp;#8217;re mostly interested in rules involving substitutions of variables from just one expression (a case of unification known as matching). Several well-known algorithms for unification already exist.&lt;/p&gt;
&lt;h3 id="unification-in-sympy"&gt;Unification in SymPy&lt;/h3&gt;
&lt;p&gt;SymPy also has an implementation of a unification algorithm that is able to take the commutativity of operations into account. Suppose we wanted to unify the matrix expressions &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;&lt;em&gt;T&lt;/em&gt;&lt;/sup&gt;&lt;em&gt;B&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;em&gt;C&lt;/em&gt;&lt;sup&gt;&amp;#8197;&amp;#8722;&amp;#8197;1&lt;/sup&gt;&lt;/span&gt; and &lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;em&gt;Y&lt;/em&gt;&lt;sup&gt;&amp;#8197;&amp;#8722;&amp;#8197;1&lt;/sup&gt;&lt;/span&gt;. This is essentially the problem of finding a substitution that makes these two expressions equal. Using the &lt;code&gt;sympy.unify.usympy&lt;/code&gt; module, we can discover what this substitution is:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.unify.usympy &lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; N&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;lambda&lt;/span&gt; x: MatrixSymbol(x, N, N)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A, B, C, X, Y &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;map&lt;/span&gt;(m, [&lt;span class="st"&gt;'A'&lt;/span&gt;, &lt;span class="st"&gt;'B'&lt;/span&gt;, &lt;span class="st"&gt;'X'&lt;/span&gt;, &lt;span class="st"&gt;'Y'&lt;/span&gt;])&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e1 &lt;span class="op"&gt;=&lt;/span&gt; A.T &lt;span class="op"&gt;*&lt;/span&gt; B&lt;span class="op"&gt;**&lt;/span&gt;&lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; C.I&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e2 &lt;span class="op"&gt;=&lt;/span&gt; X &lt;span class="op"&gt;*&lt;/span&gt; Y &lt;span class="op"&gt;**&lt;/span&gt;(&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;next&lt;/span&gt;(unify(e1, e2, variables&lt;span class="op"&gt;=&lt;/span&gt;[X, Y]))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;{X: A.T&lt;span class="op"&gt;*&lt;/span&gt;B&lt;span class="op"&gt;**&lt;/span&gt;&lt;span class="dv"&gt;2&lt;/span&gt;, Y: C}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#8217;ve reduced this to a matching problem in which the variables are specified only in &lt;code&gt;e2&lt;/code&gt;. What&amp;#8217;s important to note here is that the matching rule within &lt;code&gt;e2&lt;/code&gt; we specified (&lt;span class="math inline"&gt;&lt;em&gt;X&lt;/em&gt;&lt;em&gt;Y&lt;/em&gt;&lt;sup&gt;&amp;#8197;&amp;#8722;&amp;#8197;1&lt;/sup&gt;&lt;/span&gt;) was a compound expression. This is something that is currently not possible for non-commutative expressions (such as matrix multiplication) using SymPy&amp;#8217;s &lt;code&gt;Wild&lt;/code&gt; interface. &lt;code&gt;unify&lt;/code&gt; allows use to express substitution rules that are able to match across sub-expressions in matrix multiplication.&lt;/p&gt;
&lt;p&gt;Through unification, we can express substitution rules for optimization as a simple term-rewriting rule. In my previous blog post, I mentioned rewriting the matrix multiplication &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; as a solving operation of &lt;code&gt;MatSolve(A, x)&lt;/code&gt; under certain assumptions. The actual implementation is restricted to cases where both the &lt;code&gt;A&lt;/code&gt; and the &lt;code&gt;x&lt;/code&gt; are matrix symbols, and the optimization can&amp;#8217;t identify cases where either the &lt;code&gt;A&lt;/code&gt; or the &lt;code&gt;x&lt;/code&gt; is a compound expression. With unification, we can identify the same pattern in more complex subexpressions. If we&amp;#8217;re given the matrix expression &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;&lt;em&gt;T&lt;/em&gt;&lt;/sup&gt;(&lt;em&gt;A&lt;/em&gt;&lt;em&gt;B&lt;/em&gt;)&lt;sup&gt;&amp;#8197;&amp;#8722;&amp;#8197;1&lt;/sup&gt;&lt;em&gt;x&lt;/em&gt;&lt;em&gt;y&lt;/em&gt;&lt;/span&gt;, a unification based transformer can produce &lt;code&gt;MatSolve(AB, x)&lt;/code&gt;, provided that the shapes of the matrices match the given rule.&lt;/p&gt;
&lt;h2 id="codegen-tensors"&gt;Codegen Tensors&lt;/h2&gt;
&lt;p&gt;I also looked into generating C and Fortran code from SymPy matrix expressions. For the purposes of code generation, SymPy has a relatively new &lt;code&gt;array_utils&lt;/code&gt; module. The AST nodes in this module express generalizations of operations on matrices, which require a bit of background in tensors.&lt;/p&gt;
&lt;p&gt;Many array operations (including matrix multiplication) involve &lt;em&gt;contraction&lt;/em&gt; along an axis. Contractions are a combination of multiplication and summation along certain axis of a tensor&lt;a class="footnote-ref" href="https://anpandey.github.io/atom-sympy.xml#fn1" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. In assigning the matrix multiplication &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;em&gt;B&lt;/em&gt;&lt;/span&gt; to the &lt;span class="math inline"&gt;&lt;em&gt;n&lt;/em&gt;&amp;#8197;&amp;#215;&amp;#8197;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; matrix &lt;span class="math inline"&gt;&lt;em&gt;C&lt;/em&gt;&lt;/span&gt;, we can explicitly write the summations (using subscripts for indexing matrix elements) as&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;$$C_{ik} = \sum_{j = 1}^{n} A_{ij} B_{jk}$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The index &lt;span class="math inline"&gt;&lt;em&gt;j&lt;/em&gt;&lt;/span&gt; is contracted, as it is shared between both &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;/span&gt; and &lt;span class="math inline"&gt;&lt;em&gt;B&lt;/em&gt;&lt;/span&gt;, and describing this summation operation as a whole boils down to which indices are shared between the matrices. This is essentially what the &lt;code&gt;array_utils&lt;/code&gt; classes do. This is what happens when we use &lt;code&gt;array_utils&lt;/code&gt; to convert the matrix multiplication to an equivalent contraction operation:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.codegen.array_utils &lt;span class="im"&gt;import&lt;/span&gt; CodegenArrayContraction&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; N&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; A &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'A'&lt;/span&gt;, N, N)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; B &lt;span class="op"&gt;=&lt;/span&gt; MatrixSymbol(&lt;span class="st"&gt;'B'&lt;/span&gt;, N, N)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; CodegenArrayContraction.from_MatMul(A &lt;span class="op"&gt;*&lt;/span&gt; B)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;CodegenArrayContraction(CodegenArrayTensorProduct(A, B), (&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt;))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#8217;re given a new&lt;code&gt;CodegenArrayContraction&lt;/code&gt; object that stores, along with the variables &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, tuples of integers representing contractions along certain indices. Here, the &lt;code&gt;(1, 2)&lt;/code&gt; means that the variable at index 1 and index 2 (indices start at 0) are shared. We can confirm this by looking at the above summation, since both the second and third indices out of all indices that appear in the expression are &lt;span class="math inline"&gt;&lt;em&gt;j&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;For next week, I&amp;#8217;ll try to re-implement the rewriting optimization in terms of &lt;code&gt;unify&lt;/code&gt;. This will both make it easier to express rules and extend to sub-expressions as well. I&amp;#8217;ll also start with implementing additional printers for the C and Fortran printers. The printer will probably just print naive &lt;code&gt;for&lt;/code&gt; loops to keep things simple (and it would probaly be better to use something like Theano for highly optimized code).&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For our purposes, we can think of tensors as just &lt;span class="math inline"&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt;-dimensional arrays. Most of my reading on tensors was Justin C. Feng&amp;#8217;s &lt;a href="https://justincfeng.github.io/Tensors_Poor_Man.pdf"&gt;The Poor Man&amp;#8217;s Introduction to Tensors&lt;/a&gt;.&lt;a class="footnote-back" href="https://anpandey.github.io/atom-sympy.xml#fnref1"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://ishanaj.wordpress.com/?p=52</guid>
      <author>Ishan Joshi (ishanaj)</author>
      <title>Ishan Joshi (ishanaj): GSoC&#x2019;19: Week-4-Starting with Column Buckling implementation</title>
      <pubDate>Sun, 23 Jun 2019 18:41:36 GMT</pubDate>
      <link>https://ishanaj.wordpress.com/2019/06/24/gsoc19-week-4-starting-with-column-buckling-implementation/</link>
      <description>&lt;p&gt;Finalizing what had been discussed in &lt;a href="https://github.com/sympy/sympy/pull/16964"&gt;PR #16964&lt;/a&gt; for integrating geometry module with the beam module,&lt;a href="https://github.com/sympy/sympy/pull/17055"&gt; PR #17055&lt;/a&gt; was opened which is now ready to go!&lt;/p&gt;



&lt;p&gt;There is no special function for defining the cross-section of a Beam object. A user can simply pass the geometry object as a parameter instead of the &lt;strong&gt;second_moment, &lt;/strong&gt;and the corresponding second moment would be calculated internally. The example below might explain this better:&lt;span id="more-52"&gt;&lt;/span&gt;&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;

&amp;gt;&amp;gt;&amp;gt; b = Beam(l, E, Circle((0, 0), r))

&amp;gt;&amp;gt;&amp;gt; b.second_moment

pi*r*Abs(r)**3/4

&amp;gt;&amp;gt;&amp;gt; b.cross_section

Circle(Point2D(0, 0), r)

&lt;/pre&gt;



&lt;p&gt;Further, the &lt;strong&gt;cross_section&lt;/strong&gt; attribute can be changed even after the beam is created. Every time the &lt;strong&gt;cross_section&lt;/strong&gt; is assigned a new value, the &lt;strong&gt;second_moment&lt;/strong&gt; gets automatically updated.&lt;/p&gt;



&lt;p&gt;Similarly, every time the user changes the &lt;strong&gt;second_moment&lt;/strong&gt; explicitly after the creation of the beam, the previous &lt;strong&gt;cross_section&lt;/strong&gt; gets destroyed, or in other words, the &lt;strong&gt;cross_section&lt;/strong&gt; is set to None.&lt;/p&gt;


&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate"&gt;

&amp;gt;&amp;gt;&amp;gt; b = Beam(l, E, Circle((0, 0), r))

&amp;gt;&amp;gt;&amp;gt; I&amp;#160; = Symbol(&amp;#8216;I&amp;#8217;)

&amp;gt;&amp;gt;&amp;gt; b.second_moment = I

&amp;gt;&amp;gt;&amp;gt; b.cross_section

None

&amp;gt;&amp;gt;&amp;gt; b.second_moment = Polygon((0, 0), (a, 0), (a, b), (0, b))

ValueError: To update cross-section geometry use `cross_section` attribute

&lt;/pre&gt;



&lt;p&gt;The PR is complete and just needs the final approval from the mentors.&lt;/p&gt;



&lt;p&gt;Simultaneously, I had worked on the column buckling calculations which is a part of the stage &amp;#8211;II.&lt;/p&gt;



&lt;p&gt;I have opened an &lt;a href="https://github.com/sympy/sympy/issues/17072"&gt;issue-cum-discussion&lt;/a&gt; for discussing its API and further implementations.&lt;/p&gt;



&lt;p&gt;Since the calculations of the Column Buckling are very much different from those of beam bending, we will have to make a separate class Column. The basic API and the way the calculations are supposed to go can be seen from the stage &amp;#8211;II in the &lt;a href="https://docs.google.com/document/d/1LOtMTr9cCrzQ8_OnKrgkZs8wFS9N9PxlR10h3aKG0jg/edit?usp=sharing"&gt;proposal&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;I would be making a PR for column buckling calculations within a day or two, once some initial questions (as mentioned in the issue-cum-discussion) gets clarified.&lt;/p&gt;



&lt;h2&gt;Next Week:&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;Finalizing the basic API and implementations of Column class&lt;/li&gt;&lt;li&gt;Making a PR for the above implementations&lt;/li&gt;&lt;li&gt;Documentation and testing&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Will keep you updated!&lt;/p&gt;



&lt;p&gt;Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-06-21-weeks-3-and-4.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code Weeks 3 and 4: Matrix Optimizations</title>
      <pubDate>Fri, 21 Jun 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-06-21-weeks-3-and-4.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-06-07-week-2.html"&gt;previous post&lt;/a&gt; for Week 2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I spent a large part of last week travelling, so I&amp;#8217;m combining the blog posts for the last two weeks.&lt;/p&gt;
&lt;h2 id="finishing-up-with-lfortran"&gt;Finishing up with LFortran&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m finished with the &lt;a href="https://github.com/sympy/sympy/pull/16931"&gt;pull request&lt;/a&gt; for the LFortran code printer for now, though it&amp;#8217;s definitely way too incomplete to be merged. The code passes &lt;em&gt;most&lt;/em&gt; of the rudimentary tests I&amp;#8217;ve added.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a simple example of one of the failing LFortran tests: Suppose we want to generate Fortran (using LFortran) code from the mathematical expression &lt;span class="math inline"&gt;&amp;#8197;&amp;#8722;&amp;#8197;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;. SymPy sees this expression as multiplication with -1, as it implements only addition and multiplication in its arithmetic operations:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy &lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span class="op"&gt;=&lt;/span&gt; Symbol(&lt;span class="st"&gt;'x'&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; srepr(&lt;span class="op"&gt;-&lt;/span&gt;x)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="co"&gt;&amp;quot;Mul(Integer(-1), Symbol('x'))&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Directly converting same mathematical expression in Fortran as &lt;code&gt;-x&lt;/code&gt; we can see that LFortran instead sees it as unary subtraction:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; lfortran &lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; src_to_ast(&lt;span class="st"&gt;&amp;quot;-x&amp;quot;&lt;/span&gt;, &lt;span class="va"&gt;False&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;lfortran.ast.ast.UnaryOp &lt;span class="bu"&gt;object&lt;/span&gt; at &lt;span class="bn"&gt;0x7f9027f1aba8&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a major problem for the tests, which right now look to see if the Lfortran-parsed output of &lt;code&gt;fcode&lt;/code&gt; (SymPy&amp;#8217;s current Fortran code generator) on an expression matches the same directly translated AST. This won&amp;#8217;t be true for &lt;span class="math inline"&gt;&amp;#8197;&amp;#8722;&amp;#8197;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;, since the translated expression is a multiplication &lt;code&gt;BinOp&lt;/code&gt; while the parsed expression in an &lt;code&gt;UnaryOp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One solution might be to not parse &lt;code&gt;fcode&lt;/code&gt;&amp;#8217;s output and instead just check for equivalence between strings. This would mean dealing with the quirks of the code printers (such as their tendency to produce excessive parenthesis), and take away some of the advantages of direct translation. The more probable solution would be to introduce substitution rules within the LFortran AST.&lt;/p&gt;
&lt;h2 id="missing-matrix-nodes"&gt;Missing matrix nodes&lt;/h2&gt;
&lt;p&gt;I filed issue &lt;a href="https://github.com/sympy/sympy/issues/17006"&gt;#17006&lt;/a&gt;, in which &lt;code&gt;lambdify&lt;/code&gt; misinterpreted identity matrices as the imaginary unit. The fix in &lt;a href="https://github.com/sympy/sympy/pull/17022"&gt;#17022&lt;/a&gt; is pretty simple: just generate identity matrices with &lt;code&gt;np.eye&lt;/code&gt; when we can.&lt;/p&gt;
&lt;p&gt;I also went through the matrix expression classes to see which ones weren&amp;#8217;t supported by the NumPy code printer and filed issue &lt;a href="https://github.com/sympy/sympy/issues/17013"&gt;#17013&lt;/a&gt;. These are addressed by another contributor in &lt;a href="https://github.com/sympy/sympy/pull/17029%5D"&gt;#17029&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="rewriting-matrix-inversion"&gt;Rewriting matrix inversion&lt;/h2&gt;
&lt;p&gt;Most of this week was spent on implementing an optimization for the NumPy generator suggested by Aaron: given the expression &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;&amp;#8197;&amp;#8722;&amp;#8197;1&lt;/sup&gt;&lt;em&gt;b&lt;/em&gt;&lt;/span&gt; where &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;/span&gt; is a square matrix and &lt;span class="math inline"&gt;&lt;em&gt;b&lt;/em&gt;&lt;/span&gt; a vector, generate the expression &lt;code&gt;np.linalg.solve(A, b)&lt;/code&gt; instead of &lt;code&gt;np.linalg.inv(A) * b&lt;/code&gt;. While both &lt;code&gt;solve&lt;/code&gt; and &lt;code&gt;inv&lt;/code&gt; use the same LU-decomposition based LAPACK &lt;a href="http://www.netlib.org/lapack95/DOC/la_gesv.txt"&gt;&lt;code&gt;?gesv&lt;/code&gt;&lt;/a&gt; functions &lt;a class="footnote-ref" href="https://anpandey.github.io/atom-sympy.xml#fn1" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, &lt;code&gt;solve&lt;/code&gt; is called on a vector while the &lt;code&gt;inv&lt;/code&gt; on a (much larger) matrix. In addition to cutting down on the number of operations, this optimization might also remove any errors introduced in calculating the inverse.&lt;/p&gt;
&lt;p&gt;My pull request for this optimization is available at &lt;a href="https://github.com/sympy/sympy/pull/17041"&gt;#17041&lt;/a&gt;, which uses SymPy&amp;#8217;s assumption system to make sure that &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;/span&gt; is full-rank (a constraint imposed by &lt;code&gt;solve&lt;/code&gt;). My initial approach was to embed these optimizations directly in the code printing base classes. After some discussion with Bj&amp;#246;rn, we decided it would be better to separate optimization from printing as much as possible, leading to the representation of the solving operation as its own distinct AST node. This approach is much better than the original, since it was fairly easy to the optimization to the Octave/Matlab code printer.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;For this week, I&amp;#8217;ll be continuing with the matrix optimization PR. I&amp;#8217;ll try to find other optimizations that can be applied (such as the evaluation order of complicated matrix expressions) and look into using Sympy&amp;#8217;s unification capabilities in simplifying the expression of optimization rules.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You can find the C definitions for the functions eventually called by &lt;a href="https://github.com/numpy/numpy/blob/b80d360e/numpy/linalg/umath_linalg.c.src#L1694"&gt;&lt;code&gt;inv&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/numpy/numpy/blob/b80d360e/numpy/linalg/umath_linalg.c.src#L1622"&gt;&lt;code&gt;solve&lt;/code&gt;&lt;/a&gt;. These are written in a special templated version of C, but you can find the &lt;a href="https://github.com/numpy/numpy/blob/b80d360e/numpy/linalg/umath_linalg.c.src#L1560"&gt;template variable definitions&lt;/a&gt; a bit higher up in the source.&lt;a class="footnote-back" href="https://anpandey.github.io/atom-sympy.xml#fnref1"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-06-07-week-2.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code: Week 2</title>
      <pubDate>Fri, 07 Jun 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-06-07-week-2.html</link>
      <description>&lt;p&gt;&lt;em&gt;See the &lt;a href="https://anpandey.github.io/2019-05-31-week-1.html"&gt;previous post&lt;/a&gt; for Week 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For this week, I&amp;#8217;ve continued working on adding support for LFortran to SymPy&amp;#8217;s code generation capabilities. This week mostly involved getting the infrastructure for testing the functionality of the new code generator working. I also extended the number of expressions the generator can handle, in addition to adding to LFortran&amp;#8217;s ability to parse numbers upstream.&lt;/p&gt;
&lt;h2 id="more-expressions"&gt;More Expressions&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve added support for four more expression types that the generator can handle: &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Rational&lt;/code&gt;, &lt;code&gt;Pow&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt;. Since our base translation class was already in place from last week, implementing these was relatively straightforward and involved just defining the node visitors for each expression type (The commit that implements this can be found &lt;a href="https://github.com/sympy/sympy/pull/16931/commits/67a06a83d4aa239e8d319837d9ed7d11b67f7846"&gt;here&lt;/a&gt;). Here&amp;#8217;s a demonstration showing the abstract syntax tree generated from translating the expression &lt;span class="math inline"&gt;$\left(\frac{4}{3}\right)^{x}$&lt;/span&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.codegen.lfort &lt;span class="im"&gt;import&lt;/span&gt; sympy_to_lfortran&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; lfortran.asr.pprint &lt;span class="im"&gt;import&lt;/span&gt; pprint_asr&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pprint_asr(sympy_to_lfortran(Rational(&lt;span class="dv"&gt;4&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;) &lt;span class="op"&gt;**&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;expr.BinOp&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&amp;#9500;&amp;#9472;left&lt;span class="op"&gt;=&lt;/span&gt;expr.BinOp&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;&amp;#9474; &amp;#9500;&amp;#9472;left&lt;span class="op"&gt;=&lt;/span&gt;expr.Num&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;&amp;#9474; &amp;#9474; &amp;#9500;&amp;#9472;n&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;'4_dp'&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" title="9"&gt;&amp;#9474; &amp;#9474; &amp;#9584;&amp;#9472;type&lt;span class="op"&gt;=&lt;/span&gt;ttype.Real&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" title="10"&gt;&amp;#9474; &amp;#9474;   &amp;#9500;&amp;#9472;kind&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" title="11"&gt;&amp;#9474; &amp;#9474;   &amp;#9584;&amp;#9472;dims&lt;span class="op"&gt;=&lt;/span&gt;[]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" title="12"&gt;&amp;#9474; &amp;#9500;&amp;#9472;op&lt;span class="op"&gt;=&lt;/span&gt;operator.Div&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" title="13"&gt;&amp;#9474; &amp;#9500;&amp;#9472;right&lt;span class="op"&gt;=&lt;/span&gt;expr.Num&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" title="14"&gt;&amp;#9474; &amp;#9474; &amp;#9500;&amp;#9472;n&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;'3_dp'&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" title="15"&gt;&amp;#9474; &amp;#9474; &amp;#9584;&amp;#9472;type&lt;span class="op"&gt;=&lt;/span&gt;ttype.Real&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" title="16"&gt;&amp;#9474; &amp;#9474;   &amp;#9500;&amp;#9472;kind&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" title="17"&gt;&amp;#9474; &amp;#9474;   &amp;#9584;&amp;#9472;dims&lt;span class="op"&gt;=&lt;/span&gt;[]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" title="18"&gt;&amp;#9474; &amp;#9584;&amp;#9472;type&lt;span class="op"&gt;=&lt;/span&gt;ttype.Real&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" title="19"&gt;&amp;#9474;   &amp;#9500;&amp;#9472;kind&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" title="20"&gt;&amp;#9474;   &amp;#9584;&amp;#9472;dims&lt;span class="op"&gt;=&lt;/span&gt;[]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" title="21"&gt;&amp;#9500;&amp;#9472;op&lt;span class="op"&gt;=&lt;/span&gt;operator.Pow&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" title="22"&gt;&amp;#9500;&amp;#9472;right&lt;span class="op"&gt;=&lt;/span&gt;x&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-23" title="23"&gt;&amp;#9584;&amp;#9472;type&lt;span class="op"&gt;=&lt;/span&gt;ttype.Real&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-24" title="24"&gt;  &amp;#9500;&amp;#9472;kind&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-25" title="25"&gt;  &amp;#9584;&amp;#9472;dims&lt;span class="op"&gt;=&lt;/span&gt;[]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the translator fails for expressions that should in theory work. Right now, we can&amp;#8217;t add an integer to a symbol because symbols default to real numbers, resulting in a type mismatch:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pprint_asr(sympy_to_lfortran(&lt;span class="dv"&gt;3&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; x))&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;lfortran.asr.asr_check.TypeMismatch: Type mismatch&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fortran allows the implicit conversion of a float to a real, and the expression shouldn&amp;#8217;t generate an error. This is functionality that will hopefully be implemented by the time I come back to this project close to the end of the summer.&lt;/p&gt;
&lt;h2 id="testing-the-lfortran-converter"&gt;Testing the LFortran Converter&lt;/h2&gt;
&lt;p&gt;I also added the initial infrastructure for testing the new code generation functions, with the starting commit available &lt;a href="https://github.com/sympy/sympy/pull/16931/commits/918c12de43e319f8d3f16d48c19f25d1db248909"&gt;here&lt;/a&gt;. As Aaron mentioned in one of our meetings, the plan right now is for code generated by the LFortran backend to be equivalent to the output generated by the existing &lt;code&gt;fcode&lt;/code&gt; at the AST level. Each test should be in the form of an assertion that tests the (parsed) output of &lt;code&gt;fcode&lt;/code&gt; applied to a SymPy expression against the same AST generated by our newly implemented &lt;code&gt;sympy_to_lfortran&lt;/code&gt;. The LFortran project already has code to check generated ASTs against expected values, so I adapted this to the testing library of our code generator (I&amp;#8217;m also not sure how this works in terms of licensing, since both SymPy and LFortran use the BSD-3 license).&lt;/p&gt;
&lt;p&gt;One problem that immediately became apparent was the way that LFortran represents numbers. Looking at the expression tree above, the real numbers are actually stored as strings. On the parser side, LFortran stores a real number as the string used to represent that number. This means that the ASTs of two expressions that represent the same number in different ways are not identical (for example, &lt;code&gt;1.0_dp&lt;/code&gt; and &lt;code&gt;1.d0&lt;/code&gt; both represent the same double precision floating point number, but the strings stored by LFortran will be different). It&amp;#8217;s only at the &amp;#8220;annotation&amp;#8221; stage of evaluation that LFortran canonicalizes floating point representations. For now, the tests use the annotation function of this stage, and I filed a &lt;a href="https://gitlab.com/lfortran/lfortran/merge_requests/225"&gt;merge request&lt;/a&gt; on the LFortran project to add support for parsing numbers in the way that &lt;code&gt;fcode&lt;/code&gt; generates them.&lt;/p&gt;
&lt;p&gt;While the initial infrastructure is in place, I haven&amp;#8217;t added any tests yet. Since the LFortran project is still in early alpha, the functionality needed to compare the syntax tree made by the builder API against the syntax tree parsed from the output of &lt;code&gt;fcode&lt;/code&gt; hasn&amp;#8217;t been implemented yet. Again, this is something that will hopefully be implemented in LFortran near the end of the summer when I start on this portion of the project again.&lt;/p&gt;
&lt;h3 id="contributing-upstream"&gt;Contributing Upstream&lt;/h3&gt;
&lt;p&gt;After I filed the merge request to add the functionality I needed to LFortran, Ondr&amp;#780;ej (the creator of LFortran and one of my mentors) mentioned that he was planning on eventually removing the module I contributed to. The merge request I filed actually wasn&amp;#8217;t the one I had in mind at first. I thought about adding support for canonicalizing number nodes right after they&amp;#8217;re created in the builder API, but I decided against this because I felt that any changes I made would have to be minimally invasive. In retrospect, this was probably a misplaced concern, since it&amp;#8217;s important to consider the development stage of a project when deciding how much of it should be changed. Because of this, LFortran will probably end up with something I opted at the moment to not implement.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s still some work left to be done with LFortran, such as filing issues I encountered and preparing the pull request for a merge (though it&amp;#8217;ll probably remain a work in progress for some time). After that, I&amp;#8217;ll be finished with LFortran for the time being and move on to extending support for matrix expressions in the Python code generator. The Python code generator can already convert (most) matrix expressions through NumPy, though there are still some bugs owing to an incomplete implementation. For next week, I&amp;#8217;ll have to figure out what this missing functionality is how it can be implemented.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://anpandey.github.io/posts/sympy/2019-05-31-week-1.html</guid>
      <author>Ankit Pandey (anpandey)</author>
      <title>Ankit Pandey (anpandey): Google Summer of Code: Week 1</title>
      <pubDate>Fri, 31 May 2019 00:00:00 GMT</pubDate>
      <link>https://anpandey.github.io/posts/sympy/2019-05-31-week-1.html</link>
      <description>&lt;p&gt;For the past week, I&amp;#8217;ve been working on adding support for &lt;a href="https://lfortran.org/"&gt;LFortran&lt;/a&gt; to SymPy&amp;#8217;s code generation capabilities. My current goal is to emulate SymPy&amp;#8217;s &lt;code&gt;fcode&lt;/code&gt;, which converts a SymPy expression to an equivalent expression in Fortran, utilizing only LFortran as a backend. This post is an outline of what I&amp;#8217;ve done (and learned) over last week.&lt;/p&gt;
&lt;h2 id="lfortran"&gt;LFortran&lt;/h2&gt;
&lt;p&gt;LFortran is a Fortran (with some extensions) to LLVM compiler. One advantage that this design provides is that it enables interactive execution of Fortran code. LFortran can also be used as a Jupyter kernel, which means it can be used in a Jupyter notebook environment (you can even find an online interactive demo &lt;a href="https://mybinder.org/v2/gl/lfortran%2Fweb%2Flfortran-binder/master?filepath=Demo.ipynb"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In addition to being able to parse code, LFortran also provides the functionality of traversing a parse tree and generating the equivalent Fortran code. This means that if we want to generate Fortran code from a SymPy expression, the only work that we have to do is convert the SymPy expression tree to its LFortran equivalent.&lt;/p&gt;
&lt;h3 id="lfortran-builder"&gt;LFortran Builder&lt;/h3&gt;
&lt;p&gt;LFortran provides a number of convenience functions for building a Fortran AST. Since LFortran is still in early alpha, there are currently only about a dozen builder functions. However, these few basic functions are enough for constructing simple expressions in the Fortran AST. As an example, if we wanted to construct the expression represented by &lt;code&gt;c = a + b&lt;/code&gt;, where each variable involved is an integer, we could do something like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; lfortran.asr.builder &lt;span class="im"&gt;as&lt;/span&gt; builder&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; lfortran.asr.asr &lt;span class="im"&gt;as&lt;/span&gt; asr&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; integer &lt;span class="op"&gt;=&lt;/span&gt; builder.make_type_integer()&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span class="op"&gt;=&lt;/span&gt; asr.Variable(name&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class="bu"&gt;type&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;integer)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; b &lt;span class="op"&gt;=&lt;/span&gt; asr.Variable(name&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class="bu"&gt;type&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;integer)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; c &lt;span class="op"&gt;=&lt;/span&gt; asr.Variable(name&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;, &lt;span class="bu"&gt;type&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;integer)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;sum&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; builder.make_binop(a, asr.Add(), b)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; expr &lt;span class="op"&gt;=&lt;/span&gt; asr.Assignment(c, &lt;span class="bu"&gt;sum&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LFortran also provides functionality to visualize what the expression tree looks like:&lt;/p&gt;

&lt;div class="sourceCode"&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; lfortran.asr.pprint &lt;span class="im"&gt;as&lt;/span&gt; pprint
&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pprint.pprint_asr(expr)
&lt;span class="kw"&gt;stmt.Assignment&lt;/span&gt;
&amp;#9500;&amp;#9472;target&lt;span class="op"&gt;=&lt;/span&gt;c
&amp;#9584;&amp;#9472;value&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="kw"&gt;expr.BinOp&lt;/span&gt;
  &amp;#9500;&amp;#9472;left&lt;span class="op"&gt;=&lt;/span&gt;a
  &amp;#9500;&amp;#9472;op&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="kw"&gt;operator.Add&lt;/span&gt;
  &amp;#9500;&amp;#9472;right&lt;span class="op"&gt;=&lt;/span&gt;b
  &amp;#9584;&amp;#9472;type&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="kw"&gt;ttype.Integer&lt;/span&gt;
    &amp;#9500;&amp;#9472;kind&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;
    &amp;#9584;&amp;#9472;dims&lt;span class="op"&gt;=&lt;/span&gt;[]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id="sympy-to-lfortran-converter"&gt;Sympy to LFortran Converter&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve started with the implementation of a basic SymPy to LFortran converter utilizing the AST builder described above, with the current &lt;a href="https://github.com/sympy/sympy/pull/16931"&gt;pull request&lt;/a&gt; available on the SymPy GitHub. The converter follows the same node visitor class structure as all of the other code printers (it even inherits the &lt;code&gt;CodePrinter&lt;/code&gt; class, despite the methods not producing strings but rather AST nodes). Here&amp;#8217;s a simple example that demonstrates the conversion of a simple expression to an equivalent in LFortran:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.abc &lt;span class="im"&gt;import&lt;/span&gt; x&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.codegen.lfort &lt;span class="im"&gt;import&lt;/span&gt; sympy_to_lfortran&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;import&lt;/span&gt; lfortran&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e &lt;span class="op"&gt;=&lt;/span&gt; x &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e_converted &lt;span class="op"&gt;=&lt;/span&gt; sympy_to_lfortran(e)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; lfortran.ast_to_src(lfortran.asr_to_ast(e_converted)).replace(&lt;span class="st"&gt;'&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;'&lt;/span&gt;, &lt;span class="st"&gt;''&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" title="7"&gt;&lt;span class="co"&gt;'(x) + (1)'&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two things to notice here. The first is that I had to replace all the newlines in the generated expression, since a &lt;a href="https://gitlab.com/lfortran/lfortran/issues/110"&gt;bug in LFortran&lt;/a&gt; causes too many newlines to be printed. The second is that there are a number of redundant parentheses in the printed expression. While this isn&amp;#8217;t an outright bug, it&amp;#8217;s another aspect of LFortran that is currently being improved upon.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also add another function, &lt;code&gt;sympy_to_lfortran_wrapped&lt;/code&gt;, which wraps an expression in a function definition, (poorly) emulating the wrapping part of &lt;a href="https://docs.sympy.org/latest/modules/utilities/autowrap.html"&gt;&lt;code&gt;autowrap&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="sourceCode"&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; sympy.codegen.lfort &lt;span class="im"&gt;import&lt;/span&gt; sympy_to_lfortran_wrapped
&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; e_wrapped &lt;span class="op"&gt;=&lt;/span&gt; sympy_to_lfortran_wrapped(e)
&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;print&lt;/span&gt;(lfortran.ast_to_src(lfortran.asr_to_ast(e_wrapped)))
&lt;span class="st"&gt;integer function f(x) result(ret)
integer, intent(in) :: x
ret = 1 + x
end function&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since LFortran can directly compile the AST to an LLVM intermediate representation, a future implementation of &lt;code&gt;autowrap&lt;/code&gt; might be implemented by compiling the output of this function (instead of first completely generating the code and then feeding it to &lt;code&gt;gfortran&lt;/code&gt; as it&amp;#8217;s done right now).&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;For the next couple of days, I will try to extend the types of SymPy expressions that may be converted. One thing to note is that there isn&amp;#8217;t a perfect correspondence between SymPy and LFortran AST nodes. LFortran supports nodes for operations like unary subtraction and division, which SymPy converts into multiplication and division respectively. On top of this, I&amp;#8217;ll also add some tests for the functionality that I have implemented so far. After that, I&amp;#8217;ll start with work on SymPy&amp;#8217;s matrix expression code generation (the second part of my GSoC project) and pick LFortran up again close to the end of the summer.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=17</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): GSoC 2018: Autolev Parser (using ANTLRv4): Final Report</title>
      <pubDate>Sat, 11 Aug 2018 21:28:45 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/08/11/gsoc-2018-autolev-parser-using-antlrv4-final-report/</link>
      <description>&lt;h2&gt;About Me:&lt;/h2&gt;
&lt;p&gt;I am Nikhil Pappu, an undergraduate Computer Science student at the International Institute of Information Technology, Bangalore.&lt;/p&gt;
&lt;h2&gt;About the Project:&lt;/h2&gt;
&lt;p&gt;Autolev (now superseded by MotionGenesis) is a domain specific language used for symbolic multibody dynamics. The SymPy mechanics module now has enough power and functionality to be a fully featured symbolic dynamics module. The parser parses Autolev (version 4.1) code to SymPy code by making use of SymPy&amp;#8217;s math libraries and the mechanics module.&lt;/p&gt;
&lt;p&gt;The parser has been built using the &lt;a href="http://www.antlr.org/"&gt;ANTLR&lt;/a&gt; framework and its main purpose is to help former users of Autolev to get familiarized with multibody dynamics in SymPy.&lt;/p&gt;
&lt;h2&gt;The Plan:&lt;/h2&gt;
&lt;p&gt;The plan was to build a parser using ANTLR that could parse Autolev code to SymPy code.&amp;#160; Overall,&amp;#160; I think I was able to achieve most of what I had hoped for. I had faced some difficulties in some areas of the parser due to the very different nature of Autolev and Python. The parser has some issues as a result. I have specified all the details in the documentation I have written.&lt;/p&gt;
&lt;h2&gt;Work Done:&lt;/h2&gt;
&lt;p&gt;I made a parser for the Autolev language which is now a part of SymPy in the parsing module. I have written the code for the parser using the ANTLR framework. I have also included a bunch of tests for testing the rules of the parser code.&lt;/p&gt;
&lt;p&gt;The majority of the work was a part of PR &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;. I made a second PR &lt;a href="https://github.com/sympy/sympy/pull/15006"&gt;#15006&lt;/a&gt; for the changes I had made after the main PR.&lt;/p&gt;
&lt;p&gt;I have written documentation for the parser which is a part of these PRs: &lt;a href="https://github.com/sympy/sympy/pull/15046"&gt;#15046&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/15066"&gt;#15066&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/15067"&gt;#15067&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also written a PyDy for Autolev Users guide which is a part of PR &lt;a href="https://github.com/sympy/sympy/pull/15077"&gt;#15077&lt;/a&gt;. This guide is meant to be a quick reference for looking up Autolev-PyDy equivalents.&lt;/p&gt;
&lt;h2&gt;Future Work:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The parser has been built by referring to and parsing codes from the &lt;a class="reference external" href="http://web.mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf"&gt;Autolev Tutorial&lt;/a&gt; and the book &lt;em&gt;Dynamics Online: Theory and Implementation Using Autolev&lt;/em&gt;. Basically, the process involved going through each of these codes, validating the parser results and improving the rules if required to make sure the codes parsed well.
&lt;p&gt;As of now, a large number of codes of &lt;em&gt;Dynamics Online&lt;/em&gt; have been parsed. Completing all the remaining codes of the book would make the parser more complete.&lt;/li&gt;
&lt;li&gt;There are some limitations and issues with the parser and these have been discussed in the documentation. The plan is to fix these in order of priority.&lt;/li&gt;
&lt;li&gt;The parser is currently built using a kind of Concrete Syntax Tree (CST) using the &lt;a class="reference external" href="http://www.antlr.org/"&gt;ANTLR&lt;/a&gt; framework. It would be ideal to switch from a CST to an Abstract Syntax Tree (AST). This way, the parser code will be independent of the ANTLR grammar which makes it a lot more flexible. It would also be easier to make changes to the grammar and the rules of the parser.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would like to keep contributing to SymPy. I would be doing a lot of math in college especially related to data science so I would love to contribute in areas like Probability and Algebra among others. I would also like to help newcomers feel comfortable with the environment.&lt;/p&gt;
&lt;h2&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;I would like to thank my mentors &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt; and &lt;a href="https://github.com/moorepants"&gt;Jason Moore&lt;/a&gt; for believing in me and taking time out from their busy schedules to guide me throughout the project. I would also like to thank &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt; for looking over GSoC as the org admin and making sure that we all had a great experience working with SymPy.&lt;/p&gt;
&lt;h2&gt;Links:&lt;/h2&gt;
&lt;p&gt;Main PR: &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Updated parser code PR: &lt;a href="https://github.com/sympy/sympy/pull/15006"&gt;#15006&lt;/a&gt; and&lt;a href="https://github.com/sympy/sympy/pull/15013"&gt; #15013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Documentation PRs: &lt;a href="https://github.com/sympy/sympy/pull/15046"&gt;#15046&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/15066"&gt;#15066&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/15067"&gt;#15067&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyDy for Autolev Users guide PR: &lt;a href="https://github.com/sympy/sympy/pull/15077"&gt;#15077&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Weekly Blog link: &lt;a href="https://nkhlpappu.wordpress.com/"&gt;https://nkhlpappu.wordpress.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=15</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 03 Aug 2018 20:36:26 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/08/03/autolev-parser-status-update-4/</link>
      <description>&lt;p&gt;I have made some changes to the parser code to parse more files since &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt; has been merged. I have also made the changes suggested in that PR after it had been merged. I have opened a new PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/15006/"&gt;#15006&lt;/a&gt;&amp;#160;for the updated parser code. I have also opened &lt;a href="https://github.com/sympy/sympy/pull/15013"&gt;#15013&lt;/a&gt;&amp;#160;to include tests for physics functions which I didn&amp;#8217;t do in the initial PR. The GitLab repo autolev-test-examples is in good shape now and is part of the sympy user.&lt;/p&gt;
&lt;p&gt;I am currently writing the documentation in which I shall include how to use the parser, gotchas, limitations, issues and future improvements. I shall also include a rewritten version of the PyDy for Autolev Users guide in it.&lt;/p&gt;
&lt;p&gt;I shall then write the output tests (Tests to compare the outputs of Autolev against those of SymPy) for most of the test examples in the GitLab repo (I shall include these in a directory called output-tests in the GitLab repo). I think its good to put them here as I don&amp;#8217;t see the need to test these on Travis as changing the parser code won&amp;#8217;t affect these. Plus, they will be in a place where the test examples are which are what they will be based on. We could still test these on Travis if required even from here I suppose.&lt;/p&gt;
&lt;p&gt;Finally, I shall wrap things up with the Final Report and Submission.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=95</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 11: unset_show bug and documentation</title>
      <pubDate>Mon, 30 Jul 2018 17:45:07 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/30/week-11-unset_show-bug-and-documentation/</link>
      <description>&lt;p&gt;Last week, I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;for implementation of plotting methods.&amp;#160;Soon after pushing my commits, many of the jobs failed on Travis. It was strange as I was not able to reciprocate the errors locally.&lt;/p&gt;
&lt;p&gt;After discussing it on Gitter, I got to know that it was due to the printing of plots using TextBackend in the doctest in absence of matplotlib. As matplotlib was present in my system,&amp;#160; doctest used matplotlib backend instead of TextBackend locally, hence passing all tests.&amp;#160;&lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;&amp;#160;suggested using&amp;#160;&lt;em&gt;unset_show &lt;/em&gt;to stop the printing of plots during doctest but apparently,&amp;#160;&lt;em&gt;unset_show&amp;#160;&lt;/em&gt;didn&amp;#8217;t work for TextBackend. This was fixed by&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14984"&gt;#14984&lt;/a&gt;&amp;#160;later that day and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;passed all the tests after former one was merged.&lt;/p&gt;
&lt;p&gt;This week, I also started editing&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14453"&gt;#14453&lt;/a&gt;&amp;#160;for documentation. It included a few beam problems along with their ascii diagrams.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;and&lt;a href="https://github.com/sympy/sympy/pull/14453"&gt;#14453&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;&amp;#160;Add more beam problems for documentation.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5320864463564984752</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 11</title>
      <pubDate>Sun, 29 Jul 2018 14:47:17 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-11.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief progress of Rubi&amp;nbsp;module in the 11th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;The main PR, which contains the major changes of this GSoC period was merged this week. I had not run pyflakes on it. I ran pyflakes on the main PR and fixed undefined issues.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;This week was mainly spent to test code generation. Initially, there was some error in generating the code. An &lt;a href="https://github.com/HPAC/matchpy/issues/33"&gt;issue&lt;/a&gt; was opened in this regard. I tried various other structure of Rubi to get it working.&amp;nbsp; Currently, patterns are not matched correctly. I have opened a &lt;a href="https://github.com/sympy/sympy/pull/14988"&gt;PR&lt;/a&gt; for this. We are still trying to get the code generator working so that we can reduce the loading time of rules. Now, the loading time of all rules is around 10 minutes.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=13</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 27 Jul 2018 20:24:12 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/27/autolev-parser-status-update-3/</link>
      <description>&lt;p&gt;Hello Everyone. I have been working on getting the PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;&amp;#160;into shape and now it is finally merged. I have written my own tests for the PR so as to not include copyrighted files that belong to the creators of Autolev.&lt;/p&gt;
&lt;p&gt;I am now working on a &lt;a href="https://gitlab.com/NikhilPappu/test-examples/"&gt;test-examples repo&lt;/a&gt; which serves as a showcase of the parser and also as a source of additional tests. The repo is private on GitLab as it contains copyrighted files. You can request access at the repo link above. Files from this repo can be copied over to the test_examples folder of parsing/autolev to use them as tests. From now, I will be working on adding more examples from the PyDy example repo, Autolev Tutorial, and Dynamics Online to this repo while improving the code of the parser to parse all these codes. I am also making note of things like errors, inaccuracies etc to include them in the Documentation.&lt;/p&gt;
&lt;p&gt;I will open another PR once I have made enough number of changes to the parser code.&lt;/p&gt;
&lt;p&gt;Here is my plan for the future of this project:&lt;/p&gt;
&lt;p&gt;Till the end of GSoC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work on getting the test-examples repo in good shape.&lt;/li&gt;
&lt;li&gt;Write extensive Documentation (explaining what the parser can do, how to use it,&amp;#160; limitations, issues, future improvements etc).&lt;/li&gt;
&lt;li&gt;Work on as many Dynamics Online codes (which I shall include in the repo) as possible (Wrap up Ch4 and hoping to get half of Ch5 done (as it is quite big)).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Post GSoC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Finish the rest of the Dynamics Online Book (Whatever is left of Ch5 and also Ch6 which I think is less important).&lt;/li&gt;
&lt;li&gt;Work on the issues that I will be listing down in the documentation one by one after discussing the possible fixes (Some of these might require changes in the parser while some others require changes in the SymPy code while I do not have much of an idea about the fixes of some other ones).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Nikhil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=93</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 10: Implementing plotting methods</title>
      <pubDate>Tue, 24 Jul 2018 18:12:09 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/24/week-10-implementing-plotting-methods/</link>
      <description>&lt;p&gt;This week I started working on implementing methods to plot Shear force, bending moment, slope and deflection diagrams.&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;was created for it.&lt;/p&gt;
&lt;p&gt;Mainly four methods were added to the Beam class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot_shear_force: This method returns a plot for Shear force present in the Beam object.&lt;/li&gt;
&lt;li&gt;plot_bending_moment: This method returns a plot for Bending moment present in the Beam object.&lt;/li&gt;
&lt;li&gt;plot_slope: This method returns a plot for slope of the elastic curve of the Beam.&lt;/li&gt;
&lt;li&gt;plot_delfection: This method returns a plot for the deflection curve of the Beam object.&lt;/li&gt;
&lt;li&gt;plot_loading_results: This method returns&amp;#160;fig object containing subplots of Shear Force, Bending Moment,&amp;#160;Slope and Deflection of the Beam object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/jashan498/beam_examples/blob/master/beam_plots.ipynb"&gt;Here&lt;/a&gt;&amp;#160;is a sample notebook demonstrating how to use these plotting methods.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;Add more beam problems to the documentation.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-4503634706614858581</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 10</title>
      <pubDate>Sun, 22 Jul 2018 15:35:32 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-10.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief progress of Rubi&amp;nbsp;module in the 10th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Last week, we were able to load all rules. Rubi has now come in a very stable and working condition. One Missing thing in the main &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt; was missing instructions and documentation. This week I tried my best to write instructions, so that a new user can easily get familiar with it. I have kept it really simple.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Initially, I wrote a script in Mathematica to generate downvalues&amp;nbsp;in separate files. This was done till now manually, but now it's automated. Then I wrote a sympy&amp;nbsp;script to generate all rules and constraints in proper files directly just by running a function.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;For a more easier understanding of steps, I created&amp;nbsp;`rubi_parsing_guide.md` explaining all steps.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Next thing I realised that it would be good if we create a parsing script for the tests too. Till now I used maple format. But a lot of manual things were required. So I wrote a script which directly parses tests into sympy&amp;nbsp;format. All this are added properly in `rubi_parsing_guide.md`.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;`init` in Rubi&amp;nbsp;too was updated with proper explanation of basic structure of rules and constraints. I also updated docs of few important utility_functions.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Now a new user can easily get familiar with Rubi and working with it will be simple.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;I have also opened a new &lt;a href="https://github.com/sympy/sympy/pull/14956"&gt;PR&lt;/a&gt; for new utility_functions. Once the old &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt; gets merged, we can merge this.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=9</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 20 Jul 2018 22:31:06 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/20/autolev-parser-status-update-2/</link>
      <description>&lt;p&gt;I have been working on improving the parser by parsing Dynamics online codes, planning out how to go about writing tests and other aspects of the project and getting the PR into shape.&lt;/p&gt;
&lt;p&gt;I am currently working on writing tests to cover all the rules of the parser. I should be done with this in 2 days.&lt;/p&gt;
&lt;p&gt;This is the plan I have for the third phase:&lt;/p&gt;
&lt;ol&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Make the PR merge ready:&lt;/span&gt;
&lt;ol&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Finish the tests for the parser rules and get the PR merged.&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;open a new PR to work on further improvements.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;additional_tests (will be added in a private BitBucket repo). Here I shall go through many codes from these sources and improve the parser to parse most of these. I shall take notes on little details and errors so that I can include them in the documentation.&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;PyDy example repo (mass spring damper, double pendulum, chaos pendulum examples)&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Dynamics Online Chapters 1 &amp;#8211; 4&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Autolev Tutorial Examples (5.1 &amp;#8211; 5.7)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Documentation (What the parser can do, How it should be used, Limitations, Future improvements etc)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Make the parser parse Dynamics Online Chapter 5 codes and the Bicycle Model.&lt;/li&gt;
&lt;li&gt;&lt;span style="font-weight: 400;"&gt;Final Report&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=71</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 8 &amp; 9: Beam_3d class</title>
      <pubDate>Tue, 17 Jul 2018 16:42:54 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/17/week-8-9-07-july-20-july/</link>
      <description>&lt;p&gt;I started implementing Beam_3d class which can be used to find Shear force, Bending moment, Slope, Deflection and other few things for the Beam object.&amp;#160; PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14883"&gt;#14883&lt;/a&gt;&amp;#160;was created for this.&lt;/p&gt;
&lt;p&gt;I implemented Beam_3d class using&amp;#160;&amp;#160;&lt;a href="http://homes.civil.aau.dk/jc/FemteSemester/Beams3D.pdf" rel="nofollow"&gt;this paper&lt;/a&gt;&amp;#160;as a reference. Actually, like Beam class, it uses a few sets of equations to find certain quantities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To find&amp;#160;&lt;em&gt;Shear force&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;Bending moment&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560335-0c45e50e-8514-11e8-9fb1-f9d27040b4d8.png" rel="noopener"&gt;&lt;img alt="shear" src="https://user-images.githubusercontent.com/31389737/42560335-0c45e50e-8514-11e8-9fb1-f9d27040b4d8.png" /&gt;&lt;/a&gt;&lt;br /&gt;
where&amp;#160;&lt;em&gt;[N, Q&lt;sub&gt;y&lt;/sub&gt;, Q&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;[M&lt;sub&gt;x&lt;/sub&gt;, M&lt;sub&gt;y&lt;/sub&gt;, M&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;are the shear force and bending moment along x-y-z-axes respectively (&lt;em&gt;q&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;m&lt;/em&gt;&amp;#160;are applied load and moment).&lt;/li&gt;
&lt;li&gt;To find&amp;#160;&lt;em&gt;Slope&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;Deflection&lt;/em&gt;:&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560803-2e2ea592-8515-11e8-81cc-b511e1286ff5.png" rel="noopener"&gt;&lt;img alt="def_1" src="https://user-images.githubusercontent.com/31389737/42560803-2e2ea592-8515-11e8-81cc-b511e1286ff5.png" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560832-466c2986-8515-11e8-9ac7-4a0939a41a52.png" rel="noopener"&gt;&lt;img alt="def_2" src="https://user-images.githubusercontent.com/31389737/42560832-466c2986-8515-11e8-9ac7-4a0939a41a52.png" /&gt;&lt;/a&gt;&lt;br /&gt;
where&amp;#160;&lt;em&gt;[w&lt;sub&gt;x&lt;/sub&gt;, w&lt;sub&gt;y&lt;/sub&gt;, w&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;[&amp;#952;&lt;sub&gt;x&lt;/sub&gt;, &amp;#952;&lt;sub&gt;y&lt;/sub&gt;, &amp;#952;&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;are deflection and slope along three axes respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example for the API:&lt;/p&gt;
&lt;p&gt;There is a beam of l meters long. A constant distributed load of magnitude q&lt;br /&gt;
is applied along the y-axis from start till the end of the beam. A constant distributed&lt;br /&gt;
moment of magnitude m is also applied along the z-axis from start till the end of the beam. Beam is fixed at both of its end. So, deflection of the beam at the both ends&lt;br /&gt;
is restricted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam_3d
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; l, E, G, I, A = symbols('l, E, G, I, A')
&amp;gt;&amp;gt;&amp;gt; b = Beam_3d(l, E, G, I, A)
&amp;gt;&amp;gt;&amp;gt; b.apply_support(0, "fixed")
&amp;gt;&amp;gt;&amp;gt; b.apply_support(l, "fixed")
&amp;gt;&amp;gt;&amp;gt; q, m = symbols('q, m')
&amp;gt;&amp;gt;&amp;gt; b.apply_load(q, dir="y")
&amp;gt;&amp;gt;&amp;gt; b.apply_moment_load(m, dir="z")
&amp;gt;&amp;gt;&amp;gt; b.shear_force()
[0, -q*x, 0]
&amp;gt;&amp;gt;&amp;gt; b.bending_moment()
[0, 0, -m*x + q*x**2/2]
&amp;gt;&amp;gt;&amp;gt; b.solve_slope_deflection()
&amp;gt;&amp;gt;&amp;gt; b.slope()
[0, 0, l*x*(-l*q + 3*l*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*(A*G*l**2 + 12*E*I)) + 3*m)/(6*E*I)
+ q*x**3/(6*E*I) + x**2*(-l*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*(A*G*l**2 + 12*E*I))
- m)/(2*E*I)]
&amp;gt;&amp;gt;&amp;gt; b.deflection()
[0, -l**2*q*x**2/(12*E*I) + l**2*x**2*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(8*E*I*(A*G*l**2 + 12*E*I))
+ l*m*x**2/(4*E*I) - l*x**3*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(12*E*I*(A*G*l**2 + 12*E*I)) - m*x**3/(6*E*I)
+ q*x**4/(24*E*I) + l*x*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*A*G*(A*G*l**2 + 12*E*I)) - q*x**2/(2*A*G), 0]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;As this class is relatively new, it would require a few improvements in the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As&amp;#160;&lt;code&gt;Beam_3d&lt;/code&gt;&amp;#160;doesn&amp;#8217;t use&amp;#160;&lt;code&gt;SingularityFunction&lt;/code&gt;, I was unable to find a way to represent point load/moments. So for now&amp;#160;&lt;code&gt;Beam_3d&lt;/code&gt;&amp;#160; only supports continous load (applied over the whole span length of beam).&lt;/li&gt;
&lt;li&gt;Also,&amp;#160;This class assumes that any kind of distributed load/moment is&lt;br /&gt;
applied throughout the span of a beam.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, after discussing it with Arihant, we decided to raise NotImplementedError in such cases.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14883"&gt;#14883&lt;/a&gt;&amp;#160;gets merge by the end of next week.&lt;/li&gt;
&lt;li&gt;Start implementing plotting methods for Beam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5913583019178491882</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 9</title>
      <pubDate>Sun, 15 Jul 2018 15:13:26 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-9.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the progress of &lt;/span&gt;rubi&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt; module in the 9th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;In the very beginning of the week, the PR for appelf1 was merged. My aim for this week was to load all rules and test at least&amp;nbsp;a small part for each type of rule. Due to the time factor, its not possible to test all. Moreover, rubi needs to be updated to the latest version, so the test suite too will be updated.&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I started with trigo rules. They are huge in number. They were never tested before, so some utility_functions like `&lt;i&gt;TrigReduce&lt;/i&gt;`, `&lt;i&gt;KnownTrigIntegrandQ&lt;/i&gt;`, `&lt;i&gt;FunctionOfTrig&lt;/i&gt;` etc were wrong. They were corrected. Soon I realised a difference between sympy and Mathematica. In mathematica, `&lt;i&gt;1/Cot[x]`&lt;/i&gt; is automatically transformed to `&lt;i&gt;Tan[x]&lt;/i&gt;` and `&lt;i&gt;1/Tan[x]&lt;/i&gt;` too was transformed to `&lt;i&gt;Cot[x]`&lt;/i&gt;. But in sympy, these are different. So, `&lt;i&gt;tan(x)&lt;/i&gt;` didn't match to `&lt;i&gt;cot(x)&lt;/i&gt;` . Francesco suggested to replace all `&lt;i&gt;cot&lt;/i&gt;` with `&lt;i&gt;1/tan&lt;/i&gt;`&amp;nbsp; and similarly for `&lt;i&gt;sec&lt;/i&gt;` and `&lt;i&gt;csc`&lt;/i&gt; (in the code generator too).&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Next, I moved to `&lt;i&gt;inverse_trigo&lt;/i&gt;`, `&lt;i&gt;hyperbolic&lt;/i&gt;` and `&lt;i&gt;inverse_hyperbolic&lt;/i&gt;`. I tested some test cases for all these rules. I also tested `&lt;i&gt;error_functions&lt;/i&gt;` completely to make sure `&lt;i&gt;special_functions&lt;/i&gt;` are working properly.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;After all this, I feel rubi is in a stable and working condition. The loading time is around `&lt;i&gt;10 minutes`&lt;/i&gt;. Except for the loading time, the performance of rubi is good.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I have left `&lt;i&gt;DerivativeIntegration&lt;/i&gt;` and `&lt;i&gt;Piecewise&lt;/i&gt;` rules. We will be discussing it.&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-7572262454034848939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 8</title>
      <pubDate>Sun, 08 Jul 2018 15:20:15 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-8.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;Hello everyone. Here is the brief summary of the progress of rubi integration module in the 8th week of GSoC period.&lt;br /&gt;&lt;br /&gt;We completed the testing of logarithmic test cases. Some of the tests are failing as they depend on trigonometric rules. The rules and tests have been updated in this &lt;a href="https://github.com/sympy/sympy/pull/14756/"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Next, I loaded all trigonometric rules. They are huge in number. So the loading time increased from &lt;i&gt;1 min 30 sec&lt;/i&gt; to around&amp;nbsp;&lt;i&gt;6 min&lt;/i&gt;. For now, I have not loaded them. I also updated the test cases for &lt;i&gt;parsetools&lt;/i&gt; and fixed code quality issues. Currently, the travis is failing due to a bug, which has been fixed in branch &lt;i&gt;1.2.&lt;/i&gt; In the upcoming week, &lt;i&gt;1.2&lt;/i&gt;&amp;nbsp;probably will get merged in master.&lt;br /&gt;&lt;br /&gt;Then I moved on to implementing &lt;i&gt;appellf1&lt;/i&gt; in sympy. Progress can be seen in this &lt;a href="https://github.com/sympy/sympy/pull/14882"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;We will be updating our &lt;i&gt;utility_functions&lt;/i&gt; to the latest version of RUBI.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
